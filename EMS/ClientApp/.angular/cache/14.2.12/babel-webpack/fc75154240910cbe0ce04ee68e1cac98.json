{"ast":null,"code":"import _asyncToGenerator from \"D:/Angular Dev/HR_EMS/EMS/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n\n  createHeaders() {\n    const token = this.getTokenFromCookie();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n\n  getTokenFromCookie() {\n    var _a;\n\n    return ((_a = document.cookie.split('; ').find(cookie => cookie.startsWith('auth_token='))) === null || _a === void 0 ? void 0 : _a.split('=')[1]) || '';\n  }\n\n  get(endpoint) {\n    const headers = this.createHeaders();\n    return this.http.get(`${this.baseUrl}${endpoint}`, {\n      headers\n    });\n  }\n\n  post(endpoint, data) {\n    const headers = this.createHeaders();\n    return this.http.post(`${this.baseUrl}${endpoint}`, data, {\n      headers\n    });\n  }\n\n  put(endpoint, data) {\n    const headers = this.createHeaders();\n    return this.http.put(`${this.baseUrl}${endpoint}`, data, {\n      headers\n    });\n  }\n\n  delete(endpoint) {\n    const headers = this.createHeaders();\n    return this.http.delete(`${this.baseUrl}${endpoint}`, {\n      headers\n    });\n  }\n\n  getTokenFromCookieApi() {\n    // Make an HTTP request to fetch the token from an API endpoint\n    return this.http.get(`${this.baseUrl}api/auth/get-token`);\n  }\n\n  getToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const apiToken = yield _this.getTokenFromCookieApi().toPromise();\n        return apiToken;\n      } catch (error) {\n        console.error('Error fetching token from API:', error);\n        return '';\n      }\n    })();\n  }\n\n}\n\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\n\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAqBA,WAArB,QAAwC,sBAAxC;;;AAMA,OAAM,MAAOC,UAAP,CAAiB;EACrBC,YAAoBC,IAApB,EAAkEC,OAAlE,EAAiF;IAA7D;IAA8C;EAAoB;;EAE9EC,aAAa;IACnB,MAAMC,KAAK,GAAG,KAAKC,kBAAL,EAAd;IACA,OAAO,IAAIP,WAAJ,CAAgB;MACrB,gBAAgB,kBADK;MAErB,iBAAiB,UAAUM,KAAK;IAFX,CAAhB,CAAP;EAID;;EAEOC,kBAAkB;;;IACxB,OAAO,eAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,IAAtB,EAA4BC,IAA5B,CAAkCF,MAAD,IAAYA,MAAM,CAACG,UAAP,CAAkB,aAAlB,CAA7C,OAA8E,IAA9E,IAA8EC,aAA9E,GAA8E,MAA9E,GAA8EA,GAAEH,KAAF,CAAQ,GAAR,EAAa,CAAb,CAA9E,KAAiG,EAAxG;EACD;;EAGDI,GAAG,CAACC,QAAD,EAAiB;IAClB,MAAMC,OAAO,GAAG,KAAKV,aAAL,EAAhB;IACA,OAAO,KAAKF,IAAL,CAAUU,GAAV,CAAiB,GAAG,KAAKT,OAAO,GAAGU,QAAQ,EAA3C,EAA+C;MAAEC;IAAF,CAA/C,CAAP;EACD;;EAEDC,IAAI,CAACF,QAAD,EAAmBG,IAAnB,EAA4B;IAC9B,MAAMF,OAAO,GAAG,KAAKV,aAAL,EAAhB;IACA,OAAO,KAAKF,IAAL,CAAUa,IAAV,CAAkB,GAAG,KAAKZ,OAAO,GAAGU,QAAQ,EAA5C,EAAgDG,IAAhD,EAAsD;MAAEF;IAAF,CAAtD,CAAP;EACD;;EAEDG,GAAG,CAACJ,QAAD,EAAmBG,IAAnB,EAA4B;IAC7B,MAAMF,OAAO,GAAG,KAAKV,aAAL,EAAhB;IACA,OAAO,KAAKF,IAAL,CAAUe,GAAV,CAAiB,GAAG,KAAKd,OAAO,GAAGU,QAAQ,EAA3C,EAA+CG,IAA/C,EAAqD;MAAEF;IAAF,CAArD,CAAP;EACD;;EAEDI,MAAM,CAACL,QAAD,EAAiB;IACrB,MAAMC,OAAO,GAAG,KAAKV,aAAL,EAAhB;IACA,OAAO,KAAKF,IAAL,CAAUgB,MAAV,CAAoB,GAAG,KAAKf,OAAO,GAAGU,QAAQ,EAA9C,EAAkD;MAAEC;IAAF,CAAlD,CAAP;EACD;;EAEOK,qBAAqB;IAC3B;IACA,OAAO,KAAKjB,IAAL,CAAUU,GAAV,CAAsB,GAAG,KAAKT,OAAO,oBAArC,CAAP;EACD;;EAEaiB,QAAQ;IAAA;;IAAA;MACpB,IAAI;QACF,MAAMC,QAAQ,SAAS,KAAI,CAACF,qBAAL,GAA6BG,SAA7B,EAAvB;QACA,OAAOD,QAAP;MACD,CAHD,CAGE,OAAOE,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;QACA,OAAO,EAAP;MACD;IAPmB;EAQrB;;AAjDoB;;;mBAAVvB,YAAUyB,wCACyB,UADzB;AACmC;;;SAD7CzB;EAAU0B,SAAV1B,UAAU;EAAA2B,YAFT","names":["HttpHeaders","ApiService","constructor","http","baseUrl","createHeaders","token","getTokenFromCookie","cookie","split","find","startsWith","_a","get","endpoint","headers","post","data","put","delete","getTokenFromCookieApi","getToken","apiToken","toPromise","error","console","i0","factory","providedIn"],"sourceRoot":"","sources":["D:\\Angular Dev\\HR_EMS\\EMS\\ClientApp\\src\\app\\Services\\ApiService.ts"],"sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService<T> {\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) { }\r\n\r\n  private createHeaders(): HttpHeaders {\r\n    const token = this.getTokenFromCookie();\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n  }\r\n\r\n  private getTokenFromCookie(): string {\r\n    return document.cookie.split('; ').find((cookie) => cookie.startsWith('auth_token='))?.split('=')[1] || '';\r\n  }\r\n  \r\n\r\n  get(endpoint: string): Observable<T> {\r\n    const headers = this.createHeaders();\r\n    return this.http.get<T>(`${this.baseUrl}${endpoint}`, { headers });\r\n  }\r\n\r\n  post(endpoint: string, data: any): Observable<T> {\r\n    const headers = this.createHeaders();\r\n    return this.http.post<T>(`${this.baseUrl}${endpoint}`, data, { headers });\r\n  }\r\n\r\n  put(endpoint: string, data: any): Observable<T> {\r\n    const headers = this.createHeaders();\r\n    return this.http.put<T>(`${this.baseUrl}${endpoint}`, data, { headers });\r\n  }\r\n\r\n  delete(endpoint: string): Observable<T> {\r\n    const headers = this.createHeaders();\r\n    return this.http.delete<T>(`${this.baseUrl}${endpoint}`, { headers });\r\n  }\r\n\r\n  private getTokenFromCookieApi(): Observable<string> {\r\n    // Make an HTTP request to fetch the token from an API endpoint\r\n    return this.http.get<string>(`${this.baseUrl}api/auth/get-token`);\r\n  }\r\n\r\n  private async getToken(): Promise<string> {\r\n    try {\r\n      const apiToken = await this.getTokenFromCookieApi().toPromise();\r\n      return apiToken;\r\n    } catch (error) {\r\n      console.error('Error fetching token from API:', error);\r\n      return '';\r\n    }\r\n  }\r\n\r\n  // async get(endpoint: string): Promise<Observable<T>> {\r\n  //   const headers = this.createHeaders();\r\n  //   const token = await this.getToken();\r\n  //   headers.set('Authorization', `Bearer ${token}`);\r\n  //   return this.http.get<T>(`${this.baseUrl}${endpoint}`, { headers });\r\n  // }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}