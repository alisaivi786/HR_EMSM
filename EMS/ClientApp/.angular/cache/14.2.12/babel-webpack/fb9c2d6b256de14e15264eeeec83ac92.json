{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../Services/DashboardService\";\nimport * as i2 from \"../../component/dashboard-card/dashboard-card.component\";\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(dashboardService) {\n      this.dashboardService = dashboardService; // Define your data values for the dashboard cards\n\n      this.totalLeaves = \"\"; // Initialize to an empty string\n\n      this.totalPendingRequests = \"\";\n      this.totalCanceledRequests = \"\";\n      this.remainingBalance = \"\";\n      this.chartData = [];\n    }\n\n    ngOnInit() {\n      // Call the API when the component initializes\n      this.dashboardService.getDashboard().subscribe(data => {\n        // Update the component properties with the API response\n        console.log(data);\n        this.totalLeaves = data.data.approved;\n        this.totalPendingRequests = data.data.pending;\n        this.totalCanceledRequests = data.data.reject;\n        this.remainingBalance = (parseInt(data.data.totalEmployeeLeave) - parseInt(data.data.approved)).toString();\n        this.chartData = [parseInt(this.remainingBalance), parseInt(this.totalCanceledRequests), parseInt(this.totalPendingRequests), parseInt(this.totalLeaves)];\n        console.log(this.chartData);\n      }, error => {\n        console.error('Error occurred:', error); // Handle the error, e.g., display an error message to the user\n      });\n    }\n\n  }\n\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.DashboardService));\n  };\n\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"dashboard\"]],\n    decls: 11,\n    vars: 8,\n    consts: [[1, \"container\"], [1, \"row\"], [1, \"col-3\"], [\"title\", \"Availed Leave\", \"buttonLabel\", \"View Details\", 3, \"cardClass\", \"content\"], [\"title\", \"Pending leave\", \"buttonLabel\", \"View Details\", 3, \"cardClass\", \"content\"], [\"title\", \"Remaining Leave\", \"buttonLabel\", \"View Details\", 3, \"cardClass\", \"content\"], [\"title\", \"Rejected Leave\", \"buttonLabel\", \"View Details\", 3, \"cardClass\", \"content\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"dashboard-card\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 2);\n        i0.ɵɵelement(5, \"dashboard-card\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 2);\n        i0.ɵɵelement(7, \"dashboard-card\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 2);\n        i0.ɵɵelement(9, \"dashboard-card\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(10, \"div\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"cardClass\", \"card-green\")(\"content\", ctx.totalLeaves);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"cardClass\", \"card-blue-shade\")(\"content\", ctx.totalPendingRequests);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"cardClass\", \"card-blue\")(\"content\", ctx.remainingBalance);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"cardClass\", \"card-red\")(\"content\", ctx.totalCanceledRequests);\n      }\n    },\n    dependencies: [i2.DashboardCardComponent],\n    encapsulation: 2\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}