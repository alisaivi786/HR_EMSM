{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport rfdc from 'rfdc';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\n/**\n * Throttle a function\n *\n */\n\nconst _c0 = [\"caretElm\"];\n\nfunction TooltipContentComponent_span_4_ng_template_1_Template(rf, ctx) {}\n\nconst _c1 = function (a0) {\n  return {\n    model: a0\n  };\n};\n\nfunction TooltipContentComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, TooltipContentComponent_span_4_ng_template_1_Template, 0, 0, \"ng-template\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, ctx_r1.context));\n  }\n}\n\nfunction TooltipContentComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.title, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction LegendComponent_header_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"header\", 4)(1, \"span\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.title);\n  }\n}\n\nfunction LegendComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 6)(1, \"ngx-charts-legend-entry\", 7);\n    i0.ɵɵlistener(\"select\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.labelClick.emit($event));\n    })(\"activate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activate($event));\n    })(\"deactivate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const entry_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"label\", entry_r2.label)(\"formattedLabel\", entry_r2.formattedLabel)(\"color\", entry_r2.color)(\"isActive\", ctx_r1.isActive(entry_r2));\n  }\n}\n\nfunction ChartComponent_ngx_charts_scale_legend_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelement(0, \"ngx-charts-scale-legend\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"horizontal\", ctx_r0.legendOptions && ctx_r0.legendOptions.position === ctx_r0.LegendPosition.Below)(\"valueRange\", ctx_r0.legendOptions.domain)(\"colors\", ctx_r0.legendOptions.colors)(\"height\", ctx_r0.view[1])(\"width\", ctx_r0.legendWidth);\n  }\n}\n\nfunction ChartComponent_ngx_charts_legend_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"ngx-charts-legend\", 5);\n    i0.ɵɵlistener(\"labelClick\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.legendLabelClick.emit($event));\n    })(\"labelActivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelActivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.legendLabelActivate.emit($event));\n    })(\"labelDeactivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelDeactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.legendLabelDeactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"horizontal\", ctx_r1.legendOptions && ctx_r1.legendOptions.position === ctx_r1.LegendPosition.Below)(\"data\", ctx_r1.legendOptions.domain)(\"title\", ctx_r1.legendOptions.title)(\"colors\", ctx_r1.legendOptions.colors)(\"height\", ctx_r1.view[1])(\"width\", ctx_r1.legendWidth)(\"activeEntries\", ctx_r1.activeEntries);\n  }\n}\n\nconst _c2 = [\"*\"];\nconst _c3 = [\"ngx-charts-axis-label\", \"\"];\nconst _c4 = [\"ticksel\"];\nconst _c5 = [\"ngx-charts-x-axis-ticks\", \"\"];\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_tspan_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"tspan\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tickLine_r14 = ctx.$implicit;\n    const i_r15 = ctx.index;\n    i0.ɵɵattribute(\"y\", i_r15 * 12);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tickLine_r14, \" \");\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_tspan_1_Template, 2, 2, \"tspan\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tickLines_r12 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", tickLines_r12);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtemplate(0, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template, 2, 1, \"ng-container\", 4);\n  }\n\n  if (rf & 2) {\n    const tick_r3 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.tickChunks(tick_r3));\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const tickFormatted_r5 = i0.ɵɵnextContext().ngIf;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r10.tickTrim(tickFormatted_r5), \" \");\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 5);\n    i0.ɵɵtemplate(4, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template, 1, 1, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(7, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template, 1, 1, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tickFormatted_r5 = ctx.ngIf;\n\n    const _r7 = i0.ɵɵreference(6);\n\n    const _r9 = i0.ɵɵreference(8);\n\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tickFormatted_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"text-anchor\", ctx_r4.textAnchor)(\"transform\", ctx_r4.textTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.isWrapTicksSupported)(\"ngIfThen\", _r7)(\"ngIfElse\", _r9);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_2__svg_ng_container_1_Template, 9, 6, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.tickTransform(tick_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tickFormat(tick_r3));\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"line\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r19.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"y1\", -ctx_r19.gridLineHeight);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_3__svg_g_1_Template, 2, 2, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r18 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r2.tickTransform(tick_r18));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showGridLines);\n  }\n}\n\nconst _c6 = [\"ngx-charts-x-axis\", \"\"];\n\nfunction XAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"dimensionsChanged\", function XAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.emitTicksHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"rotateTicks\", ctx_r0.rotateTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.xScale)(\"orient\", ctx_r0.xOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineHeight\", ctx_r0.dims.height)(\"width\", ctx_r0.dims.width)(\"tickValues\", ctx_r0.ticks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction XAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.orientation.Bottom)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nconst _c7 = [\"ngx-charts-y-axis-ticks\", \"\"];\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1__svg_tspan_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"tspan\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tickLine_r17 = ctx.$implicit;\n    const i_r18 = ctx.index;\n    const ctx_r16 = i0.ɵɵnextContext(6);\n    i0.ɵɵattribute(\"y\", i_r18 * (8 + ctx_r16.tickSpacing));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tickLine_r17, \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1__svg_tspan_1_Template, 2, 2, \"tspan\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tickLines_r14 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", tickLines_r14);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1_Template, 2, 1, \"ng-container\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tickLines_r14 = ctx.ngIf;\n    i0.ɵɵnextContext(2);\n\n    const _r11 = i0.ɵɵreference(8);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", tickLines_r14.length > 1)(\"ngIfElse\", _r11);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtemplate(0, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template, 2, 2, \"ng-container\", 5);\n  }\n\n  if (rf & 2) {\n    const tick_r5 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.tickChunks(tick_r5));\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const tickFormatted_r7 = i0.ɵɵnextContext().ngIf;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.tickTrim(tickFormatted_r7), \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 6);\n    i0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template, 1, 0, \"ng-container\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template, 1, 1, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(7, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template, 1, 1, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tickFormatted_r7 = ctx.ngIf;\n\n    const _r9 = i0.ɵɵreference(6);\n\n    const _r11 = i0.ɵɵreference(8);\n\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tickFormatted_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"font-size\", \"12px\");\n    i0.ɵɵattribute(\"dy\", ctx_r6.dy)(\"x\", ctx_r6.x1)(\"y\", ctx_r6.y1)(\"text-anchor\", ctx_r6.textAnchor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.wrapTicks)(\"ngIfThen\", _r9)(\"ngIfElse\", _r11);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_2__svg_ng_container_1_Template, 9, 10, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.transform(tick_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tickFormat(tick_r5));\n  }\n}\n\nfunction YAxisTicksComponent__svg_path_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 13);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"d\", ctx_r2.referenceAreaPath)(\"transform\", ctx_r2.gridLineTransform());\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 15);\n  }\n\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"x2\", ctx_r24.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 15);\n  }\n\n  if (rf & 2) {\n    const ctx_r25 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"x2\", -ctx_r25.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template, 1, 1, \"line\", 14);\n    i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template, 1, 1, \"line\", 14);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r23.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r23.orient === ctx_r23.Orientation.Left);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r23.orient === ctx_r23.Orientation.Right);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1_Template, 3, 3, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r22 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r3.transform(tick_r22));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.showGridLines);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const refLine_r26 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r28 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r28.tickTrim(ctx_r28.tickFormat(refLine_r26.value)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"dy\", ctx_r28.dy)(\"y\", -6)(\"x\", ctx_r28.gridLineWidth)(\"text-anchor\", ctx_r28.textAnchor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", refLine_r26.name, \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"line\", 16);\n    i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template, 5, 6, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const refLine_r26 = i0.ɵɵnextContext().$implicit;\n    const ctx_r27 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r27.transform(refLine_r26.value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x2\", ctx_r27.gridLineWidth)(\"transform\", ctx_r27.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r27.showRefLabels);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_5__svg_g_1_Template, 3, 4, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.showRefLines);\n  }\n}\n\nconst _c8 = [\"ngx-charts-y-axis\", \"\"];\n\nfunction YAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"dimensionsChanged\", function YAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.emitTicksWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickValues\", ctx_r0.ticks)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.yScale)(\"orient\", ctx_r0.yOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineWidth\", ctx_r0.dims.width)(\"referenceLines\", ctx_r0.referenceLines)(\"showRefLines\", ctx_r0.showRefLines)(\"showRefLabels\", ctx_r0.showRefLabels)(\"height\", ctx_r0.dims.height)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction YAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.yOrient)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nconst _c9 = [\"ngx-charts-svg-linear-gradient\", \"\"];\n\nfunction SvgLinearGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    i0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nconst _c10 = [\"ngx-charts-circle\", \"\"];\nconst _c11 = [\"ngx-charts-circle-series\", \"\"];\n\nfunction CircleSeriesComponent__svg_g_0__svg_rect_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"x\", ctx_r1.circle.cx - ctx_r1.circle.radius)(\"y\", ctx_r1.circle.cy)(\"width\", ctx_r1.circle.radius * 2)(\"height\", ctx_r1.circle.height)(\"fill\", ctx_r1.gradientFill);\n  }\n}\n\nfunction CircleSeriesComponent__svg_g_0__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"x\", ctx_r2.circle.cx - ctx_r2.circle.radius)(\"y\", ctx_r2.circle.cy)(\"width\", ctx_r2.circle.radius * 2)(\"height\", ctx_r2.circle.height)(\"fill\", ctx_r2.gradientFill);\n  }\n}\n\nconst _c12 = function (a0) {\n  return {\n    name: a0\n  };\n};\n\nfunction CircleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"defs\");\n    i0.ɵɵelement(2, \"g\", 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, CircleSeriesComponent__svg_g_0__svg_rect_3_Template, 1, 6, \"rect\", 2);\n    i0.ɵɵtemplate(4, CircleSeriesComponent__svg_g_0__svg_rect_4_Template, 1, 5, \"rect\", 2);\n    i0.ɵɵelementStart(5, \"g\", 3);\n    i0.ɵɵlistener(\"select\", function CircleSeriesComponent__svg_g_0_Template__svg_g_select_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onClick(ctx_r3.circle.data));\n    })(\"activate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_activate_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activateCircle());\n    })(\"deactivate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_deactivate_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivateCircle());\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.circle.gradientStops);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isSSR && ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSSR && ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"active\", ctx_r0.isActive(i0.ɵɵpureFunction1(20, _c12, ctx_r0.circle.seriesName)));\n    i0.ɵɵproperty(\"cx\", ctx_r0.circle.cx)(\"cy\", ctx_r0.circle.cy)(\"r\", ctx_r0.circle.radius)(\"fill\", ctx_r0.circle.color)(\"pointerEvents\", ctx_r0.circle.value === 0 ? \"none\" : \"all\")(\"data\", ctx_r0.circle.value)(\"classNames\", ctx_r0.circle.classNames)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(ctx_r0.circle))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", ctx_r0.circle.data);\n  }\n}\n\nconst _c13 = [\"ngx-charts-grid-panel\", \"\"];\nconst _c14 = [\"ngx-charts-grid-panel-series\", \"\"];\n\nfunction GridPanelSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 1);\n  }\n\n  if (rf & 2) {\n    const gridPanel_r1 = ctx.$implicit;\n    i0.ɵɵclassProp(\"grid-panel\", true)(\"odd\", gridPanel_r1.class === \"odd\")(\"even\", gridPanel_r1.class === \"even\");\n    i0.ɵɵproperty(\"height\", gridPanel_r1.height)(\"width\", gridPanel_r1.width)(\"x\", gridPanel_r1.x)(\"y\", gridPanel_r1.y);\n  }\n}\n\nconst _c15 = [\"ngx-charts-svg-radial-gradient\", \"\"];\n\nfunction SvgRadialGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    i0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nconst _c16 = [\"ngx-charts-area\", \"\"];\n\nfunction AreaComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c17 = [\"ngx-charts-count-up\", \"\"];\nconst _c18 = [\"tooltipAnchor\"];\nconst _c19 = [\"ngx-charts-tooltip-area\", \"\"];\n\nfunction TooltipArea__svg_ng_template_2__xhtml_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelement(1, \"span\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tooltipItem_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", tooltipItem_r5.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.getToolTipText(tooltipItem_r5), \" \");\n  }\n}\n\nfunction TooltipArea__svg_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, TooltipArea__svg_ng_template_2__xhtml_div_1_Template, 3, 3, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const model_r3 = ctx.model;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", model_r3);\n  }\n}\n\nconst _c20 = [\"ngx-charts-timeline\", \"\"];\n\nfunction AdvancedLegendComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", ctx_r0.roundedTotal)(\"valueFormatting\", ctx_r0.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.valueFormatting ? ctx_r1.valueFormatting(ctx_r1.roundedTotal) : ctx_r1.defaultValueFormatting(ctx_r1.roundedTotal), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16);\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", legendItem_r3._value)(\"valueFormatting\", ctx_r4.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.valueFormatting ? ctx_r5.valueFormatting(legendItem_r3.value) : ctx_r5.defaultValueFormatting(legendItem_r3.value), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 18);\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"countTo\", legendItem_r3.percentage)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", legendItem_r3.percentage.toLocaleString(), \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"mouseenter\", function AdvancedLegendComponent_div_7_Template_div_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.activate.emit(legendItem_r3.data));\n    })(\"mouseleave\", function AdvancedLegendComponent_div_7_Template_div_mouseleave_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.deactivate.emit(legendItem_r3.data));\n    })(\"click\", function AdvancedLegendComponent_div_7_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.select.emit(legendItem_r3.data));\n    });\n    i0.ɵɵelement(1, \"div\", 10);\n    i0.ɵɵtemplate(2, AdvancedLegendComponent_div_7_div_2_Template, 1, 2, \"div\", 11);\n    i0.ɵɵtemplate(3, AdvancedLegendComponent_div_7_div_3_Template, 2, 1, \"div\", 12);\n    i0.ɵɵelementStart(4, \"div\", 13);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AdvancedLegendComponent_div_7_div_6_Template, 1, 2, \"div\", 14);\n    i0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_div_7_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"border-left-color\", legendItem_r3.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(legendItem_r3.displayLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n  }\n}\n\nconst _c21 = [\"ngx-charts-area-series\", \"\"];\nconst _c22 = [\"tooltipTemplate\"];\nconst _c23 = [\"seriesTooltipTemplate\"];\n\nfunction AreaChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"baseValue\", ctx_r2.baseValue)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r2.activeEntries)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onClick($event, series_r11));\n    })(\"activate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onActivate($event));\n    })(\"deactivate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"baseValue\", ctx_r19.baseValue)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nconst _c24 = function (a0, a1) {\n  return [a0, a1];\n};\n\nfunction AreaChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, AreaChartComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"activeEntries\", ctx_r2.activeEntries)(\"gradient\", ctx_r2.gradient)(\"normalized\", true)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onClick($event, series_r11));\n    })(\"activate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onActivate($event));\n    })(\"deactivate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r10.seriesType.Stacked)(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template, 2, 10, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"showPercentage\", true)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"normalized\", true)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartNormalizedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c25 = \".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\";\n\nfunction AreaChartStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"activeEntries\", ctx_r2.activeEntries)(\"stacked\", true)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 12);\n    i0.ɵɵlistener(\"select\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onClick($event, series_r11));\n    })(\"activate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onActivate($event));\n    })(\"deactivate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r10.seriesType.Stacked)(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartStackedComponent__svg_g_9__svg_g_2_Template, 2, 10, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 14);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"stacked\", true)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 13);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartStackedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, AreaChartStackedComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c26 = [\"ngx-charts-bar\", \"\"];\n\nfunction BarComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.orientation)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c27 = [\"ngx-charts-bar-label\", \"\"];\nconst _c28 = [\"ngx-charts-series-horizontal\", \"\"];\n\nfunction SeriesHorizontal__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesHorizontal__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.click($event));\n    })(\"activate\", function SeriesHorizontal__svg_g_0_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activate.emit($event));\n    })(\"deactivate\", function SeriesHorizontal__svg_g_0_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"width\", bar_r2.width)(\"height\", bar_r2.height)(\"x\", bar_r2.x)(\"y\", bar_r2.y)(\"fill\", bar_r2.color)(\"stops\", bar_r2.gradientStops)(\"data\", bar_r2.data)(\"orientation\", ctx_r0.barOrientation.Horizontal)(\"roundEdges\", bar_r2.roundEdges)(\"gradient\", ctx_r0.gradient)(\"isActive\", ctx_r0.isActive(bar_r2.data))(\"ariaLabel\", bar_r2.ariaLabel)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.tooltipPlacement)(\"tooltipType\", ctx_r0.tooltipType)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", bar_r2.data)(\"noBarWhenZero\", ctx_r0.noBarWhenZero);\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"dimensionsChanged\", function SeriesHorizontal__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const i_r9 = restoredCtx.index;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.dataLabelWidthChanged.emit({\n        size: $event,\n        index: i_r9\n      }));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const b_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"barX\", b_r8.x)(\"barY\", b_r8.y)(\"barWidth\", b_r8.width)(\"barHeight\", b_r8.height)(\"value\", b_r8.total)(\"valueFormatting\", ctx_r7.dataLabelFormatting)(\"orientation\", ctx_r7.barOrientation.Horizontal);\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1__svg_g_1_Template, 1, 7, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.barsForDataLabels)(\"ngForTrackBy\", ctx_r1.trackDataLabelBy);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.valueScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.groupScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxWidthChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r8.valueScale)(\"activeEntries\", ctx_r8.activeEntries)(\"yScale\", ctx_r8.innerScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"roundEdges\", ctx_r8.roundEdges)(\"animations\", ctx_r8.animations)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontal2DComponent__svg_g_5__svg_g_1_Template, 2, 17, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_6__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxWidthChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r16.valueScale)(\"activeEntries\", ctx_r16.activeEntries)(\"yScale\", ctx_r16.innerScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"seriesName\", group_r17.name)(\"roundEdges\", ctx_r16.roundEdges)(\"animations\", ctx_r16.animations)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontal2DComponent__svg_g_6__svg_g_1_Template, 2, 16, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onClick($event, group_r9));\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onActivate($event, group_r9));\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event, group_r9));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Normalized)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template, 2, 15, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event, group_r15));\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event, group_r15));\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event, group_r15));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r14.groupTransform(group_r15));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r14.barChartType.Normalized)(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"activeEntries\", ctx_r14.activeEntries)(\"colors\", ctx_r14.colors)(\"series\", group_r15.series)(\"dims\", ctx_r14.dims)(\"gradient\", ctx_r14.gradient)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate)(\"seriesName\", group_r15.name)(\"animations\", ctx_r14.animations)(\"noBarWhenZero\", ctx_r14.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template, 2, 14, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxWidthChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Stacked)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"activeEntries\", ctx_r8.activeEntries)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template, 2, 17, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxWidthChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r16.barChartType.Stacked)(\"xScale\", ctx_r16.xScale)(\"yScale\", ctx_r16.yScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"activeEntries\", ctx_r16.activeEntries)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"seriesName\", group_r17.name)(\"animations\", ctx_r16.animations)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template, 2, 16, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nconst _c29 = [\"ngx-charts-series-vertical\", \"\"];\n\nfunction SeriesVerticalComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.onClick($event));\n    })(\"activate\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.activate.emit($event));\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx_r3.animations)(\"width\", bar_r4.width)(\"height\", bar_r4.height)(\"x\", bar_r4.x)(\"y\", bar_r4.y)(\"fill\", bar_r4.color)(\"stops\", bar_r4.gradientStops)(\"data\", bar_r4.data)(\"orientation\", ctx_r3.barOrientation.Vertical)(\"roundEdges\", bar_r4.roundEdges)(\"gradient\", ctx_r3.gradient)(\"ariaLabel\", bar_r4.ariaLabel)(\"isActive\", ctx_r3.isActive(bar_r4.data))(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipPlacement\", ctx_r3.tooltipPlacement)(\"tooltipType\", ctx_r3.tooltipType)(\"tooltipTitle\", ctx_r3.tooltipTemplate ? undefined : bar_r4.tooltipText)(\"tooltipTemplate\", ctx_r3.tooltipTemplate)(\"tooltipContext\", bar_r4.data)(\"noBarWhenZero\", ctx_r3.noBarWhenZero)(\"animations\", ctx_r3.animations);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_0__svg_g_1_Template, 1, 22, \"g\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.bars)(\"ngForTrackBy\", ctx_r0.trackBy);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event));\n    })(\"activate\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.activate.emit($event));\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r10 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"width\", bar_r10.width)(\"height\", bar_r10.height)(\"x\", bar_r10.x)(\"y\", bar_r10.y)(\"fill\", bar_r10.color)(\"stops\", bar_r10.gradientStops)(\"data\", bar_r10.data)(\"orientation\", ctx_r9.barOrientation.Vertical)(\"roundEdges\", bar_r10.roundEdges)(\"gradient\", ctx_r9.gradient)(\"ariaLabel\", bar_r10.ariaLabel)(\"isActive\", ctx_r9.isActive(bar_r10.data))(\"tooltipDisabled\", ctx_r9.tooltipDisabled)(\"tooltipPlacement\", ctx_r9.tooltipPlacement)(\"tooltipType\", ctx_r9.tooltipType)(\"tooltipTitle\", ctx_r9.tooltipTemplate ? undefined : bar_r10.tooltipText)(\"tooltipTemplate\", ctx_r9.tooltipTemplate)(\"tooltipContext\", bar_r10.data)(\"noBarWhenZero\", ctx_r9.noBarWhenZero)(\"animations\", ctx_r9.animations);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1__svg_g_1_Template, 1, 20, \"g\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.bars)(\"ngForTrackBy\", ctx_r1.trackBy);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_2__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"dimensionsChanged\", function SeriesVerticalComponent__svg_g_2__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const i_r17 = restoredCtx.index;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.dataLabelHeightChanged.emit({\n        size: $event,\n        index: i_r17\n      }));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const b_r16 = ctx.$implicit;\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"barX\", b_r16.x)(\"barY\", b_r16.y)(\"barWidth\", b_r16.width)(\"barHeight\", b_r16.height)(\"value\", b_r16.total)(\"valueFormatting\", ctx_r15.dataLabelFormatting)(\"orientation\", ctx_r15.barOrientation.Vertical);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_2__svg_g_1_Template, 1, 7, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.barsForDataLabels)(\"ngForTrackBy\", ctx_r2.trackDataLabelBy);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.groupScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.valueScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_select_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxHeightChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"activeEntries\", ctx_r8.activeEntries)(\"xScale\", ctx_r8.innerScale)(\"yScale\", ctx_r8.valueScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"seriesName\", group_r9.name)(\"roundEdges\", ctx_r8.roundEdges)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVertical2DComponent__svg_g_5__svg_g_1_Template, 1, 17, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_6__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_select_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxHeightChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"activeEntries\", ctx_r16.activeEntries)(\"xScale\", ctx_r16.innerScale)(\"yScale\", ctx_r16.valueScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"seriesName\", group_r17.name)(\"roundEdges\", ctx_r16.roundEdges)(\"animations\", ctx_r16.animations)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVertical2DComponent__svg_g_6__svg_g_1_Template, 1, 16, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onClick($event, group_r9));\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onActivate($event, group_r9));\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event, group_r9));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Normalized)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template, 2, 15, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event, group_r15));\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event, group_r15));\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event, group_r15));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r14.groupTransform(group_r15));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r14.barChartType.Normalized)(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"activeEntries\", ctx_r14.activeEntries)(\"colors\", ctx_r14.colors)(\"series\", group_r15.series)(\"dims\", ctx_r14.dims)(\"gradient\", ctx_r14.gradient)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate)(\"seriesName\", group_r15.name)(\"animations\", ctx_r14.animations)(\"noBarWhenZero\", ctx_r14.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template, 2, 14, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxHeightChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Stacked)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalStackedComponent__svg_g_4__svg_g_1_Template, 2, 17, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxHeightChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r16.barChartType.Stacked)(\"xScale\", ctx_r16.xScale)(\"yScale\", ctx_r16.yScale)(\"activeEntries\", ctx_r16.activeEntries)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"seriesName\", group_r17.name)(\"animations\", ctx_r16.animations)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalStackedComponent__svg_g_5__svg_g_1_Template, 2, 16, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nconst _c30 = [\"ngx-charts-box\", \"\"];\n\nfunction BoxComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"orientation\", ctx_r0.BarOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction BoxComponent__svg_line_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 6);\n  }\n\n  if (rf & 2) {\n    const line_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"hidden\", ctx_r1.hideBar);\n    i0.ɵɵattribute(\"x1\", line_r2.v1.x)(\"y1\", line_r2.v1.y)(\"x2\", line_r2.v2.x)(\"y2\", line_r2.v2.y)(\"stroke\", ctx_r1.strokeColor)(\"stroke-width\", i_r3 === 2 ? ctx_r1.medianLineWidth : ctx_r1.whiskerStrokeWidth)(\"mask\", i_r3 ? undefined : ctx_r1.maskLine);\n  }\n}\n\nconst _c31 = [\"ngx-charts-box-series\", \"\"];\n\nfunction BoxChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 5);\n    i0.ɵɵlistener(\"activate\", function BoxChartComponent__svg_g_5_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onActivate($event));\n    })(\"deactivate\", function BoxChartComponent__svg_g_5_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onDeactivate($event));\n    })(\"select\", function BoxChartComponent__svg_g_5_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onClick($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const result_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"yScale\", ctx_r0.yScale)(\"colors\", ctx_r0.colors)(\"roundEdges\", ctx_r0.roundEdges)(\"strokeColor\", ctx_r0.strokeColor)(\"strokeWidth\", ctx_r0.strokeWidth)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"series\", result_r1)(\"dims\", ctx_r0.dims)(\"animations\", ctx_r0.animations)(\"gradient\", ctx_r0.gradient);\n  }\n}\n\nconst _c32 = [\"ngx-charts-bubble-series\", \"\"];\n\nfunction BubbleSeriesComponent__svg_g_0__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_select_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick(circle_r1.data));\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_activate_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.activateCircle(circle_r1));\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_deactivate_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.deactivateCircle(circle_r1));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    i0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipPlacement\", ctx_r2.placementTypes.Top)(\"tooltipType\", ctx_r2.styleTypes.tooltip)(\"tooltipTitle\", ctx_r2.tooltipTemplate ? undefined : ctx_r2.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\n\nfunction BubbleSeriesComponent__svg_g_0__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_select_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onClick(circle_r1.data));\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_activate_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.activateCircle(circle_r1));\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_deactivate_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.deactivateCircle(circle_r1));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    i0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    i0.ɵɵproperty(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipPlacement\", ctx_r3.placementTypes.Top)(\"tooltipType\", ctx_r3.styleTypes.tooltip)(\"tooltipTitle\", ctx_r3.tooltipTemplate ? undefined : ctx_r3.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r3.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\n\nfunction BubbleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\");\n    i0.ɵɵtemplate(2, BubbleSeriesComponent__svg_g_0__svg_g_2_Template, 1, 18, \"g\", 1);\n    i0.ɵɵtemplate(3, BubbleSeriesComponent__svg_g_0__svg_g_3_Template, 1, 17, \"g\", 1);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"transform\", circle_r1.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isSSR);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSSR);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"showGridLines\", ctx_r0.showGridLines)(\"dims\", ctx_r0.dims)(\"xScale\", ctx_r0.xScale)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"showGridLines\", ctx_r1.showGridLines)(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const series_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onClick($event, series_r9));\n    })(\"activate\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onActivate($event));\n    })(\"deactivate\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"rScale\", ctx_r8.rScale)(\"xScaleType\", ctx_r8.xScaleType)(\"yScaleType\", ctx_r8.yScaleType)(\"xAxisLabel\", ctx_r8.xAxisLabel)(\"yAxisLabel\", ctx_r8.yAxisLabel)(\"colors\", ctx_r8.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r8.activeEntries)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BubbleChartComponent__svg_g_8__svg_g_1_Template, 2, 13, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"clip-path\", ctx_r2.clipPath);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.data)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const series_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event, series_r15));\n    })(\"activate\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event));\n    })(\"deactivate\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"rScale\", ctx_r14.rScale)(\"xScaleType\", ctx_r14.xScaleType)(\"yScaleType\", ctx_r14.yScaleType)(\"xAxisLabel\", ctx_r14.xAxisLabel)(\"yAxisLabel\", ctx_r14.yAxisLabel)(\"colors\", ctx_r14.colors)(\"data\", series_r15)(\"activeEntries\", ctx_r14.activeEntries)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BubbleChartComponent__svg_g_9__svg_g_1_Template, 2, 12, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"clip-path\", ctx_r3.clipPath);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.data)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nconst _c33 = [\"ngx-charts-heat-map-cell\", \"\"];\n\nfunction HeatMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c34 = [\"ngx-charts-heat-map-cell-series\", \"\"];\n\nconst _c35 = function (a0, a1, a2) {\n  return {\n    series: a0,\n    name: a1,\n    value: a2\n  };\n};\n\nfunction HeatCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClick(c_r1.cell));\n    })(\"activate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_activate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.activate.emit(c_r1.cell));\n    })(\"deactivate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.deactivate.emit(c_r1.cell));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"data\", c_r1.data)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", i0.ɵɵpureFunction3(14, _c35, c_r1.series, c_r1.label, c_r1.data));\n  }\n}\n\nfunction HeatMapComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\");\n  }\n\n  if (rf & 2) {\n    const rect_r7 = ctx.$implicit;\n    i0.ɵɵattribute(\"x\", rect_r7.x)(\"y\", rect_r7.y)(\"rx\", rect_r7.rx)(\"width\", rect_r7.width)(\"height\", rect_r7.height)(\"fill\", rect_r7.fill);\n  }\n}\n\nconst _c36 = [\"ngx-charts-line\", \"\"];\n\nfunction LineComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"path\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"d\", ctx_r0.initialPath)(\"fill\", ctx_r0.fill)(\"stroke\", ctx_r0.stroke);\n  }\n}\n\nfunction LineComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"path\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", ctx_r1.initialPath)(\"fill\", ctx_r1.fill)(\"stroke\", ctx_r1.stroke);\n  }\n}\n\nconst _c37 = [\"ngx-charts-line-series\", \"\"];\n\nfunction LineSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction LineSeriesComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"active\", ctx_r1.isActive(ctx_r1.data))(\"inactive\", ctx_r1.isInactive(ctx_r1.data));\n    i0.ɵɵproperty(\"data\", ctx_r1.data)(\"path\", ctx_r1.outerPath)(\"fill\", ctx_r1.hasGradient ? ctx_r1.gradientUrl : ctx_r1.colors.getColor(ctx_r1.data.name))(\"opacity\", ctx_r1.rangeFillOpacity)(\"animations\", ctx_r1.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction LineChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"referenceLines\", ctx_r1.referenceLines)(\"showRefLines\", ctx_r1.showRefLines)(\"showRefLabels\", ctx_r1.showRefLabels)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction LineChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"data\", series_r11)(\"activeEntries\", ctx_r10.activeEntries)(\"scaleType\", ctx_r10.scaleType)(\"curve\", ctx_r10.curve)(\"rangeFillOpacity\", ctx_r10.rangeFillOpacity)(\"hasRange\", ctx_r10.hasRange)(\"animations\", ctx_r10.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_8__svg_g_1_Template, 2, 11, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction LineChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r13 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r12.xScale)(\"yScale\", ctx_r12.yScale)(\"colors\", ctx_r12.colors)(\"data\", series_r13)(\"activeEntries\", ctx_r12.activeEntries)(\"scaleType\", ctx_r12.scaleType)(\"curve\", ctx_r12.curve)(\"rangeFillOpacity\", ctx_r12.rangeFillOpacity)(\"hasRange\", ctx_r12.hasRange)(\"animations\", ctx_r12.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_9__svg_g_1_Template, 2, 10, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction LineChartComponent__svg_g_10__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 14);\n    i0.ɵɵlistener(\"select\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event));\n    })(\"activate\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event));\n    })(\"deactivate\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"colors\", ctx_r14.colors)(\"data\", series_r15)(\"scaleType\", ctx_r14.scaleType)(\"visibleValue\", ctx_r14.hoveredVertical)(\"activeEntries\", ctx_r14.activeEntries)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate);\n  }\n}\n\nfunction LineChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 11);\n    i0.ɵɵlistener(\"mouseleave\", function LineChartComponent__svg_g_10_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 12);\n    i0.ɵɵlistener(\"hover\", function LineChartComponent__svg_g_10_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, LineChartComponent__svg_g_10__svg_g_2_Template, 2, 9, \"g\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r4.dims)(\"xSet\", ctx_r4.xSet)(\"xScale\", ctx_r4.xScale)(\"yScale\", ctx_r4.yScale)(\"results\", ctx_r4.results)(\"colors\", ctx_r4.colors)(\"tooltipDisabled\", ctx_r4.tooltipDisabled)(\"tooltipTemplate\", ctx_r4.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results);\n  }\n}\n\nfunction LineChartComponent__svg_g_11__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r24 = ctx.$implicit;\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r23.timelineXScale)(\"yScale\", ctx_r23.timelineYScale)(\"colors\", ctx_r23.colors)(\"data\", series_r24)(\"scaleType\", ctx_r23.scaleType)(\"curve\", ctx_r23.curve)(\"hasRange\", ctx_r23.hasRange)(\"animations\", ctx_r23.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 15);\n    i0.ɵɵlistener(\"onDomainChange\", function LineChartComponent__svg_g_11_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_11__svg_g_1_Template, 2, 8, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r5.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r5.timelineWidth, ctx_r5.height))(\"height\", ctx_r5.timelineHeight)(\"scheme\", ctx_r5.scheme)(\"customColors\", ctx_r5.customColors)(\"scaleType\", ctx_r5.scaleType)(\"legend\", ctx_r5.legend);\n    i0.ɵɵattribute(\"transform\", ctx_r5.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.results)(\"ngForTrackBy\", ctx_r5.trackBy);\n  }\n}\n\nconst _c38 = [\"ngx-charts-pie-label\", \"\"];\nconst _c39 = [\"ngx-charts-polar-series\", \"\"];\n\nfunction PolarSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r0.seriesColor)(\"name\", ctx_r0.gradientId)(\"startOpacity\", 0.25)(\"endOpacity\", 1)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction PolarSeriesComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"select\", function PolarSeriesComponent__svg_g_4_Template__svg_g_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.select.emit(circle_r2.data));\n    })(\"activate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_activate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activate.emit({\n        name: circle_r2.data.series\n      }));\n    })(\"deactivate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivate.emit({\n        name: circle_r2.data.series\n      }));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", ctx_r1.inactive ? 0.2 : 1);\n    i0.ɵɵproperty(\"cx\", circle_r2.cx)(\"cy\", circle_r2.cy)(\"r\", ctx_r1.circleRadius)(\"fill\", circle_r2.color)(\"tooltipDisabled\", ctx_r1.tooltipDisabled)(\"tooltipPlacement\", ctx_r1.placementTypes.Top)(\"tooltipType\", ctx_r1.styleTypes.tooltip)(\"tooltipTitle\", ctx_r1.tooltipTemplate ? undefined : ctx_r1.tooltipText(circle_r2))(\"tooltipTemplate\", ctx_r1.tooltipTemplate)(\"tooltipContext\", circle_r2.data);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 7);\n  }\n\n  if (rf & 2) {\n    const r_r7 = ctx.$implicit;\n    i0.ɵɵattribute(\"r\", r_r7);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_4__svg_circle_1_Template, 1, 1, \"circle\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.radiusTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 9);\n  }\n\n  if (rf & 2) {\n    const tick_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"data\", tick_r9)(\"radius\", ctx_r8.outerRadius)(\"label\", tick_r9.label)(\"max\", ctx_r8.outerRadius)(\"value\", ctx_r8.showGridLines ? 1 : ctx_r8.outerRadius)(\"explodeSlices\", true)(\"animations\", ctx_r8.animations)(\"labelTrim\", ctx_r8.labelTrim)(\"labelTrimSize\", ctx_r8.labelTrimSize);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_5__svg_g_1_Template, 1, 9, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.thetaTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"dimensionsChanged\", function PolarChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r2.yAxisScale)(\"dims\", ctx_r2.yAxisDims)(\"showGridLines\", ctx_r2.showGridLines)(\"showLabel\", ctx_r2.showYAxisLabel)(\"labelText\", ctx_r2.yAxisLabel)(\"trimTicks\", ctx_r2.trimYAxisTicks)(\"maxTickLength\", ctx_r2.maxYAxisTickLength)(\"tickFormatting\", ctx_r2.yAxisTickFormatting)(\"wrapTicks\", ctx_r2.wrapTicks);\n    i0.ɵɵattribute(\"transform\", ctx_r2.transformYAxis);\n  }\n}\n\nfunction PolarChartComponent__svg_g_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 11);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r3.xAxisLabel)(\"offset\", ctx_r3.labelOffset)(\"orient\", ctx_r3.orientation.Bottom)(\"height\", ctx_r3.dims.height)(\"width\", ctx_r3.dims.width);\n  }\n}\n\nfunction PolarChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onClick($event));\n    })(\"activate\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onActivate($event));\n    })(\"deactivate\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r17.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r13 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"gradient\", ctx_r12.gradient)(\"xScale\", ctx_r12.xScale)(\"yScale\", ctx_r12.yScale)(\"colors\", ctx_r12.colors)(\"data\", series_r13)(\"activeEntries\", ctx_r12.activeEntries)(\"scaleType\", ctx_r12.scaleType)(\"curve\", ctx_r12.curve)(\"rangeFillOpacity\", ctx_r12.rangeFillOpacity)(\"animations\", ctx_r12.animations)(\"tooltipDisabled\", ctx_r12.tooltipDisabled)(\"tooltipTemplate\", ctx_r12.tooltipTemplate);\n  }\n}\n\nfunction PolarChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_8__svg_g_1_Template, 2, 13, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r4.transformPlot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nfunction PolarChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r20.onClick($event));\n    })(\"activate\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onActivate($event));\n    })(\"deactivate\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r19 = ctx.$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"gradient\", ctx_r18.gradient)(\"xScale\", ctx_r18.xScale)(\"yScale\", ctx_r18.yScale)(\"colors\", ctx_r18.colors)(\"data\", series_r19)(\"activeEntries\", ctx_r18.activeEntries)(\"scaleType\", ctx_r18.scaleType)(\"curve\", ctx_r18.curve)(\"rangeFillOpacity\", ctx_r18.rangeFillOpacity)(\"animations\", ctx_r18.animations)(\"tooltipDisabled\", ctx_r18.tooltipDisabled)(\"tooltipTemplate\", ctx_r18.tooltipTemplate);\n  }\n}\n\nfunction PolarChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_9__svg_g_1_Template, 2, 12, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r5.transformPlot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.results)(\"ngForTrackBy\", ctx_r5.trackBy);\n  }\n}\n\nconst _c40 = [\"ngx-charts-pie-arc\", \"\"];\n\nfunction PieArcComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"color\", ctx_r0.fill)(\"name\", ctx_r0.radialGradientId)(\"startOpacity\", ctx_r0.startOpacity);\n  }\n}\n\nconst _c41 = [\"ngx-charts-pie-series\", \"\"];\n\nfunction PieSeriesComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const arc_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", arc_r1)(\"radius\", ctx_r2.outerRadius)(\"color\", ctx_r2.color(arc_r1))(\"label\", ctx_r2.labelText(arc_r1))(\"labelTrim\", ctx_r2.trimLabels)(\"labelTrimSize\", ctx_r2.maxLabelLength)(\"max\", ctx_r2.max)(\"value\", arc_r1.value)(\"explodeSlices\", ctx_r2.explodeSlices)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction PieSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PieSeriesComponent__svg_g_0__svg_g_1_Template, 1, 10, \"g\", 1);\n    i0.ɵɵelementStart(2, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function PieSeriesComponent__svg_g_0_Template__svg_g_select_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick($event));\n    })(\"activate\", function PieSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.activate.emit($event));\n    })(\"deactivate\", function PieSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.deactivate.emit($event));\n    })(\"dblclick\", function PieSeriesComponent__svg_g_0_Template__svg_g_dblclick_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.dblclick.emit($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.labelVisible(arc_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"gradient\", ctx_r0.gradient)(\"data\", arc_r1.data)(\"max\", ctx_r0.max)(\"explodeSlices\", ctx_r0.explodeSlices)(\"isActive\", ctx_r0.isActive(arc_r1.data))(\"animate\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.getTooltipTitle(arc_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", arc_r1.data);\n  }\n}\n\nconst _c42 = \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\";\nconst _c43 = [\"ngx-charts-pie-grid-series\", \"\"];\n\nfunction PieGridSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClick($event));\n    })(\"activate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.activate.emit($event));\n    })(\"deactivate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"data\", arc_r1.data)(\"gradient\", false)(\"pointerEvents\", arc_r1.pointerEvents)(\"animate\", arc_r1.animate);\n    i0.ɵɵattribute(\"class\", arc_r1.class);\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"text\", 10);\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"countTo\", series_r1.percent)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", series_r1.percent.toLocaleString(), \" \");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"text\", 12);\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", series_r1.total)(\"countPrefix\", ctx_r4.label + \": \");\n    i0.ɵɵattribute(\"y\", series_r1.outerRadius);\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"y\", series_r1.outerRadius);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r5.label, \": \", series_r1.total.toLocaleString(), \" \");\n  }\n}\n\nconst _c44 = function (a0) {\n  return {\n    data: a0\n  };\n};\n\nfunction PieGridComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3)(1, \"g\", 4);\n    i0.ɵɵlistener(\"select\", function PieGridComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onClick($event));\n    })(\"activate\", function PieGridComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onActivate($event));\n    })(\"deactivate\", function PieGridComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, PieGridComponent__svg_g_2__svg_text_2_Template, 1, 2, \"text\", 5);\n    i0.ɵɵtemplate(3, PieGridComponent__svg_g_2__svg_text_3_Template, 2, 1, \"text\", 6);\n    i0.ɵɵelementStart(4, \"text\", 7);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, PieGridComponent__svg_g_2__svg_text_6_Template, 1, 3, \"text\", 8);\n    i0.ɵɵtemplate(7, PieGridComponent__svg_g_2__svg_text_7_Template, 2, 3, \"text\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", series_r1.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"colors\", series_r1.colors)(\"data\", series_r1.data)(\"innerRadius\", series_r1.innerRadius)(\"outerRadius\", series_r1.outerRadius)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(i0.ɵɵpureFunction1(17, _c44, series_r1)))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", series_r1.data[0].data);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", series_r1.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n  }\n}\n\nconst _c45 = [\"textEl\"];\nconst _c46 = [\"ngx-charts-card\", \"\"];\n\nfunction CardComponent__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"fill\", ctx_r0.bandColor)(\"transform\", ctx_r0.transformBand)(\"d\", ctx_r0.bandPath);\n  }\n}\n\nconst _c47 = [\"ngx-charts-card-series\", \"\"];\n\nfunction CardSeriesComponent__svg_rect_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 2);\n  }\n\n  if (rf & 2) {\n    const c_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"fill\", ctx_r0.emptyColor);\n    i0.ɵɵattribute(\"x\", c_r2.x)(\"y\", c_r2.y)(\"width\", c_r2.width)(\"height\", c_r2.height);\n  }\n}\n\nfunction CardSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵlistener(\"select\", function CardSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"x\", c_r3.x)(\"y\", c_r3.y)(\"width\", c_r3.width)(\"height\", c_r3.height)(\"color\", c_r3.color)(\"bandColor\", c_r3.bandColor)(\"textColor\", c_r3.textColor)(\"data\", c_r3.data)(\"label\", c_r3.label)(\"medianSize\", ctx_r1.medianSize)(\"valueFormatting\", ctx_r1.valueFormatting)(\"labelFormatting\", ctx_r1.labelFormatting)(\"animations\", ctx_r1.animations);\n  }\n}\n\nconst _c48 = [\"ngx-charts-tree-map-cell\", \"\"];\n\nfunction TreeMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.orientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"countTo\", ctx_r2.value)(\"valueFormatting\", ctx_r2.valueFormatting);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.formattedValue, \" \");\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"foreignObject\", 4);\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵelement(2, \"span\", 5)(3, \"br\");\n    i0.ɵɵtemplate(4, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template, 1, 2, \"span\", 6);\n    i0.ɵɵtemplate(5, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template, 2, 1, \"span\", 7);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"pointer-events\", \"none\");\n    i0.ɵɵattribute(\"x\", ctx_r1.x)(\"y\", ctx_r1.y)(\"width\", ctx_r1.width)(\"height\", ctx_r1.height);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"color\", ctx_r1.getTextColor())(\"height\", ctx_r1.height + \"px\")(\"width\", ctx_r1.width + \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.formattedLabel, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.animations);\n  }\n}\n\nconst _c49 = [\"ngx-charts-tree-map-cell-series\", \"\"];\n\nfunction TreeMapCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function TreeMapCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClick($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", c_r1.data)(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"label\", c_r1.label)(\"value\", c_r1.value)(\"valueFormatting\", ctx_r0.valueFormatting)(\"labelFormatting\", ctx_r0.labelFormatting)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", c_r1.data);\n  }\n}\n\nconst _c50 = [\"valueTextEl\"];\nconst _c51 = [\"unitsTextEl\"];\n\nfunction LinearGaugeComponent__svg_line_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.transformLine)(\"stroke\", ctx_r0.colors.getColor(ctx_r0.units));\n  }\n}\n\nfunction LinearGaugeComponent__svg_line_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 11);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.transformLine)(\"stroke\", ctx_r1.colors.getColor(ctx_r1.units));\n  }\n}\n\nconst _c52 = function () {\n  return {};\n};\n\nconst _c53 = [\"ngx-charts-gauge-arc\", \"\"];\nconst _c54 = [\"ngx-charts-gauge-axis\", \"\"];\n\nfunction GaugeAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵelement(1, \"path\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", tick_r3.line);\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2)(1, \"text\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const tick_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"text-anchor\", tick_r4.textAnchor);\n    i0.ɵɵattribute(\"transform\", tick_r4.textTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tick_r4.text, \" \");\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵelement(1, \"path\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", tick_r5.line);\n  }\n}\n\nfunction GaugeComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 5);\n    i0.ɵɵlistener(\"select\", function GaugeComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick($event));\n    })(\"activate\", function GaugeComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onActivate($event));\n    })(\"deactivate\", function GaugeComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const arc_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.rotation);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"backgroundArc\", arc_r3.backgroundArc)(\"valueArc\", arc_r3.valueArc)(\"cornerRadius\", ctx_r0.cornerRadius)(\"colors\", ctx_r0.colors)(\"isActive\", ctx_r0.isActive(arc_r3.valueArc.data))(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"valueFormatting\", ctx_r0.valueFormatting)(\"animations\", ctx_r0.animations);\n  }\n}\n\nfunction GaugeComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"bigSegments\", ctx_r1.bigSegments)(\"smallSegments\", ctx_r1.smallSegments)(\"min\", ctx_r1.min)(\"max\", ctx_r1.max)(\"radius\", ctx_r1.outerRadius)(\"angleSpan\", ctx_r1.angleSpan)(\"valueScale\", ctx_r1.valueScale)(\"startAngle\", ctx_r1.startAngle)(\"tickFormatting\", ctx_r1.axisTickFormatting);\n  }\n}\n\nfunction GaugeComponent__svg_text_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 7, 8)(2, \"tspan\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"tspan\", 10);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n    i0.ɵɵattribute(\"transform\", ctx_r2.textTransform);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.displayValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.units);\n  }\n}\n\nfunction throttle(func, wait, options) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this; // eslint-disable-next-line prefer-rest-params\n\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\n\n\nfunction throttleable(duration, options) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n        return this[key];\n      }\n    };\n  };\n}\n\nvar PlacementTypes;\n\n(function (PlacementTypes) {\n  PlacementTypes[\"Top\"] = \"top\";\n  PlacementTypes[\"Bottom\"] = \"bottom\";\n  PlacementTypes[\"Left\"] = \"left\";\n  PlacementTypes[\"Right\"] = \"right\";\n  PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === PlacementTypes.Top) {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Bottom) {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === PlacementTypes.Left) {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Right) {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\n\n\nclass PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n\n    if (alignment === PlacementTypes.Top) {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Bottom) {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n\n    if (alignment === PlacementTypes.Left) {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Right) {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n    let flip = false;\n\n    if (placement === PlacementTypes.Right) {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Left) {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Top) {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Bottom) {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static determinePlacement(placement, elmDim, hostDim, spacing) {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.Right) {\n        return PlacementTypes.Left;\n      } else if (placement === PlacementTypes.Left) {\n        return PlacementTypes.Right;\n      } else if (placement === PlacementTypes.Top) {\n        return PlacementTypes.Bottom;\n      } else if (placement === PlacementTypes.Bottom) {\n        return PlacementTypes.Top;\n      }\n    }\n\n    return placement;\n  }\n\n}\n\nclass TooltipContentComponent {\n  constructor(element, renderer, platformId) {\n    this.element = element;\n    this.renderer = renderer;\n    this.platformId = platformId;\n  }\n\n  get cssClasses() {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  ngAfterViewInit() {\n    setTimeout(this.position.bind(this));\n  }\n\n  position() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect(); // if no dims were found, never show\n\n    if (!hostDim.height && !hostDim.width) return;\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    } // animate its entry\n\n\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm, hostDim, elmDim) {\n    const {\n      top,\n      left\n    } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim, elmDim) {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const {\n      top,\n      left\n    } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim, elmDim) {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  onWindowResize() {\n    this.position();\n  }\n\n}\n\nTooltipContentComponent.ɵfac = function TooltipContentComponent_Factory(t) {\n  return new (t || TooltipContentComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nTooltipContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipContentComponent,\n  selectors: [[\"ngx-tooltip-content\"]],\n  viewQuery: function TooltipContentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.caretElm = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function TooltipContentComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resize\", function TooltipContentComponent_resize_HostBindingHandler() {\n        return ctx.onWindowResize();\n      }, false, i0.ɵɵresolveWindow);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClasses);\n    }\n  },\n  inputs: {\n    host: \"host\",\n    showCaret: \"showCaret\",\n    type: \"type\",\n    placement: \"placement\",\n    alignment: \"alignment\",\n    spacing: \"spacing\",\n    cssClass: \"cssClass\",\n    title: \"title\",\n    template: \"template\",\n    context: \"context\"\n  },\n  decls: 6,\n  vars: 6,\n  consts: [[3, \"hidden\"], [\"caretElm\", \"\"], [1, \"tooltip-content\"], [4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]],\n  template: function TooltipContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"span\", 0, 1);\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, TooltipContentComponent_span_4_Template, 2, 4, \"span\", 3);\n      i0.ɵɵtemplate(5, TooltipContentComponent_span_5_Template, 1, 1, \"span\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassMapInterpolate1(\"tooltip-caret position-\", ctx.placement, \"\");\n      i0.ɵɵproperty(\"hidden\", !ctx.showCaret);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.title);\n    }\n  },\n  dependencies: [i2.NgIf, i2.NgTemplateOutlet],\n  styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"],\n  encapsulation: 2\n});\n\n__decorate([throttleable(100)], TooltipContentComponent.prototype, \"onWindowResize\", null);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipContentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-tooltip-content',\n      template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    host: [{\n      type: Input\n    }],\n    showCaret: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    placement: [{\n      type: Input\n    }],\n    alignment: [{\n      type: Input\n    }],\n    spacing: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    caretElm: [{\n      type: ViewChild,\n      args: ['caretElm']\n    }],\n    cssClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    onWindowResize: [{\n      type: HostListener,\n      args: ['window:resize']\n    }]\n  });\n})();\n\nclass InjectionRegisteryService {\n  constructor(injectionService) {\n    this.injectionService = injectionService;\n    this.defaults = {};\n    this.components = new Map();\n  }\n\n  getByType(type = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings) {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type, bindings) {\n    bindings = this.assignDefaults(bindings);\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n    return component;\n  }\n\n  destroy(instance) {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll() {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type) {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  injectComponent(type, bindings) {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  assignDefaults(bindings) {\n    const inputs = Object.assign({}, this.defaults.inputs);\n    const outputs = Object.assign({}, this.defaults.outputs);\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = {\n        inputs: bindings\n      };\n    }\n\n    if (inputs) {\n      bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);\n    }\n\n    if (outputs) {\n      bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);\n    }\n\n    return bindings;\n  }\n\n  register(type, component) {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n\n}\n\nfunction isViewContainerRef(x) {\n  return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n\n\nclass InjectionService {\n  constructor(applicationRef, componentFactoryResolver, injector) {\n    this.applicationRef = applicationRef;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.injector = injector;\n  }\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n\n\n  static setGlobalRootViewContainer(container) {\n    InjectionService.globalRootViewContainer = container;\n  }\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getRootViewContainer() {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n    throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n  }\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n\n\n  setRootViewContainer(container) {\n    this._container = container;\n  }\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getComponentRootNode(component) {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n\n    if (component.hostView && component.hostView.rootNodes.length > 0) {\n      return component.hostView.rootNodes[0];\n    } // the top most component root node has no `hostView`\n\n\n    return component.location.nativeElement;\n  }\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getRootViewContainerNode(component) {\n    return this.getComponentRootNode(component);\n  }\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n\n\n  projectComponentBindings(component, bindings) {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n\n\n  appendComponent(componentClass, bindings = {}, location) {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n    const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n    const portal = new ComponentPortal(componentClass);\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n\n}\n\nInjectionService.globalRootViewContainer = null;\n\nInjectionService.ɵfac = function InjectionService_Factory(t) {\n  return new (t || InjectionService)(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector));\n};\n\nInjectionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InjectionService,\n  factory: InjectionService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InjectionService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.ApplicationRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\nclass TooltipService extends InjectionRegisteryService {\n  constructor(injectionService) {\n    super(injectionService);\n    this.type = TooltipContentComponent;\n  }\n\n}\n\nTooltipService.ɵfac = function TooltipService_Factory(t) {\n  return new (t || TooltipService)(i0.ɵɵinject(InjectionService));\n};\n\nTooltipService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TooltipService,\n  factory: TooltipService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: InjectionService\n    }];\n  }, null);\n})();\n\nvar LegendPosition;\n\n(function (LegendPosition) {\n  LegendPosition[\"Right\"] = \"right\";\n  LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\n\nvar LegendType;\n\n(function (LegendType) {\n  LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n  LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n\n(function (ScaleType) {\n  ScaleType[\"Time\"] = \"time\";\n  ScaleType[\"Linear\"] = \"linear\";\n  ScaleType[\"Ordinal\"] = \"ordinal\";\n  ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n  constructor() {\n    this.horizontal = false;\n  }\n\n  ngOnChanges(changes) {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n  }\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n\n\n  gradientString(colors, splits) {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n    return pairs.join(', ');\n  }\n\n}\n\nScaleLegendComponent.ɵfac = function ScaleLegendComponent_Factory(t) {\n  return new (t || ScaleLegendComponent)();\n};\n\nScaleLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ScaleLegendComponent,\n  selectors: [[\"ngx-charts-scale-legend\"]],\n  inputs: {\n    valueRange: \"valueRange\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    horizontal: \"horizontal\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 10,\n  consts: [[1, \"scale-legend\"], [1, \"scale-legend-label\"], [1, \"scale-legend-wrap\"]],\n  template: function ScaleLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(4, \"div\", 2);\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"span\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"height\", ctx.horizontal ? undefined : ctx.height, \"px\")(\"width\", ctx.width, \"px\");\n      i0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.valueRange[1].toLocaleString());\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"background\", ctx.gradient);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.valueRange[0].toLocaleString());\n    }\n  },\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScaleLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-scale-legend',\n      template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"]\n    }]\n  }], null, {\n    valueRange: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    horizontal: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\n\n\nfunction formatLabel(label) {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\n\n\nfunction escapeLabel(label) {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n\nclass LegendEntryComponent {\n  constructor() {\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.toggle = new EventEmitter();\n  }\n\n  get trimmedLabel() {\n    return this.formattedLabel || '(empty)';\n  }\n\n  onMouseEnter() {\n    this.activate.emit({\n      name: this.label\n    });\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit({\n      name: this.label\n    });\n  }\n\n}\n\nLegendEntryComponent.ɵfac = function LegendEntryComponent_Factory(t) {\n  return new (t || LegendEntryComponent)();\n};\n\nLegendEntryComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LegendEntryComponent,\n  selectors: [[\"ngx-charts-legend-entry\"]],\n  hostBindings: function LegendEntryComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function LegendEntryComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function LegendEntryComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    color: \"color\",\n    label: \"label\",\n    formattedLabel: \"formattedLabel\",\n    isActive: \"isActive\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    toggle: \"toggle\"\n  },\n  decls: 4,\n  vars: 6,\n  consts: [[\"tabindex\", \"-1\", 3, \"title\", \"click\"], [1, \"legend-label-color\", 3, \"click\"], [1, \"legend-label-text\"]],\n  template: function LegendEntryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_0_listener() {\n        return ctx.select.emit(ctx.formattedLabel);\n      });\n      i0.ɵɵelementStart(1, \"span\", 1);\n      i0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_1_listener() {\n        return ctx.toggle.emit(ctx.formattedLabel);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.isActive);\n      i0.ɵɵproperty(\"title\", ctx.formattedLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"background-color\", ctx.color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.trimmedLabel, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LegendEntryComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend-entry',\n      template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    formattedLabel: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    toggle: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass LegendComponent {\n  constructor(cd) {\n    this.cd = cd;\n    this.horizontal = false;\n    this.labelClick = new EventEmitter();\n    this.labelActivate = new EventEmitter();\n    this.labelDeactivate = new EventEmitter();\n    this.legendEntries = [];\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries() {\n    const items = [];\n\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nLegendComponent.ɵfac = function LegendComponent_Factory(t) {\n  return new (t || LegendComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LegendComponent,\n  selectors: [[\"ngx-charts-legend\"]],\n  inputs: {\n    data: \"data\",\n    title: \"title\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    activeEntries: \"activeEntries\",\n    horizontal: \"horizontal\"\n  },\n  outputs: {\n    labelClick: \"labelClick\",\n    labelActivate: \"labelActivate\",\n    labelDeactivate: \"labelDeactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 9,\n  consts: [[\"class\", \"legend-title\", 4, \"ngIf\"], [1, \"legend-wrap\"], [1, \"legend-labels\"], [\"class\", \"legend-label\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"legend-title\"], [1, \"legend-title-text\"], [1, \"legend-label\"], [3, \"label\", \"formattedLabel\", \"color\", \"isActive\", \"select\", \"activate\", \"deactivate\"]],\n  template: function LegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtemplate(1, LegendComponent_header_1_Template, 3, 1, \"header\", 0);\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"ul\", 2);\n      i0.ɵɵtemplate(4, LegendComponent_li_4_Template, 2, 4, \"li\", 3);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.title == null ? null : ctx.title.length) > 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"max-height\", ctx.height - 45, \"px\");\n      i0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.legendEntries)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [LegendEntryComponent, i2.NgIf, i2.NgForOf],\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend',\n      template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    horizontal: [{\n      type: Input\n    }],\n    labelClick: [{\n      type: Output\n    }],\n    labelActivate: [{\n      type: Output\n    }],\n    labelDeactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ChartComponent {\n  constructor() {\n    this.showLegend = false;\n    this.animations = true;\n    this.legendLabelClick = new EventEmitter();\n    this.legendLabelActivate = new EventEmitter();\n    this.legendLabelDeactivate = new EventEmitter();\n    this.LegendPosition = LegendPosition;\n    this.LegendType = LegendType;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    let legendColumns = 0;\n\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n        if (this.legendType === LegendType.ScaleLegend) {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n    this.chartWidth = Math.floor(this.view[0] * chartColumns / 12.0);\n    this.legendWidth = !this.legendOptions || this.legendOptions.position === LegendPosition.Right ? Math.floor(this.view[0] * legendColumns / 12.0) : this.chartWidth;\n  }\n\n  getLegendType() {\n    return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n  }\n\n}\n\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)();\n};\n\nChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"ngx-charts-chart\"]],\n  inputs: {\n    view: \"view\",\n    showLegend: \"showLegend\",\n    legendOptions: \"legendOptions\",\n    legendType: \"legendType\",\n    activeEntries: \"activeEntries\",\n    animations: \"animations\"\n  },\n  outputs: {\n    legendLabelClick: \"legendLabelClick\",\n    legendLabelActivate: \"legendLabelActivate\",\n    legendLabelDeactivate: \"legendLabelDeactivate\"\n  },\n  features: [i0.ɵɵProvidersFeature([TooltipService]), i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 5,\n  vars: 8,\n  consts: [[1, \"ngx-charts-outer\"], [1, \"ngx-charts\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\", 4, \"ngIf\"], [1, \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\"], [1, \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"svg\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, ChartComponent_ngx_charts_scale_legend_3_Template, 1, 5, \"ngx-charts-scale-legend\", 2);\n      i0.ɵɵtemplate(4, ChartComponent_ngx_charts_legend_4_Template, 1, 7, \"ngx-charts-legend\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.view[0], \"px\")(\"height\", ctx.view[1], \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.chartWidth)(\"height\", ctx.view[1]);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === ctx.LegendType.ScaleLegend);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === ctx.LegendType.Legend);\n    }\n  },\n  dependencies: [ScaleLegendComponent, LegendComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartComponent, [{\n    type: Component,\n    args: [{\n      providers: [TooltipService],\n      selector: 'ngx-charts-chart',\n      template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    view: [{\n      type: Input\n    }],\n    showLegend: [{\n      type: Input\n    }],\n    legendOptions: [{\n      type: Input\n    }],\n    legendType: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    legendLabelClick: [{\n      type: Output\n    }],\n    legendLabelActivate: [{\n      type: Output\n    }],\n    legendLabelDeactivate: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Visibility Observer\n */\n\n\nclass VisibilityObserver {\n  constructor(element, zone) {\n    this.element = element;\n    this.zone = zone;\n    this.visible = new EventEmitter();\n    this.isVisible = false;\n    this.runCheck();\n  }\n\n  destroy() {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange() {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck() {\n    const check = () => {\n      if (!this.element) {\n        return;\n      } // https://davidwalsh.name/offsetheight-visibility\n\n\n      const {\n        offsetHeight,\n        offsetWidth\n      } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n\n}\n\nVisibilityObserver.ɵfac = function VisibilityObserver_Factory(t) {\n  return new (t || VisibilityObserver)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nVisibilityObserver.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: VisibilityObserver,\n  selectors: [[\"visibility-observer\"]],\n  outputs: {\n    visible: \"visible\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(VisibilityObserver, [{\n    type: Directive,\n    args: [{\n      selector: 'visibility-observer'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    visible: [{\n      type: Output\n    }]\n  });\n})();\n\nfunction isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n  constructor(chartElement, zone, cd, platformId) {\n    this.chartElement = chartElement;\n    this.zone = zone;\n    this.cd = cd;\n    this.platformId = platformId;\n    this.scheme = 'cool';\n    this.schemeType = ScaleType.Ordinal;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.animations = false;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.bindWindowResizeEvent(); // listen for visibility of the element for hidden by default scenario\n\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy() {\n    this.unbindEvents();\n\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    } // default values if width or height are 0 or undefined\n\n\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims() {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return {\n        width,\n        height\n      };\n    }\n\n    return null;\n  }\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n\n\n  formatDates() {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n\n      if (isDate(g.label)) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n\n          if (isDate(d.label)) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  unbindEvents() {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  bindWindowResizeEvent() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const source = fromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n\n\n  cloneData(data) {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n\n}\n\nBaseChartComponent.ɵfac = function BaseChartComponent_Factory(t) {\n  return new (t || BaseChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nBaseChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BaseChartComponent,\n  selectors: [[\"base-chart\"]],\n  inputs: {\n    results: \"results\",\n    view: \"view\",\n    scheme: \"scheme\",\n    schemeType: \"schemeType\",\n    customColors: \"customColors\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 0,\n  template: function BaseChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'base-chart',\n      template: ` <div></div> `\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    results: [{\n      type: Input\n    }],\n    view: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[\"Top\"] = \"top\";\n  Orientation[\"Bottom\"] = \"bottom\";\n  Orientation[\"Left\"] = \"left\";\n  Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n  constructor(element) {\n    this.textHeight = 25;\n    this.margin = 5;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n\n      case Orientation.Bottom:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n\n      case Orientation.Left:\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n\n      case Orientation.Right:\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n\n      default:\n    }\n  }\n\n}\n\nAxisLabelComponent.ɵfac = function AxisLabelComponent_Factory(t) {\n  return new (t || AxisLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nAxisLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AxisLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-axis-label\", \"\"]],\n  inputs: {\n    orient: \"orient\",\n    label: \"label\",\n    offset: \"offset\",\n    width: \"width\",\n    height: \"height\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c3,\n  decls: 2,\n  vars: 6,\n  template: function AxisLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"text\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"stroke-width\", ctx.strokeWidth)(\"x\", ctx.x)(\"y\", ctx.y)(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AxisLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-axis-label]',\n      template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    orient: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }]\n  });\n})();\n\nfunction trimLabel(s, max = 16) {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n\nfunction getTickLines(label, maxLength, maxLines) {\n  const labelString = (label || '').toString();\n  let totalLines = [];\n\n  if (/\\s/.test(labelString)) {\n    totalLines = labelString.split(/\\s+/).reduce((lines, line) => {\n      const last = (lines.pop() || '') + ' ';\n      return last.length + line.length > maxLength ? [...lines, last.trim(), line.trim()] : [...lines, last + line];\n    }, []);\n  } else {\n    let startIndex = 0;\n\n    while (startIndex < labelString.length) {\n      totalLines.push(labelString.substring(startIndex, startIndex + maxLength));\n      startIndex += maxLength;\n    }\n  }\n\n  if (totalLines.length > maxLines) {\n    totalLines = totalLines.splice(0, maxLines);\n    totalLines[totalLines.length - 1] += '...';\n  }\n\n  return totalLines;\n}\n\nvar TextAnchor;\n\n(function (TextAnchor) {\n  TextAnchor[\"Start\"] = \"start\";\n  TextAnchor[\"Middle\"] = \"middle\";\n  TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.rotateTicks = true;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.verticalSpacing = 20;\n    this.rotateLabels = false;\n    this.innerTickSize = 6;\n    this.outerTickSize = 6;\n    this.tickPadding = 3;\n    this.textAnchor = TextAnchor.Middle;\n    this.maxTicksLength = 0;\n    this.maxAllowedLength = 16;\n    this.height = 0;\n    this.approxHeight = 10;\n    this.maxPossibleLengthForTickIfWrapped = 16;\n  }\n\n  get isWrapTicksSupported() {\n    return this.wrapTicks && this.scale.step;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.dimensionsChanged.emit({\n        height: this.approxHeight\n      });\n      return;\n    }\n\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({\n        height: this.height\n      });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update() {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      // eslint-disable-next-line prefer-spread\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n    this.adjustedScale = this.scale.bandwidth ? function (d) {\n      return this.scale(d) + this.scale.bandwidth() * 0.5;\n    } : this.scale;\n    this.textTransform = '';\n\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = TextAnchor.End;\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = TextAnchor.Middle;\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks) {\n    let angle = 0;\n    this.maxTicksLength = 0;\n\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 7; // need to measure this\n\n    const wordWidth = len * charWidth;\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length); // calculate optimal angle\n\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    let labelHeight = 14;\n\n    if (this.isWrapTicksSupported) {\n      const longestTick = this.ticks.reduce((earlier, current) => current.length > earlier.length ? current : earlier, '');\n      const tickLines = this.tickChunks(longestTick);\n      labelHeight = 14 * (tickLines.length || 1);\n      this.maxPossibleLengthForTickIfWrapped = this.getMaxPossibleLengthForTick(longestTick);\n    }\n\n    const requiredHeight = angle !== 0 ? Math.max(Math.abs(Math.sin(angle * Math.PI / 180)) * this.maxTickLength * charWidth, 10) : labelHeight;\n    this.approxHeight = Math.min(requiredHeight, 200);\n    return angle;\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth) {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick) {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform() {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label) {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n  getMaxPossibleLengthForTick(longestLabel) {\n    if (this.scale.bandwidth) {\n      const averageCharacterWidth = 7; // approximate char width\n\n      const maxCharacters = Math.floor(this.scale.bandwidth() / averageCharacterWidth);\n      const truncatedText = longestLabel.slice(0, maxCharacters);\n      return Math.max(truncatedText.length, this.maxTickLength);\n    }\n\n    return this.maxTickLength;\n  }\n\n  tickChunks(label) {\n    if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n      const maxAllowedLines = 5;\n      let maxLines = this.rotateTicks ? Math.floor(this.scale.step() / 14) : maxAllowedLines;\n\n      if (maxLines <= 1) {\n        return [this.tickTrim(label)];\n      }\n\n      let possibleStringLength = Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength);\n\n      if (!isPlatformBrowser(this.platformId)) {\n        possibleStringLength = Math.floor(Math.min(this.approxHeight / maxAllowedLines, Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength)));\n      }\n\n      maxLines = Math.min(maxLines, maxAllowedLines);\n      const lines = getTickLines(label, possibleStringLength, maxLines < 1 ? 1 : maxLines);\n      return lines;\n    }\n\n    return [this.tickTrim(label)];\n  }\n\n}\n\nXAxisTicksComponent.ɵfac = function XAxisTicksComponent_Factory(t) {\n  return new (t || XAxisTicksComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nXAxisTicksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis-ticks\", \"\"]],\n  viewQuery: function XAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    scale: \"scale\",\n    orient: \"orient\",\n    tickArguments: \"tickArguments\",\n    tickValues: \"tickValues\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    gridLineHeight: \"gridLineHeight\",\n    width: \"width\",\n    rotateTicks: \"rotateTicks\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c5,\n  decls: 4,\n  vars: 2,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [4, \"ngIf\"], [\"stroke-width\", \"0.01\", \"font-size\", \"12px\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"tmplMultilineTick\", \"\"], [\"tmplSinglelineTick\", \"\"], [\"x\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"x\", \"0\"], [\"y2\", \"0\", 1, \"gridline-path\", \"gridline-path-vertical\"]],\n  template: function XAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", null, 0);\n      i0.ɵɵtemplate(2, XAxisTicksComponent__svg_g_2_Template, 2, 2, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, XAxisTicksComponent__svg_g_3_Template, 2, 2, \"g\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis-ticks]',\n      template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickArguments: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    gridLineHeight: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\n\nclass XAxisComponent {\n  constructor() {\n    this.rotateTicks = true;\n    this.showGridLines = false;\n    this.xOrient = Orientation.Bottom;\n    this.xAxisOffset = 0;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.xAxisClassName = 'x axis';\n    this.labelOffset = 0;\n    this.fill = 'none';\n    this.stroke = 'stroke';\n    this.tickStroke = '#ccc';\n    this.strokeWidth = 'none';\n    this.padding = 5;\n    this.orientation = Orientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({\n    height\n  }) {\n    const newLabelOffset = height + 25 + 5;\n\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          height\n        });\n      }, 0);\n    }\n  }\n\n}\n\nXAxisComponent.ɵfac = function XAxisComponent_Factory(t) {\n  return new (t || XAxisComponent)();\n};\n\nXAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis\", \"\"]],\n  viewQuery: function XAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(XAxisTicksComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    xScale: \"xScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    rotateTicks: \"rotateTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    ticks: \"ticks\",\n    xAxisTickCount: \"xAxisTickCount\",\n    xOrient: \"xOrient\",\n    xAxisOffset: \"xAxisOffset\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c6,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function XAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, XAxisComponent__svg_g_1_Template, 1, 13, \"g\", 0);\n      i0.ɵɵtemplate(2, XAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.xAxisClassName)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xScale);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  dependencies: [XAxisTicksComponent, AxisLabelComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis]',\n      template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    xScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    xAxisTickCount: [{\n      type: Input\n    }],\n    xOrient: [{\n      type: Input\n    }],\n    xAxisOffset: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [XAxisTicksComponent]\n    }]\n  });\n})();\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\n\n\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n  let retval = '';\n  w = Math.floor(w);\n  h = Math.floor(h);\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n  return retval;\n}\n\nclass YAxisTicksComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.showRefLabels = false;\n    this.showRefLines = false;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.innerTickSize = 6;\n    this.tickPadding = 3;\n    this.verticalSpacing = 20;\n    this.textAnchor = TextAnchor.Middle;\n    this.width = 0;\n    this.outerTickSize = 6;\n    this.rotateLabels = false;\n    this.referenceLineLength = 0;\n    this.Orientation = Orientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.width = this.getApproximateAxisWidth();\n      this.dimensionsChanged.emit({\n        width: this.width\n      });\n      return;\n    }\n\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({\n        width\n      });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update() {\n    const scale = this.scale;\n    const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      // eslint-disable-next-line prefer-spread\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth ? d => {\n      // position the tick to middle considering number of lines of the tick\n      const positionMiddle = scale(d) + scale.bandwidth() * 0.5;\n\n      if (this.wrapTicks && d.toString().length > this.maxTickLength) {\n        const chunksLength = this.tickChunks(d).length;\n\n        if (chunksLength === 1) {\n          return positionMiddle;\n        }\n\n        const bandWidth = scale.bandwidth();\n        const heightOfLines = chunksLength * 8;\n        const availableFreeSpace = bandWidth * 0.5 - heightOfLines * 0.5;\n        return scale(d) + availableFreeSpace;\n      }\n\n      return positionMiddle;\n    } : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n\n      case Orientation.Bottom:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n\n      case Orientation.Left:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n\n        this.textAnchor = TextAnchor.End;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n\n      case Orientation.Right:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n\n        this.textAnchor = TextAnchor.Start;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n\n      default:\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines() {\n    this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n    this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n    this.referenceLineLength = this.referenceLines.length;\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [false, false, false, false]);\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight) {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick) {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform() {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label) {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n  getApproximateAxisWidth() {\n    const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n    const charWidth = 7;\n    return maxChars * charWidth;\n  }\n\n  tickChunks(label) {\n    if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n      // for y-axis the width of the tick is fixed\n      const preferredWidth = this.maxTickLength;\n      const maxLines = Math.floor(this.scale.bandwidth() / 15);\n\n      if (maxLines <= 1) {\n        return [this.tickTrim(label)];\n      }\n\n      return getTickLines(label, preferredWidth, Math.min(maxLines, 5));\n    }\n\n    return [this.tickFormat(label)];\n  }\n\n}\n\nYAxisTicksComponent.ɵfac = function YAxisTicksComponent_Factory(t) {\n  return new (t || YAxisTicksComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nYAxisTicksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis-ticks\", \"\"]],\n  viewQuery: function YAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    scale: \"scale\",\n    orient: \"orient\",\n    tickArguments: \"tickArguments\",\n    tickValues: \"tickValues\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    gridLineWidth: \"gridLineWidth\",\n    height: \"height\",\n    referenceLines: \"referenceLines\",\n    showRefLabels: \"showRefLabels\",\n    showRefLines: \"showRefLines\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c7,\n  decls: 6,\n  vars: 4,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"reference-area\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [4, \"ngIf\"], [\"stroke-width\", \"0.01\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"tmplMultilineTick\", \"\"], [\"tmplSinglelineTick\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [\"x\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"x\", \"0\"], [1, \"reference-area\"], [\"class\", \"gridline-path gridline-path-horizontal\", \"x1\", \"0\", 4, \"ngIf\"], [\"x1\", \"0\", 1, \"gridline-path\", \"gridline-path-horizontal\"], [\"x1\", \"0\", 1, \"refline-path\", \"gridline-path-horizontal\"], [1, \"refline-label\"]],\n  template: function YAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", null, 0);\n      i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_2_Template, 2, 2, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, YAxisTicksComponent__svg_path_3_Template, 1, 2, \"path\", 2);\n      i0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_4_Template, 2, 2, \"g\", 3);\n      i0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.referenceLineLength > 1 && ctx.refMax && ctx.refMin && ctx.showRefLines);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.referenceLines);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis-ticks]',\n      template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickArguments: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    gridLineWidth: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\n\nclass YAxisComponent {\n  constructor() {\n    this.showGridLines = false;\n    this.yOrient = Orientation.Left;\n    this.yAxisOffset = 0;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.yAxisClassName = 'y axis';\n    this.labelOffset = 15;\n    this.fill = 'none';\n    this.stroke = '#CCC';\n    this.tickStroke = '#CCC';\n    this.strokeWidth = 1;\n    this.padding = 5;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.offset = -(this.yAxisOffset + this.padding);\n\n    if (this.yOrient === Orientation.Right) {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({\n    width\n  }) {\n    if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          width\n        });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          width\n        });\n      }, 0);\n    }\n  }\n\n}\n\nYAxisComponent.ɵfac = function YAxisComponent_Factory(t) {\n  return new (t || YAxisComponent)();\n};\n\nYAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis\", \"\"]],\n  viewQuery: function YAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(YAxisTicksComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    yScale: \"yScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    ticks: \"ticks\",\n    showGridLines: \"showGridLines\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    yAxisTickCount: \"yAxisTickCount\",\n    yOrient: \"yOrient\",\n    referenceLines: \"referenceLines\",\n    showRefLines: \"showRefLines\",\n    showRefLabels: \"showRefLabels\",\n    yAxisOffset: \"yAxisOffset\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c8,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function YAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, YAxisComponent__svg_g_1_Template, 1, 15, \"g\", 0);\n      i0.ɵɵtemplate(2, YAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.yAxisClassName)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yScale);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  dependencies: [YAxisTicksComponent, AxisLabelComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis]',\n      template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    yScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    yAxisTickCount: [{\n      type: Input\n    }],\n    yOrient: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    yAxisOffset: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [YAxisTicksComponent]\n    }]\n  });\n})();\n\nclass AxesModule {}\n\nAxesModule.ɵfac = function AxesModule_Factory(t) {\n  return new (t || AxesModule)();\n};\n\nAxesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AxesModule\n});\nAxesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AxesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n      exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n    }]\n  }], null, null);\n})();\n\nvar StyleTypes;\n\n(function (StyleTypes) {\n  StyleTypes[\"popover\"] = \"popover\";\n  StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n\n(function (ShowTypes) {\n  ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n  ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n  ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n  constructor(tooltipService, viewContainerRef, renderer) {\n    this.tooltipService = tooltipService;\n    this.viewContainerRef = viewContainerRef;\n    this.renderer = renderer;\n    this.tooltipCssClass = '';\n    this.tooltipAppendToBody = true;\n    this.tooltipSpacing = 10;\n    this.tooltipDisabled = false;\n    this.tooltipShowCaret = true;\n    this.tooltipPlacement = PlacementTypes.Top;\n    this.tooltipAlignment = PlacementTypes.Center;\n    this.tooltipType = StyleTypes.popover;\n    this.tooltipCloseOnClickOutside = true;\n    this.tooltipCloseOnMouseLeave = true;\n    this.tooltipHideTimeout = 300;\n    this.tooltipShowTimeout = 100;\n    this.tooltipShowEvent = ShowTypes.all;\n    this.tooltipImmediateExit = false;\n    this.show = new EventEmitter();\n    this.hide = new EventEmitter();\n  }\n\n  get listensForFocus() {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  get listensForHover() {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  ngOnDestroy() {\n    this.hideTooltip(true);\n  }\n\n  onFocus() {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  onBlur() {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  onMouseEnter() {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  onMouseLeave(target) {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate) {\n    if (this.component || this.tooltipDisabled) return;\n    const time = immediate ? 0 : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 400 : 0);\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options); // add a tiny timeout to avoid event re-triggers\n\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip) {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    }); // content mouse leave listener\n\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    } // content close on click outside\n\n\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate = false) {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent(); // emit events\n\n      this.hide.emit(true); // destroy component\n\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  createBoundOptions() {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n\n}\n\nTooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n  return new (t || TooltipDirective)(i0.ɵɵdirectiveInject(TooltipService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nTooltipDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TooltipDirective,\n  selectors: [[\"\", \"ngx-tooltip\", \"\"]],\n  hostBindings: function TooltipDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focusin\", function TooltipDirective_focusin_HostBindingHandler() {\n        return ctx.onFocus();\n      })(\"blur\", function TooltipDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"mouseenter\", function TooltipDirective_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function TooltipDirective_mouseleave_HostBindingHandler($event) {\n        return ctx.onMouseLeave($event.target);\n      })(\"click\", function TooltipDirective_click_HostBindingHandler() {\n        return ctx.onMouseClick();\n      });\n    }\n  },\n  inputs: {\n    tooltipCssClass: \"tooltipCssClass\",\n    tooltipTitle: \"tooltipTitle\",\n    tooltipAppendToBody: \"tooltipAppendToBody\",\n    tooltipSpacing: \"tooltipSpacing\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipShowCaret: \"tooltipShowCaret\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipAlignment: \"tooltipAlignment\",\n    tooltipType: \"tooltipType\",\n    tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\",\n    tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\",\n    tooltipHideTimeout: \"tooltipHideTimeout\",\n    tooltipShowTimeout: \"tooltipShowTimeout\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipShowEvent: \"tooltipShowEvent\",\n    tooltipContext: \"tooltipContext\",\n    tooltipImmediateExit: \"tooltipImmediateExit\"\n  },\n  outputs: {\n    show: \"show\",\n    hide: \"hide\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-tooltip]'\n    }]\n  }], function () {\n    return [{\n      type: TooltipService\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    tooltipCssClass: [{\n      type: Input\n    }],\n    tooltipTitle: [{\n      type: Input\n    }],\n    tooltipAppendToBody: [{\n      type: Input\n    }],\n    tooltipSpacing: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipShowCaret: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipAlignment: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    tooltipCloseOnClickOutside: [{\n      type: Input\n    }],\n    tooltipCloseOnMouseLeave: [{\n      type: Input\n    }],\n    tooltipHideTimeout: [{\n      type: Input\n    }],\n    tooltipShowTimeout: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipShowEvent: [{\n      type: Input\n    }],\n    tooltipContext: [{\n      type: Input\n    }],\n    tooltipImmediateExit: [{\n      type: Input\n    }],\n    show: [{\n      type: Output\n    }],\n    hide: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focusin']\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave', ['$event.target']]\n    }],\n    onMouseClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\nclass TooltipModule {}\n\nTooltipModule.ɵfac = function TooltipModule_Factory(t) {\n  return new (t || TooltipModule)();\n};\n\nTooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TooltipModule\n});\nTooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [InjectionService, TooltipService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TooltipContentComponent, TooltipDirective],\n      providers: [InjectionService, TooltipService],\n      exports: [TooltipContentComponent, TooltipDirective],\n      imports: [CommonModule],\n      entryComponents: [TooltipContentComponent]\n    }]\n  }], null, null);\n})();\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\n\nfunction id() {\n  let newId = ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4); // append a 'a' because neo gets mad\n\n  newId = `a${newId}`; // ensure not already used\n\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n\nvar BarOrientation;\n\n(function (BarOrientation) {\n  BarOrientation[\"Vertical\"] = \"vertical\";\n  BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n  constructor() {\n    this.orientation = BarOrientation.Vertical;\n  }\n\n  ngOnChanges(changes) {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === BarOrientation.Horizontal) {\n      this.x2 = '100%';\n    } else if (this.orientation === BarOrientation.Vertical) {\n      this.y1 = '100%';\n    }\n  }\n\n}\n\nSvgLinearGradientComponent.ɵfac = function SvgLinearGradientComponent_Factory(t) {\n  return new (t || SvgLinearGradientComponent)();\n};\n\nSvgLinearGradientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SvgLinearGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-linear-gradient\", \"\"]],\n  inputs: {\n    orientation: \"orientation\",\n    name: \"name\",\n    stops: \"stops\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c9,\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgLinearGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"linearGradient\", 0);\n      i0.ɵɵtemplate(1, SvgLinearGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.name);\n      i0.ɵɵattribute(\"x1\", ctx.x1)(\"y1\", ctx.y1)(\"x2\", ctx.x2)(\"y2\", ctx.y2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SvgLinearGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-linear-gradient]',\n      template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    orientation: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\n\nclass CircleComponent {\n  constructor() {\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes) {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n\n}\n\nCircleComponent.ɵfac = function CircleComponent_Factory(t) {\n  return new (t || CircleComponent)();\n};\n\nCircleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CircleComponent,\n  selectors: [[\"g\", \"ngx-charts-circle\", \"\"]],\n  hostBindings: function CircleComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function CircleComponent_click_HostBindingHandler() {\n        return ctx.onClick();\n      })(\"mouseenter\", function CircleComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function CircleComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    cx: \"cx\",\n    cy: \"cy\",\n    r: \"r\",\n    fill: \"fill\",\n    stroke: \"stroke\",\n    data: \"data\",\n    classNames: \"classNames\",\n    circleOpacity: \"circleOpacity\",\n    pointerEvents: \"pointerEvents\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c10,\n  decls: 1,\n  vars: 8,\n  template: function CircleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"circle\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r)(\"fill\", ctx.fill)(\"stroke\", ctx.stroke)(\"opacity\", ctx.circleOpacity)(\"class\", ctx.classNames)(\"pointer-events\", ctx.pointerEvents);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CircleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle]',\n      template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    r: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    classNames: [{\n      type: Input\n    }],\n    circleOpacity: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nvar SeriesType;\n\n(function (SeriesType) {\n  SeriesType[\"Standard\"] = \"standard\";\n  SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\n\nclass CircleSeriesComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.type = SeriesType.Standard;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barVisible = false;\n    this.barOrientation = BarOrientation;\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges() {\n    this.update();\n  }\n\n  update() {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle() {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d, i) {\n    const seriesName = this.data.name;\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n    let cx;\n\n    if (this.scaleType === ScaleType.Time) {\n      cx = this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n    let color;\n\n    if (this.colors.scaleType === ScaleType.Linear) {\n      if (this.type === SeriesType.Standard) {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({\n    tooltipLabel,\n    value,\n    seriesName,\n    min,\n    max\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min, max) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n\n        result += min.toLocaleString();\n\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color) {\n    return [{\n      offset: 0,\n      color,\n      opacity: 0.2\n    }, {\n      offset: 100,\n      color,\n      opacity: 1\n    }];\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle() {\n    this.barVisible = true;\n    this.activate.emit({\n      name: this.data.name\n    });\n  }\n\n  deactivateCircle() {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({\n      name: this.data.name\n    });\n  }\n\n}\n\nCircleSeriesComponent.ɵfac = function CircleSeriesComponent_Factory(t) {\n  return new (t || CircleSeriesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nCircleSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CircleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-circle-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    type: \"type\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c11,\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"class\", \"tooltip-bar\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [1, \"tooltip-bar\"]],\n  template: function CircleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CircleSeriesComponent__svg_g_0_Template, 6, 22, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.circle);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, CircleComponent, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 1\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CircleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle-series]',\n      template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 1\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GridPanelComponent {}\n\nGridPanelComponent.ɵfac = function GridPanelComponent_Factory(t) {\n  return new (t || GridPanelComponent)();\n};\n\nGridPanelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridPanelComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel\", \"\"]],\n  inputs: {\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\"\n  },\n  attrs: _c13,\n  decls: 1,\n  vars: 4,\n  consts: [[\"stroke\", \"none\", 1, \"gridpanel\"]],\n  template: function GridPanelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"rect\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"height\", ctx.height)(\"width\", ctx.width)(\"x\", ctx.x)(\"y\", ctx.y);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridPanelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel]',\n      template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ClassEnum;\n\n(function (ClassEnum) {\n  ClassEnum[\"Odd\"] = \"odd\";\n  ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\n\nclass GridPanelSeriesComponent {\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels() {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = ClassEnum.Odd;\n\n      if (this.orient === BarOrientation.Vertical) {\n        const position = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === BarOrientation.Horizontal) {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n\n}\n\nGridPanelSeriesComponent.ɵfac = function GridPanelSeriesComponent_Factory(t) {\n  return new (t || GridPanelSeriesComponent)();\n};\n\nGridPanelSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridPanelSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    orient: \"orient\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c14,\n  decls: 1,\n  vars: 1,\n  consts: [[\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\", \"grid-panel\", \"odd\", \"even\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\"]],\n  template: function GridPanelSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, GridPanelSeriesComponent__svg_g_0_Template, 1, 10, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.gridPanels);\n    }\n  },\n  dependencies: [GridPanelComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridPanelSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel-series]',\n      template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }]\n  });\n})();\n\nclass SvgRadialGradientComponent {\n  constructor() {\n    this.endOpacity = 1;\n    this.cx = 0;\n    this.cy = 0;\n  }\n\n  get stops() {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value) {\n    this.stopsInput = value;\n  }\n\n  ngOnChanges(changes) {\n    this.r = '30%';\n\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [{\n        offset: 0,\n        color: this.color,\n        opacity: this.startOpacity\n      }, {\n        offset: 100,\n        color: this.color,\n        opacity: this.endOpacity\n      }];\n    }\n  }\n\n}\n\nSvgRadialGradientComponent.ɵfac = function SvgRadialGradientComponent_Factory(t) {\n  return new (t || SvgRadialGradientComponent)();\n};\n\nSvgRadialGradientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SvgRadialGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-radial-gradient\", \"\"]],\n  inputs: {\n    color: \"color\",\n    name: \"name\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    cx: \"cx\",\n    cy: \"cy\",\n    stops: \"stops\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c15,\n  decls: 2,\n  vars: 5,\n  consts: [[\"gradientUnits\", \"userSpaceOnUse\", 3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgRadialGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"radialGradient\", 0);\n      i0.ɵɵtemplate(1, SvgRadialGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.name);\n      i0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SvgRadialGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-radial-gradient]',\n      template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\n\nclass AreaComponent {\n  constructor(element) {\n    this.opacity = 1;\n    this.startOpacity = 0.5;\n    this.endOpacity = 1;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.animationsLoaded = false;\n    this.hasGradient = false;\n    this.barOrientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges() {\n    this.update();\n\n    if (!this.animationsLoaded) {\n      this.loadAnimation();\n      this.animationsLoaded = true;\n    }\n  }\n\n  update() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation() {\n    this.areaPath = this.startingPath;\n    setTimeout(this.updatePathEl.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.startOpacity\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: this.endOpacity\n    }];\n  }\n\n}\n\nAreaComponent.ɵfac = function AreaComponent_Factory(t) {\n  return new (t || AreaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nAreaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaComponent,\n  selectors: [[\"g\", \"ngx-charts-area\", \"\"]],\n  inputs: {\n    data: \"data\",\n    path: \"path\",\n    startingPath: \"startingPath\",\n    fill: \"fill\",\n    opacity: \"opacity\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    gradient: \"gradient\",\n    stops: \"stops\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c16,\n  decls: 2,\n  vars: 5,\n  consts: [[4, \"ngIf\"], [1, \"area\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function AreaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AreaComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(1, \"path\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"opacity\", ctx.opacity);\n      i0.ɵɵattribute(\"d\", ctx.areaPath)(\"fill\", ctx.gradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area]',\n      template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }],\n    startingPath: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})(); // Robert Penner's easeOutExpo\n\n\nfunction easeOutExpo(t, b, c, d) {\n  return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\n\n\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\n\n\nfunction decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n\n\nclass CountUpDirective {\n  constructor(cd, element) {\n    this.cd = cd;\n    this.countDuration = 1;\n    this.countPrefix = '';\n    this.countSuffix = '';\n    this.countChange = new EventEmitter();\n    this.countFinish = new EventEmitter();\n    this.value = '';\n    this._countDecimals = 0;\n    this._countTo = 0;\n    this._countFrom = 0;\n    this.nativeElement = element.nativeElement;\n  }\n\n  set countDecimals(val) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals() {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo() {\n    return this._countTo;\n  }\n\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom() {\n    return this._countFrom;\n  }\n\n  ngOnDestroy() {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start() {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({\n      value,\n      progress,\n      finished\n    }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({\n        value: this.value,\n        progress\n      });\n      if (finished) this.countFinish.emit({\n        value: this.value,\n        progress\n      });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n\n}\n\nCountUpDirective.ɵfac = function CountUpDirective_Factory(t) {\n  return new (t || CountUpDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCountUpDirective.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CountUpDirective,\n  selectors: [[\"\", \"ngx-charts-count-up\", \"\"]],\n  inputs: {\n    countDuration: \"countDuration\",\n    countPrefix: \"countPrefix\",\n    countSuffix: \"countSuffix\",\n    valueFormatting: \"valueFormatting\",\n    countDecimals: \"countDecimals\",\n    countTo: \"countTo\",\n    countFrom: \"countFrom\"\n  },\n  outputs: {\n    countChange: \"countChange\",\n    countFinish: \"countFinish\"\n  },\n  attrs: _c17,\n  decls: 1,\n  vars: 1,\n  template: function CountUpDirective_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountUpDirective, [{\n    type: Component,\n    args: [{\n      selector: '[ngx-charts-count-up]',\n      template: ` {{ value }} `\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    countDuration: [{\n      type: Input\n    }],\n    countPrefix: [{\n      type: Input\n    }],\n    countSuffix: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    countDecimals: [{\n      type: Input\n    }],\n    countTo: [{\n      type: Input\n    }],\n    countFrom: [{\n      type: Input\n    }],\n    countChange: [{\n      type: Output\n    }],\n    countFinish: [{\n      type: Output\n    }]\n  });\n})(); // If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\n\n\nlet root;\n\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} // tslint:disable-next-line:variable-name\n\n\nconst MouseEvent = root.MouseEvent;\n\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, {\n      bubbles,\n      cancelable\n    });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n\nclass TooltipArea {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.anchorOpacity = 0;\n    this.anchorPos = -1;\n    this.anchorValues = [];\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.showPercentage = false;\n    this.tooltipDisabled = false;\n    this.hover = new EventEmitter();\n  }\n\n  getValues(xVal) {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n\n        let color;\n\n        if (this.colors.scaleType === ScaleType.Linear) {\n          let v = val;\n\n          if (item.d1) {\n            v = item.d1;\n          }\n\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n    this.anchorValues = this.getValues(closestPoint);\n\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = (minIndex + maxIndex) / 2 | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip() {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip() {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem) {\n    let result = '';\n\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n\n    result += ': ';\n\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n\n        result += tooltipItem.min.toLocaleString();\n\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n\n      result += ')';\n    }\n\n    return result;\n  }\n\n}\n\nTooltipArea.ɵfac = function TooltipArea_Factory(t) {\n  return new (t || TooltipArea)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nTooltipArea.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipArea,\n  selectors: [[\"g\", \"ngx-charts-tooltip-area\", \"\"]],\n  viewQuery: function TooltipArea_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c18, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipAnchor = _t.first);\n    }\n  },\n  inputs: {\n    dims: \"dims\",\n    xSet: \"xSet\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    results: \"results\",\n    colors: \"colors\",\n    showPercentage: \"showPercentage\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    hover: \"hover\"\n  },\n  attrs: _c19,\n  decls: 6,\n  vars: 18,\n  consts: [[\"y\", \"0\", 1, \"tooltip-area\", 2, \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mousemove\", \"mouseleave\"], [\"defaultTooltipTemplate\", \"\"], [\"y\", \"0\", \"ngx-tooltip\", \"\", 1, \"tooltip-anchor\", 3, \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipSpacing\", \"tooltipTemplate\", \"tooltipContext\", \"tooltipImmediateExit\"], [\"tooltipAnchor\", \"\"], [1, \"area-tooltip-container\"], [\"class\", \"tooltip-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"tooltip-item\"], [1, \"tooltip-item-color\"]],\n  template: function TooltipArea_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\")(1, \"rect\", 0);\n      i0.ɵɵlistener(\"mousemove\", function TooltipArea_Template__svg_rect_mousemove_1_listener($event) {\n        return ctx.mouseMove($event);\n      })(\"mouseleave\", function TooltipArea_Template__svg_rect_mouseleave_1_listener() {\n        return ctx.hideTooltip();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, TooltipArea__svg_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelement(4, \"rect\", 2, 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(3);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"x\", 0)(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      i0.ɵɵadvance(3);\n      i0.ɵɵstyleProp(\"opacity\", ctx.anchorOpacity)(\"pointer-events\", \"none\");\n      i0.ɵɵproperty(\"@animationState\", ctx.anchorOpacity !== 0 ? \"active\" : \"inactive\")(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.placementTypes.Right)(\"tooltipType\", ctx.styleTypes.tooltip)(\"tooltipSpacing\", 15)(\"tooltipTemplate\", ctx.tooltipTemplate ? ctx.tooltipTemplate : _r0)(\"tooltipContext\", ctx.anchorValues)(\"tooltipImmediateExit\", true);\n      i0.ɵɵattribute(\"x\", ctx.anchorPos)(\"width\", 1)(\"height\", ctx.dims.height);\n    }\n  },\n  dependencies: [i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition('inactive => active', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 0.7\n    }))]), transition('active => inactive', [style({\n      opacity: 0.7\n    }), animate(250, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipArea, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tooltip-area]',\n      template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition('inactive => active', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 0.7\n      }))]), transition('active => inactive', [style({\n        opacity: 0.7\n      }), animate(250, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    dims: [{\n      type: Input\n    }],\n    xSet: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    showPercentage: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    hover: [{\n      type: Output\n    }],\n    tooltipAnchor: [{\n      type: ViewChild,\n      args: ['tooltipAnchor', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass Timeline {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.height = 50;\n    this.select = new EventEmitter();\n    this.onDomainChange = new EventEmitter();\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update() {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n    this.cd.markForCheck();\n  }\n\n  getXDomain() {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush() {\n    if (this.brush) return;\n    const height = this.height;\n    const width = this.view[0];\n    this.brush = brushX().extent([[0, 0], [width, height]]).on('brush end', ({\n      selection\n    }) => {\n      const newSelection = selection || this.xScale.range();\n      const newDomain = newSelection.map(this.xScale.invert);\n      this.onDomainChange.emit(newDomain);\n      this.cd.markForCheck();\n    });\n    select(this.element).select('.brush').call(this.brush);\n  }\n\n  updateBrush() {\n    if (!this.brush) return;\n    const height = this.height;\n    const width = this.view[0];\n    this.brush.extent([[0, 0], [width, height]]);\n    select(this.element).select('.brush').call(this.brush); // clear hardcoded properties so they can be defined by CSS\n\n    select(this.element).select('.selection').attr('fill', undefined).attr('stroke', undefined).attr('fill-opacity', undefined);\n    this.cd.markForCheck();\n  }\n\n  getDims() {\n    const width = this.view[0];\n    const dims = {\n      width,\n      height: this.height\n    };\n    return dims;\n  }\n\n}\n\nTimeline.ɵfac = function Timeline_Factory(t) {\n  return new (t || Timeline)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTimeline.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: Timeline,\n  selectors: [[\"g\", \"ngx-charts-timeline\", \"\"]],\n  inputs: {\n    view: \"view\",\n    results: \"results\",\n    scheme: \"scheme\",\n    customColors: \"customColors\",\n    legend: \"legend\",\n    autoScale: \"autoScale\",\n    scaleType: \"scaleType\",\n    height: \"height\"\n  },\n  outputs: {\n    select: \"select\",\n    onDomainChange: \"onDomainChange\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c20,\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[1, \"timeline\"], [\"in\", \"SourceGraphic\", \"type\", \"matrix\", \"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"], [1, \"embedded-chart\"], [\"x\", \"0\", \"y\", \"0\", 1, \"brush-background\"], [1, \"brush\"]],\n  template: function Timeline_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0)(1, \"filter\");\n      i0.ɵɵelement(2, \"feColorMatrix\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"g\", 2);\n      i0.ɵɵprojection(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"rect\", 3)(6, \"g\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.filterId);\n      i0.ɵɵadvance(4);\n      i0.ɵɵattribute(\"width\", ctx.view[0])(\"height\", ctx.height);\n    }\n  },\n  styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Timeline, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-timeline]',\n      template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    view: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    onDomainChange: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AdvancedLegendComponent {\n  constructor() {\n    this.label = 'Total';\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.legendItems = [];\n\n    this.labelFormatting = label => label;\n\n    this.percentageFormatting = percentage => percentage;\n\n    this.defaultValueFormatting = value => value.toLocaleString();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getTotal() {\n    return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n  }\n\n  update() {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems() {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? value / this.total * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nAdvancedLegendComponent.ɵfac = function AdvancedLegendComponent_Factory(t) {\n  return new (t || AdvancedLegendComponent)();\n};\n\nAdvancedLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AdvancedLegendComponent,\n  selectors: [[\"ngx-charts-advanced-legend\"]],\n  inputs: {\n    width: \"width\",\n    data: \"data\",\n    colors: \"colors\",\n    label: \"label\",\n    animations: \"animations\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 7,\n  consts: [[1, \"advanced-pie-legend\"], [\"class\", \"total-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"total-value\", 4, \"ngIf\"], [1, \"total-label\"], [1, \"legend-items-container\"], [1, \"legend-items\"], [\"tabindex\", \"-1\", \"class\", \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-count-up\", \"\", 1, \"total-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"total-value\"], [\"tabindex\", \"-1\", 1, \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\"], [1, \"item-color\"], [\"class\", \"item-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"item-value\", 4, \"ngIf\"], [1, \"item-label\"], [\"class\", \"item-percent\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"item-percent\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"item-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"item-value\"], [\"ngx-charts-count-up\", \"\", 1, \"item-percent\", 3, \"countTo\", \"countSuffix\"], [1, \"item-percent\"]],\n  template: function AdvancedLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, AdvancedLegendComponent_div_1_Template, 1, 2, \"div\", 1);\n      i0.ɵɵtemplate(2, AdvancedLegendComponent_div_2_Template, 2, 1, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5);\n      i0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_Template, 8, 7, \"div\", 6);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.legendItems)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [CountUpDirective, i2.NgIf, i2.NgForOf],\n  styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AdvancedLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-legend',\n      template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"]\n    }]\n  }], null, {\n    width: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nconst COMPONENTS = [AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent];\n\nclass ChartCommonModule {}\n\nChartCommonModule.ɵfac = function ChartCommonModule_Factory(t) {\n  return new (t || ChartCommonModule)();\n};\n\nChartCommonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ChartCommonModule\n});\nChartCommonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartCommonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, AxesModule, TooltipModule],\n      declarations: [...COMPONENTS, VisibilityObserver],\n      exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n    }]\n  }], null, null);\n})();\n\nfunction calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = ScaleType.Ordinal,\n  legendPosition = LegendPosition.Right,\n  columns = 12\n}) {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === LegendPosition.Right) {\n    if (legendType === ScaleType.Ordinal) {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = chartWidth * columns / 12;\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n\nconst colorSets = [{\n  name: 'vivid',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#647c8a', '#3f51b5', '#2196f3', '#00b862', '#afdf0a', '#a7b61a', '#f3e562', '#ff9800', '#ff5722', '#ff4514']\n}, {\n  name: 'natural',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#bf9d76', '#e99450', '#d89f59', '#f2dfa7', '#a5d7c6', '#7794b1', '#afafaf', '#707160', '#ba9383', '#d9d5c3']\n}, {\n  name: 'cool',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#a8385d', '#7aa3e5', '#a27ea8', '#aae3f5', '#adcded', '#a95963', '#8796c0', '#7ed3ed', '#50abcc', '#ad6886']\n}, {\n  name: 'fire',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n}, {\n  name: 'solar',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00']\n}, {\n  name: 'air',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b']\n}, {\n  name: 'aqua',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064']\n}, {\n  name: 'flame',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#A10A28', '#D3342D', '#EF6D49', '#FAAD67', '#FDDE90', '#DBED91', '#A9D770', '#6CBA67', '#2C9653', '#146738']\n}, {\n  name: 'ocean',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#1D68FB', '#33C0FC', '#4AFFFE', '#AFFFFF', '#FFFC63', '#FDBD2D', '#FC8A25', '#FA4F1E', '#FA141B', '#BA38D1']\n}, {\n  name: 'forest',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#55C22D', '#C1F33D', '#3CC099', '#AFFFFF', '#8CFC9D', '#76CFFA', '#BA60FB', '#EE6490', '#C42A1C', '#FC9F32']\n}, {\n  name: 'horizon',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#2597FB', '#65EBFD', '#99FDD0', '#FCEE4B', '#FEFCFA', '#FDD6E3', '#FCB1A8', '#EF6F7B', '#CB96E8', '#EFDEE0']\n}, {\n  name: 'neons',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#FF3333', '#FF33FF', '#CC33FF', '#0000FF', '#33CCFF', '#33FFFF', '#33FF66', '#CCFF33', '#FFCC00', '#FF6600']\n}, {\n  name: 'picnic',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#FAC51D', '#66BD6D', '#FAA026', '#29BB9C', '#E96B56', '#55ACD2', '#B7332F', '#2C83C9', '#9166B8', '#92E7E8']\n}, {\n  name: 'night',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#2B1B5A', '#501356', '#183356', '#28203F', '#391B3C', '#1E2B3C', '#120634', '#2D0432', '#051932', '#453080', '#75267D', '#2C507D', '#4B3880', '#752F7D', '#35547D']\n}, {\n  name: 'nightLights',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#4e31a5', '#9c25a7', '#3065ab', '#57468b', '#904497', '#46648b', '#32118d', '#a00fb3', '#1052a2', '#6e51bd', '#b63cc3', '#6c97cb', '#8671c1', '#b455be', '#7496c3']\n}];\n\nclass ColorHelper {\n  constructor(scheme, type, domain, customColors) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    let colorScale;\n\n    switch (type) {\n      case ScaleType.Quantile:\n        colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n        break;\n\n      case ScaleType.Ordinal:\n        colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n        break;\n\n      case ScaleType.Linear:\n        {\n          const colorDomain = [...scheme.domain];\n\n          if (colorDomain.length === 1) {\n            colorDomain.push(colorDomain[0]);\n            this.colorDomain = colorDomain;\n          }\n\n          const points = range(0, 1, 1.0 / colorDomain.length);\n          colorScale = scaleLinear().range(colorDomain).domain(points);\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n\n    if (this.scaleType === ScaleType.Linear) {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found; // todo type customColors\n\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n    const endColor = this.getColor(value); // generate the stops\n\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = (s.offset - startVal) / (endVal - startVal) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n\n}\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\n\n\nfunction getUniqueXDomainValues(results) {\n  const valueSet = new Set();\n\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n\n  return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\n\n\nfunction getScaleType(values, checkDateType = true) {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n\n    if (allDates) {\n      return ScaleType.Time;\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n\n  if (allNumbers) {\n    return ScaleType.Linear;\n  }\n\n  return ScaleType.Ordinal;\n}\n\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n  const scaleType = getScaleType(values);\n  let xSet = [];\n  let domain = [];\n\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n  }\n\n  let min;\n  let max;\n\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const mappedValues = values.map(v => Number(v));\n    min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n    max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n  }\n\n  if (scaleType === ScaleType.Time) {\n    domain = [new Date(min), new Date(max)];\n    xSet = [...values].sort((a, b) => {\n      const aDate = a.getTime();\n      const bDate = b.getTime();\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    });\n  } else if (scaleType === ScaleType.Linear) {\n    domain = [min, max]; // Use compare function to sort numbers numerically\n\n    xSet = [...values].sort((a, b) => a - b);\n  } else {\n    domain = values;\n    xSet = values;\n  }\n\n  return {\n    domain,\n    xSet,\n    scaleType\n  };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nfunction sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n\nclass AreaSeriesComponent {\n  constructor() {\n    this.baseValue = 'auto';\n    this.stacked = false;\n    this.normalized = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradient();\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area().x(xProperty).y0((d, i) => this.yScale(d.d0)).y1((d, i) => this.yScale(d.d1));\n      startingArea = area().x(xProperty).y0(d => this.yScale.range()[0]).y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area().x(xProperty).y0(() => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.yScale(d.value));\n      startingArea = area().x(xProperty).y0(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n    this.opacity = 0.8;\n    let data = this.data.series;\n\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n}\n\nAreaSeriesComponent.ɵfac = function AreaSeriesComponent_Factory(t) {\n  return new (t || AreaSeriesComponent)();\n};\n\nAreaSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-area-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    baseValue: \"baseValue\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    stacked: \"stacked\",\n    normalized: \"normalized\",\n    gradient: \"gradient\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c21,\n  decls: 1,\n  vars: 12,\n  consts: [[\"ngx-charts-area\", \"\", 1, \"area-series\", 3, \"data\", \"path\", \"fill\", \"stops\", \"startingPath\", \"opacity\", \"gradient\", \"animations\"]],\n  template: function AreaSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"fill\", ctx.colors.getColor(ctx.data.name))(\"stops\", ctx.gradientStops)(\"startingPath\", ctx.startingPath)(\"opacity\", ctx.opacity)(\"gradient\", ctx.gradient || ctx.hasGradient)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [AreaComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area-series]',\n      template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    stacked: [{\n      type: Input\n    }],\n    normalized: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AreaChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = false;\n    this.yAxis = false;\n    this.baseValue = 'auto';\n    this.autoScale = false;\n    this.timeline = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values) {\n    let date = true;\n    let num = true;\n\n    for (const value of values) {\n      if (isDate(value)) {\n        date = false;\n      }\n\n      if (isNumber(value)) {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return ScaleType.Time;\n    }\n\n    if (num) {\n      return ScaleType.Linear;\n    }\n\n    return ScaleType.Ordinal;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartComponent_BaseFactory;\n  return function AreaChartComponent_Factory(t) {\n    return (ɵAreaChartComponent_BaseFactory || (ɵAreaChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartComponent)))(t || AreaChartComponent);\n  };\n}();\n\nAreaChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartComponent,\n  selectors: [[\"ngx-charts-area-chart\"]],\n  contentQueries: function AreaChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    baseValue: \"baseValue\",\n    autoScale: \"autoScale\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"gradient\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n  template: function AreaChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartComponent__svg_g_9_Template, 3, 9, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, AreaChartComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showXAxisLabel = false;\n    this.showYAxisLabel = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.yDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.seriesType = SeriesType;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      let total = 0;\n\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = d.d0 * 100 / total;\n          d.d1 = d.d1 * 100 / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartNormalizedComponent_BaseFactory;\n  return function AreaChartNormalizedComponent_Factory(t) {\n    return (ɵAreaChartNormalizedComponent_BaseFactory || (ɵAreaChartNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartNormalizedComponent)))(t || AreaChartNormalizedComponent);\n  };\n}();\n\nAreaChartNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartNormalizedComponent,\n  selectors: [[\"ngx-charts-area-chart-normalized\"]],\n  contentQueries: function AreaChartNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartNormalizedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"activeEntries\", \"gradient\", \"normalized\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"normalized\", \"curve\", \"animations\"]],\n  template: function AreaChartNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartNormalizedComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartNormalizedComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartNormalizedComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartNormalizedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, AreaChartNormalizedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = false;\n    this.yAxis = false;\n    this.timeline = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.seriesType = SeriesType;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartStackedComponent_BaseFactory;\n  return function AreaChartStackedComponent_Factory(t) {\n    return (ɵAreaChartStackedComponent_BaseFactory || (ɵAreaChartStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartStackedComponent)))(t || AreaChartStackedComponent);\n  };\n}();\n\nAreaChartStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartStackedComponent,\n  selectors: [[\"ngx-charts-area-chart-stacked\"]],\n  contentQueries: function AreaChartStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartStackedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"activeEntries\", \"stacked\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [\"ngx-charts-circle-series\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"stacked\", \"curve\", \"animations\"]],\n  template: function AreaChartStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartStackedComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartStackedComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartStackedComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartStackedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, AreaChartStackedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartModule {}\n\nAreaChartModule.ɵfac = function AreaChartModule_Factory(t) {\n  return new (t || AreaChartModule)();\n};\n\nAreaChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AreaChartModule\n});\nAreaChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n      exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass BarComponent {\n  constructor(element) {\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n\n    this.update();\n  }\n\n  update() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation() {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.getStartOpacity()\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === BarOrientation.Vertical) {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius() {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity() {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n\n    return edges;\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  checkToHideBar() {\n    this.hideBar = this.noBarWhenZero && (this.orientation === BarOrientation.Vertical && this.height === 0 || this.orientation === BarOrientation.Horizontal && this.width === 0);\n  }\n\n}\n\nBarComponent.ɵfac = function BarComponent_Factory(t) {\n  return new (t || BarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarComponent,\n  selectors: [[\"g\", \"ngx-charts-bar\", \"\"]],\n  hostBindings: function BarComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function BarComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BarComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    orientation: \"orientation\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    stops: \"stops\",\n    animations: \"animations\",\n    ariaLabel: \"ariaLabel\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c26,\n  decls: 2,\n  vars: 8,\n  consts: [[4, \"ngIf\"], [\"stroke\", \"none\", \"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function BarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BarComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"path\", 1);\n      i0.ɵɵlistener(\"click\", function BarComponent_Template__svg_path_click_1_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      i0.ɵɵattribute(\"d\", ctx.path)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar]',\n      template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nvar BarChartType;\n\n(function (BarChartType) {\n  BarChartType[\"Standard\"] = \"standard\";\n  BarChartType[\"Normalized\"] = \"normalized\";\n  BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n\n(function (D0Types) {\n  D0Types[\"positive\"] = \"positive\";\n  D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n  constructor(element) {\n    this.dimensionsChanged = new EventEmitter();\n    this.horizontalPadding = 2;\n    this.verticalPadding = 5;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getSize() {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return {\n      height: h,\n      width: w,\n      negative: this.value < 0\n    };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update() {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth; // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n\n}\n\nBarLabelComponent.ɵfac = function BarLabelComponent_Factory(t) {\n  return new (t || BarLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nBarLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-bar-label\", \"\"]],\n  inputs: {\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    barX: \"barX\",\n    barY: \"barY\",\n    barWidth: \"barWidth\",\n    barHeight: \"barHeight\",\n    orientation: \"orientation\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c27,\n  decls: 2,\n  vars: 5,\n  consts: [[\"alignment-baseline\", \"middle\", 1, \"textDataLabel\"]],\n  template: function BarLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"text\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform)(\"x\", ctx.x)(\"y\", ctx.y);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.formatedValue, \" \");\n    }\n  },\n  styles: [\".textDataLabel[_ngcontent-%COMP%]{font-size:11px}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar-label]',\n      template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".textDataLabel{font-size:11px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    barX: [{\n      type: Input\n    }],\n    barY: [{\n      type: Input\n    }],\n    barWidth: [{\n      type: Input\n    }],\n    barHeight: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass SeriesHorizontal {\n  constructor() {\n    this.type = BarChartType.Standard;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelWidthChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n    this.barOrientation = BarOrientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type;\n    d0Type = D0Types.positive;\n    let total;\n\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n    this.bars = this.series.map(d => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n      const bar = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === BarChartType.Standard) {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n\n        bar.y = this.yScale(label);\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = offset0 * 100 / total;\n          offset1 = offset1 * 100 / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n      return bar;\n    });\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0; // if total is positive then we show it on the right, otherwise on the left\n\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        var _a;\n\n        const section = {};\n        section.series = (_a = this.seriesName) !== null && _a !== void 0 ? _a : d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem) {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data) {\n    this.select.emit(data);\n  }\n\n}\n\nSeriesHorizontal.ɵfac = function SeriesHorizontal_Factory(t) {\n  return new (t || SeriesHorizontal)();\n};\n\nSeriesHorizontal.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SeriesHorizontal,\n  selectors: [[\"g\", \"ngx-charts-series-horizontal\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    type: \"type\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelWidthChanged: \"dataLabelWidthChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c28,\n  decls: 2,\n  vars: 3,\n  consts: [[\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesHorizontal_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SeriesHorizontal__svg_g_0_Template, 1, 21, \"g\", 0);\n      i0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1_Template, 2, 2, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.bars)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  dependencies: [BarComponent, BarLabelComponent, i2.NgForOf, TooltipDirective, i2.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SeriesHorizontal, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-horizontal]',\n      template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelWidthChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BarHorizontalComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale() {\n    this.xDomain = this.getXDomain();\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale() {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n\n  getXDomain() {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalComponent_BaseFactory;\n  return function BarHorizontalComponent_Factory(t) {\n    return (ɵBarHorizontalComponent_BaseFactory || (ɵBarHorizontalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalComponent)))(t || BarHorizontalComponent);\n  };\n}();\n\nBarHorizontalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalComponent,\n  selectors: [[\"ngx-charts-bar-horizontal\"]],\n  contentQueries: function BarHorizontalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    xScaleMax: \"xScaleMax\",\n    xScaleMin: \"xScaleMin\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"activeEntries\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"]],\n  template: function BarHorizontalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(4, \"g\", 4);\n      i0.ɵɵlistener(\"select\", function BarHorizontalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BarHorizontalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarHorizontalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"dataLabelWidthChanged\", function BarHorizontalComponent_Template__svg_g_dataLabelWidthChanged_4_listener($event) {\n        return ctx.onDataLabelMaxWidthChanged($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(22, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.groupPadding = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barOrientation = BarOrientation;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n  }\n\n  getInnerScale() {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontal2DComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontal2DComponent_BaseFactory;\n  return function BarHorizontal2DComponent_Factory(t) {\n    return (ɵBarHorizontal2DComponent_BaseFactory || (ɵBarHorizontal2DComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontal2DComponent)))(t || BarHorizontal2DComponent);\n  };\n}();\n\nBarHorizontal2DComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontal2DComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-2d\"]],\n  contentQueries: function BarHorizontal2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    xScaleMax: \"xScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", 3, \"xScale\", \"yScale\", \"data\", \"dims\", \"orient\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"activeEntries\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontal2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontal2DComponent__svg_g_3_Template, 1, 11, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontal2DComponent__svg_g_4_Template, 1, 10, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontal2DComponent__svg_g_5_Template, 2, 2, \"g\", 5);\n      i0.ɵɵtemplate(6, BarHorizontal2DComponent__svg_g_6_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.valueScale)(\"yScale\", ctx.groupScale)(\"data\", ctx.results)(\"dims\", ctx.dims)(\"orient\", ctx.barOrientation.Horizontal);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, GridPanelSeriesComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontal2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-2d',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.valueDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.barChartType = BarChartType;\n    this.isSSR = false;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getYScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalNormalizedComponent_BaseFactory;\n  return function BarHorizontalNormalizedComponent_Factory(t) {\n    return (ɵBarHorizontalNormalizedComponent_BaseFactory || (ɵBarHorizontalNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalNormalizedComponent)))(t || BarHorizontalNormalizedComponent);\n  };\n}();\n\nBarHorizontalNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-normalized\"]],\n  contentQueries: function BarHorizontalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarHorizontalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalNormalizedComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalNormalizedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontalNormalizedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontalNormalizedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    this.barChartType = BarChartType;\n    this.isSSR = false;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n\n    domain.push(smallest);\n    domain.push(biggest);\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalStackedComponent_BaseFactory;\n  return function BarHorizontalStackedComponent_Factory(t) {\n    return (ɵBarHorizontalStackedComponent_BaseFactory || (ɵBarHorizontalStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalStackedComponent)))(t || BarHorizontalStackedComponent);\n  };\n}();\n\nBarHorizontalStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalStackedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-stacked\"]],\n  contentQueries: function BarHorizontalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    xScaleMax: \"xScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"series\", \"activeEntries\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalStackedComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalStackedComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontalStackedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontalStackedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass SeriesVerticalComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.type = BarChartType.Standard;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelHeightChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n    this.barOrientation = BarOrientation;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    let width;\n\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n    let total;\n\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n      const bar = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === BarChartType.Standard) {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = offset0 * 100 / total;\n          offset1 = offset1 * 100 / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n      return bar;\n    });\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        var _a;\n\n        const section = {};\n        section.series = (_a = this.seriesName) !== null && _a !== void 0 ? _a : d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem) {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n}\n\nSeriesVerticalComponent.ɵfac = function SeriesVerticalComponent_Factory(t) {\n  return new (t || SeriesVerticalComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nSeriesVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SeriesVerticalComponent,\n  selectors: [[\"g\", \"ngx-charts-series-vertical\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    type: \"type\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelHeightChanged: \"dataLabelHeightChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c29,\n  decls: 3,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SeriesVerticalComponent__svg_g_0_Template, 2, 2, \"g\", 0);\n      i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1_Template, 2, 2, \"g\", 0);\n      i0.ɵɵtemplate(2, SeriesVerticalComponent__svg_g_2_Template, 2, 2, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  dependencies: [BarComponent, BarLabelComponent, i2.NgIf, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SeriesVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-vertical]',\n      template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    dims: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelHeightChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BarVerticalComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale() {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n\n  getYScale() {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain() {\n    const values = this.results.map(d => d.value);\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n\n    return [min, max];\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalComponent_BaseFactory;\n  return function BarVerticalComponent_Factory(t) {\n    return (ɵBarVerticalComponent_BaseFactory || (ɵBarVerticalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalComponent)))(t || BarVerticalComponent);\n  };\n}();\n\nBarVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalComponent,\n  selectors: [[\"ngx-charts-bar-vertical\"]],\n  contentQueries: function BarVerticalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    yScaleMax: \"yScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-vertical\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"activeEntries\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"activate\", \"deactivate\", \"select\", \"dataLabelHeightChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"]],\n  template: function BarVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalComponent__svg_g_2_Template, 1, 12, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(4, \"g\", 4);\n      i0.ɵɵlistener(\"activate\", function BarVerticalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarVerticalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"select\", function BarVerticalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"dataLabelHeightChanged\", function BarVerticalComponent_Template__svg_g_dataLabelHeightChanged_4_listener($event) {\n        return ctx.onDataLabelMaxHeightChanged($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(22, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVertical2DComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.scaleType = ScaleType.Ordinal;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.groupPadding = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barOrientation = BarOrientation;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n  }\n\n  getInnerScale() {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVertical2DComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVertical2DComponent_BaseFactory;\n  return function BarVertical2DComponent_Factory(t) {\n    return (ɵBarVertical2DComponent_BaseFactory || (ɵBarVertical2DComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVertical2DComponent)))(t || BarVertical2DComponent);\n  };\n}();\n\nBarVertical2DComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVertical2DComponent,\n  selectors: [[\"ngx-charts-bar-vertical-2d\"]],\n  contentQueries: function BarVertical2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    scaleType: \"scaleType\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    yScaleMax: \"yScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", 3, \"xScale\", \"yScale\", \"data\", \"dims\", \"orient\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVertical2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVertical2DComponent__svg_g_3_Template, 1, 11, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVertical2DComponent__svg_g_4_Template, 1, 10, \"g\", 4);\n      i0.ɵɵtemplate(5, BarVertical2DComponent__svg_g_5_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, BarVertical2DComponent__svg_g_6_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.groupScale)(\"yScale\", ctx.valueScale)(\"data\", ctx.results)(\"dims\", ctx.dims)(\"orient\", ctx.barOrientation.Vertical);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, GridPanelSeriesComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVertical2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-2d',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.valueDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.isSSR = false;\n    this.barChartType = BarChartType;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalNormalizedComponent_BaseFactory;\n  return function BarVerticalNormalizedComponent_Factory(t) {\n    return (ɵBarVerticalNormalizedComponent_BaseFactory || (ɵBarVerticalNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalNormalizedComponent)))(t || BarVerticalNormalizedComponent);\n  };\n}();\n\nBarVerticalNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-normalized\"]],\n  contentQueries: function BarVerticalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarVerticalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalNormalizedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalNormalizedComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVerticalNormalizedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarVerticalNormalizedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barChartType = BarChartType;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n\n    domain.push(smallest);\n    domain.push(biggest);\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale() {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalStackedComponent_BaseFactory;\n  return function BarVerticalStackedComponent_Factory(t) {\n    return (ɵBarVerticalStackedComponent_BaseFactory || (ɵBarVerticalStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalStackedComponent)))(t || BarVerticalStackedComponent);\n  };\n}();\n\nBarVerticalStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalStackedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-stacked\"]],\n  contentQueries: function BarVerticalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    yScaleMax: \"yScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVerticalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalStackedComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalStackedComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVerticalStackedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, BarVerticalStackedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarChartModule {}\n\nBarChartModule.ɵfac = function BarChartModule_Factory(t) {\n  return new (t || BarChartModule)();\n};\n\nBarChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BarChartModule\n});\nBarChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent],\n      exports: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent]\n    }]\n  }], null, null);\n})();\n\nconst cloneDeep = rfdc();\n\nclass BoxComponent {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.BarOrientation = BarOrientation;\n    this.initialized = false;\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.nativeElm = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update() {\n    this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n    this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n    this.medianLineWidth = 1.5 * this.strokeWidth;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updateLineEl();\n    this.updatePathEl();\n    this.checkToHideBar();\n    this.maskLineId = 'mask' + id().toString();\n    this.maskLine = `url(#${this.maskLineId})`;\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  loadAnimation() {\n    this.boxPath = this.oldPath = this.getStartingPath();\n    this.oldLineCoordinates = this.getStartingLineCoordinates();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const nodeBar = select(this.nativeElm).selectAll('.bar');\n    const path = this.getPath();\n\n    if (this.animations) {\n      nodeBar.attr('d', this.oldPath).transition().ease(easeSinInOut).duration(500).attrTween('d', this.pathTween(path, 4));\n    } else {\n      nodeBar.attr('d', path);\n    }\n\n    this.oldPath = path;\n  }\n\n  updateLineEl() {\n    const lineEl = select(this.nativeElm).selectAll('.bar-line');\n    const lineCoordinates = this.lineCoordinates;\n    const oldLineCoordinates = this.oldLineCoordinates;\n\n    if (this.animations) {\n      lineEl.attr('x1', (_, index) => oldLineCoordinates[index].v1.x).attr('y1', (_, index) => oldLineCoordinates[index].v1.y).attr('x2', (_, index) => oldLineCoordinates[index].v2.x).attr('y2', (_, index) => oldLineCoordinates[index].v2.y).transition().ease(easeSinInOut).duration(500).attr('x1', (_, index) => lineCoordinates[index].v1.x).attr('y1', (_, index) => lineCoordinates[index].v1.y).attr('x2', (_, index) => lineCoordinates[index].v2.x).attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    } else {\n      lineEl.attr('x1', (_, index) => lineCoordinates[index].v1.x).attr('y1', (_, index) => lineCoordinates[index].v1.y).attr('x2', (_, index) => lineCoordinates[index].v2.x).attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    }\n\n    this.oldLineCoordinates = [...lineCoordinates];\n  }\n  /**\n   * See [D3 Selections](https://www.d3indepth.com/selections/)\n   * @param d The joined data.\n   * @param index The index of the element within the selection\n   * @param node The node element (Line).\n   */\n\n\n  lineTween(attr, d, index, node) {\n    const nodeLineEl = node[index];\n    return nodeLineEl[attr].baseVal.value;\n  } // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n\n\n  pathTween(d1, precision) {\n    return function () {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const path0 = this;\n      const path1 = this.cloneNode();\n      path1.setAttribute('d', d1);\n      const n0 = path0 === null || path0 === void 0 ? void 0 : path0.getTotalLength();\n      const n1 = path1 === null || path1 === void 0 ? void 0 : path1.getTotalLength(); // Uniform sampling of distance based on specified precision.\n\n      const distances = [0];\n      let i = 0;\n      const dt = precision / Math.max(n0, n1);\n\n      while (i < 1) {\n        distances.push(i);\n        i += dt;\n      }\n\n      distances.push(1); // Compute point-interpolators at each distance.\n\n      const points = distances.map(t => {\n        const p0 = path0.getPointAtLength(t * n0);\n        const p1 = path1.getPointAtLength(t * n1);\n        return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n      }); // 't': T is the fraction of time (between 0 and 1) since the transition began.\n\n      return t => {\n        return t < 1 ? 'M' + points.map(p => p(t)).join('L') : d1;\n      };\n    };\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    const radius = this.roundEdges ? 1 : 0;\n    const {\n      x,\n      y\n    } = this.lineCoordinates[2].v1;\n    return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n  }\n\n  getPath() {\n    const radius = this.getRadius();\n    let path = '';\n    path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n    return path;\n  }\n\n  getStartingLineCoordinates() {\n    if (!this.animations) {\n      return [...this.lineCoordinates];\n    }\n\n    const lineCoordinates = cloneDeep(this.lineCoordinates);\n    lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y = lineCoordinates[2].v1.y;\n    return lineCoordinates;\n  }\n\n  getRadius() {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getGradient() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.getStartOpacity()\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  getStartOpacity() {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n\n    if (this.roundEdges) {\n      edges = [true, true, true, true];\n    }\n\n    return edges;\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  checkToHideBar() {\n    this.hideBar = this.noBarWhenZero && this.height === 0;\n  }\n\n}\n\nBoxComponent.ɵfac = function BoxComponent_Factory(t) {\n  return new (t || BoxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxComponent,\n  selectors: [[\"g\", \"ngx-charts-box\", \"\"]],\n  hostBindings: function BoxComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function BoxComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BoxComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    lineCoordinates: \"lineCoordinates\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    gradientStops: \"gradientStops\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    animations: \"animations\",\n    ariaLabel: \"ariaLabel\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c30,\n  decls: 9,\n  vars: 13,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\", 4, \"ngIf\"], [\"height\", \"100%\", \"width\", \"100%\", \"fill\", \"white\", \"fill-opacity\", \"1\"], [\"fill\", \"black\", \"fill-opacity\", \"1\", 1, \"bar\"], [\"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"class\", \"bar-line\", \"fill\", \"none\", 3, \"hidden\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"fill\", \"none\", 1, \"bar-line\"]],\n  template: function BoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"defs\");\n      i0.ɵɵtemplate(1, BoxComponent__svg_g_1_Template, 1, 3, \"g\", 0);\n      i0.ɵɵelementStart(2, \"mask\")(3, \"g\");\n      i0.ɵɵelement(4, \"rect\", 1)(5, \"path\", 2);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"g\")(7, \"path\", 3);\n      i0.ɵɵlistener(\"click\", function BoxComponent_Template__svg_path_click_7_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, BoxComponent__svg_line_8_Template, 1, 9, \"line\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.maskLineId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵattribute(\"d\", ctx.boxPath);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      i0.ɵɵattribute(\"d\", ctx.boxPath)(\"stroke\", ctx.strokeColor)(\"stroke-width\", ctx.boxStrokeWidth)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.lineCoordinates);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-box]',\n      template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    lineCoordinates: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    gradientStops: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass BoxSeriesComponent {\n  constructor() {\n    this.animations = true;\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n    const seriesName = this.series.name; // Calculate Quantile and Whiskers for each box serie.\n\n    this.counts = this.series.series;\n    const mappedCounts = this.counts.map(serie => Number(serie.value));\n    this.whiskers = [min(mappedCounts), max(mappedCounts)]; // We get the group count and must sort it in order to retrieve quantiles.\n\n    const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n    this.quartiles = this.getBoxQuantiles(groupCounts);\n    this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n    const value = this.quartiles[1];\n    const formattedLabel = formatLabel(seriesName);\n    const box = {\n      value,\n      data: this.counts,\n      label: seriesName,\n      formattedLabel,\n      width,\n      height: 0,\n      x: 0,\n      y: 0,\n      roundEdges: this.roundEdges,\n      quartiles: this.quartiles,\n      lineCoordinates: this.lineCoordinates\n    };\n    box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n    box.x = this.xScale(seriesName.toString());\n    box.y = this.yScale(this.quartiles[2]);\n    box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n\n    if (this.colors.scaleType === ScaleType.Ordinal) {\n      box.color = this.colors.getColor(seriesName);\n    } else {\n      box.color = this.colors.getColor(this.quartiles[1]);\n      box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n    }\n\n    const tooltipLabel = formattedLabel;\n    const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n    box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n    this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n    this.box = box;\n  }\n\n  getBoxQuantiles(inputData) {\n    return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n  }\n\n  getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n    // The X value is not being centered, so had to sum half the width to align it.\n    const commonX = this.xScale(seriesName);\n    const offsetX = commonX + barWidth / 2;\n    const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n    const whiskerLineWidth = Math.max(barWidth / 3, 1);\n    const whiskerZero = this.yScale(whiskers[0]);\n    const whiskerOne = this.yScale(whiskers[1]);\n    const median = this.yScale(quartiles[1]);\n    const topLine = {\n      v1: {\n        x: offsetX + whiskerLineWidth / 2,\n        y: whiskerZero\n      },\n      v2: {\n        x: offsetX - whiskerLineWidth / 2,\n        y: whiskerZero\n      }\n    };\n    const medianLine = {\n      v1: {\n        x: offsetX + medianLineWidth / 2,\n        y: median\n      },\n      v2: {\n        x: offsetX - medianLineWidth / 2,\n        y: median\n      }\n    };\n    const bottomLine = {\n      v1: {\n        x: offsetX + whiskerLineWidth / 2,\n        y: whiskerOne\n      },\n      v2: {\n        x: offsetX - whiskerLineWidth / 2,\n        y: whiskerOne\n      }\n    };\n    const verticalLine = {\n      v1: {\n        x: offsetX,\n        y: whiskerZero\n      },\n      v2: {\n        x: offsetX,\n        y: whiskerOne\n      }\n    };\n    return [verticalLine, topLine, medianLine, bottomLine];\n  }\n\n  updateTooltipSettings() {\n    if (this.tooltipDisabled) {\n      this.tooltipPlacement = undefined;\n      this.tooltipType = undefined;\n    } else {\n      if (!this.tooltipPlacement) {\n        this.tooltipPlacement = PlacementTypes.Top;\n      }\n\n      if (!this.tooltipType) {\n        this.tooltipType = StyleTypes.tooltip;\n      }\n    }\n  }\n\n}\n\nBoxSeriesComponent.ɵfac = function BoxSeriesComponent_Factory(t) {\n  return new (t || BoxSeriesComponent)();\n};\n\nBoxSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-box-series\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    animations: \"animations\",\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipType: \"tooltipType\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c31,\n  decls: 1,\n  vars: 22,\n  consts: [[\"ngx-charts-box\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"roundEdges\", \"fill\", \"gradientStops\", \"strokeColor\", \"strokeWidth\", \"data\", \"lineCoordinates\", \"gradient\", \"ariaLabel\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"animations\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BoxSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵlistener(\"select\", function BoxSeriesComponent_Template__svg_g_select_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BoxSeriesComponent_Template__svg_g_activate_0_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function BoxSeriesComponent_Template__svg_g_deactivate_0_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx.animations)(\"width\", ctx.box.width)(\"height\", ctx.box.height)(\"x\", ctx.box.x)(\"y\", ctx.box.y)(\"roundEdges\", ctx.box.roundEdges)(\"fill\", ctx.box.color)(\"gradientStops\", ctx.box.gradientStops)(\"strokeColor\", ctx.strokeColor)(\"strokeWidth\", ctx.strokeWidth)(\"data\", ctx.box.data)(\"lineCoordinates\", ctx.box.lineCoordinates)(\"gradient\", ctx.gradient)(\"ariaLabel\", ctx.box.ariaLabel)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.tooltipPlacement)(\"tooltipType\", ctx.tooltipType)(\"tooltipTitle\", ctx.tooltipTitle)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.box.data)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [BoxComponent, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-box-series]',\n      template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BoxChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    /** Show or hide the legend. */\n\n    this.legend = false;\n    this.legendPosition = LegendPosition.Right;\n    this.legendTitle = 'Legend';\n    this.showGridLines = true;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.showXAxisLabel = true;\n    this.showYAxisLabel = true;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.strokeColor = '#FFFFFF';\n    this.strokeWidth = 2;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    /** Chart Margins (For each side, counterclock wise). */\n\n    this.margin = [10, 20, 10, 20];\n    /** Chart X axis dimension. */\n\n    this.xAxisHeight = 0;\n    /** Chart Y axis dimension. */\n\n    this.yAxisWidth = 0;\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  setColors() {\n    let domain = [];\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  setScales() {\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n  }\n\n  getXScale(domain, width) {\n    const scale = scaleBand().domain(domain.map(d => d.toString())).rangeRound([0, width]).padding(0.5);\n    return scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().domain(domain).range([height, 0]);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getUniqueBoxChartXDomainValues(results) {\n    const valueSet = new Set();\n\n    for (const result of results) {\n      valueSet.add(result.name);\n    }\n\n    return Array.from(valueSet);\n  }\n\n  getXDomain() {\n    let domain = [];\n    const values = this.getUniqueBoxChartXDomainValues(this.results);\n    let min;\n    let max;\n\n    if (typeof values[0] === 'string') {\n      domain = values.map(val => val.toString());\n    } else if (typeof values[0] === 'number') {\n      const mappedValues = values.map(v => Number(v));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [min, max];\n    } else {\n      const mappedValues = values.map(v => Number(new Date(v)));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [new Date(min), new Date(max)];\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    const mappedValues = values.map(v => Number(v));\n    const min = Math.min(...mappedValues);\n    const max = Math.max(...mappedValues);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => `${d.name}`);\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  onActivate(data) {\n    this.activate.emit(data);\n  }\n\n  onDeactivate(data) {\n    this.deactivate.emit(data);\n  }\n\n  getLegendOptions() {\n    const legendOpts = {\n      scaleType: this.schemeType,\n      colors: this.colors,\n      domain: [],\n      position: this.legendPosition,\n      title: this.legendTitle\n    };\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      legendOpts.domain = this.xDomain;\n      legendOpts.colors = this.colors;\n    } else {\n      legendOpts.domain = this.yDomain;\n      legendOpts.colors = this.colors.scale;\n    }\n\n    return legendOpts;\n  }\n\n}\n\nBoxChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBoxChartComponent_BaseFactory;\n  return function BoxChartComponent_Factory(t) {\n    return (ɵBoxChartComponent_BaseFactory || (ɵBoxChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BoxChartComponent)))(t || BoxChartComponent);\n  };\n}();\n\nBoxChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxChartComponent,\n  selectors: [[\"ngx-charts-box-chart\"]],\n  contentQueries: function BoxChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendPosition: \"legendPosition\",\n    legendTitle: \"legendTitle\",\n    legendOptionsConfig: \"legendOptionsConfig\",\n    showGridLines: \"showGridLines\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    roundDomains: \"roundDomains\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    roundEdges: \"roundEdges\",\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 23,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"box-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"dims\", \"yScale\", \"showLabel\", \"labelText\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-box-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"roundEdges\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"series\", \"dims\", \"animations\", \"gradient\", \"activate\", \"deactivate\", \"select\"]],\n  template: function BoxChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"dimensionsChanged\", function BoxChartComponent_Template__svg_g_dimensionsChanged_2_listener($event) {\n        return ctx.updateXAxisHeight($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"g\", 3);\n      i0.ɵɵlistener(\"dimensionsChanged\", function BoxChartComponent_Template__svg_g_dimensionsChanged_3_listener($event) {\n        return ctx.updateYAxisWidth($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\");\n      i0.ɵɵtemplate(5, BoxChartComponent__svg_g_5_Template, 2, 12, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(20, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"showGridLines\", ctx.showGridLines)(\"dims\", ctx.dims)(\"xScale\", ctx.xScale)(\"showLabel\", ctx.showXAxisLabel)(\"labelText\", ctx.xAxisLabel)(\"wrapTicks\", ctx.wrapTicks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"showGridLines\", ctx.showGridLines)(\"dims\", ctx.dims)(\"yScale\", ctx.yScale)(\"showLabel\", ctx.showYAxisLabel)(\"labelText\", ctx.yAxisLabel)(\"wrapTicks\", ctx.wrapTicks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, BoxSeriesComponent, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-box-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendOptionsConfig: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass BoxChartModule {}\n\nBoxChartModule.ɵfac = function BoxChartModule_Factory(t) {\n  return new (t || BoxChartModule)();\n};\n\nBoxChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BoxChartModule\n});\nBoxChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n      exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n    }]\n  }], null, null);\n})();\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n  let domain = [];\n\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const min = minVal || minVal === 0 ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nfunction getScale(domain, range, scaleType, roundDomains) {\n  switch (scaleType) {\n    case ScaleType.Time:\n      return scaleTime().range(range).domain(domain);\n\n    case ScaleType.Linear:\n      {\n        const scale = scaleLinear().range(range).domain(domain);\n\n        if (roundDomains) {\n          return scale.nice();\n        }\n\n        return scale;\n      }\n\n    case ScaleType.Ordinal:\n      return scalePoint().range([range[0], range[1]]).domain(domain.map(r => r.toString()));\n\n    default:\n      return undefined;\n  }\n}\n\nclass BubbleSeriesComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.circles = this.getCircles();\n  }\n\n  getCircles() {\n    const seriesName = this.data.name;\n    return this.data.series.map((d, i) => {\n      if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n        const y = d.y;\n        const x = d.x;\n        const r = d.r;\n        const radius = this.rScale(r || 1);\n        const tooltipLabel = formatLabel(d.name);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n        const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n        const isActive = !this.activeEntries.length ? true : this.isActive({\n          name: seriesName\n        });\n        const opacity = isActive ? 1 : 0.3;\n        const data = Object.assign({}, d, {\n          series: seriesName,\n          name: d.name,\n          value: d.y,\n          x: d.x,\n          radius: d.r\n        });\n        return {\n          data,\n          x,\n          y,\n          r,\n          classNames: [`circle-data-${i}`],\n          value: y,\n          label: x,\n          cx,\n          cy,\n          radius,\n          tooltipLabel,\n          color,\n          opacity,\n          seriesName,\n          isActive,\n          transform: `translate(${cx},${cy})`\n        };\n      }\n    }).filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle) {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name = hasSeriesName && hasTooltipLabel ? `${circle.seriesName} • ${circle.tooltipLabel}` : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle) {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({\n        name: circle.seriesName\n      });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle) {\n    circle.barVisible = true;\n    this.activate.emit({\n      name: this.data.name\n    });\n  }\n\n  deactivateCircle(circle) {\n    circle.barVisible = false;\n    this.deactivate.emit({\n      name: this.data.name\n    });\n  }\n\n  trackBy(index, circle) {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n\n}\n\nBubbleSeriesComponent.ɵfac = function BubbleSeriesComponent_Factory(t) {\n  return new (t || BubbleSeriesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nBubbleSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BubbleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-bubble-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    rScale: \"rScale\",\n    xScaleType: \"xScaleType\",\n    yScaleType: \"yScaleType\",\n    colors: \"colors\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c32,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"active\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BubbleSeriesComponent__svg_g_0_Template, 4, 3, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.circles)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [CircleComponent, i2.NgForOf, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }), animate(250, style({\n      opacity: 1,\n      transform: 'scale(1)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bubble-series]',\n      template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }), animate(250, style({\n        opacity: 1,\n        transform: 'scale(1)'\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    rScale: [{\n      type: Input\n    }],\n    xScaleType: [{\n      type: Input\n    }],\n    yScaleType: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BubbleChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.showGridLines = true;\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.maxRadius = 10;\n    this.minRadius = 3;\n    this.schemeType = ScaleType.Ordinal;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.scaleType = ScaleType.Linear;\n    this.margin = [10, 20, 10, 20];\n    this.bubblePadding = [0, 0, 0, 0];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.activeEntries = [];\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n    const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n    this.data = this.results;\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n    this.legendOptions = this.getLegendOptions();\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  hideCircles() {\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n\n    let height = this.dims.height;\n\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height) {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width) {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range) {\n    const scale = scaleLinear().range(range).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain() {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n}\n\nBubbleChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBubbleChartComponent_BaseFactory;\n  return function BubbleChartComponent_Factory(t) {\n    return (ɵBubbleChartComponent_BaseFactory || (ɵBubbleChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BubbleChartComponent)))(t || BubbleChartComponent);\n  };\n}();\n\nBubbleChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BubbleChartComponent,\n  selectors: [[\"ngx-charts-bubble-chart\"]],\n  contentQueries: function BubbleChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function BubbleChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function BubbleChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    showGridLines: \"showGridLines\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    maxRadius: \"maxRadius\",\n    minRadius: \"minRadius\",\n    autoScale: \"autoScale\",\n    schemeType: \"schemeType\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 19,\n  consts: [[3, \"view\", \"showLegend\", \"activeEntries\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bubble-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"x\", \"0\", \"y\", \"0\", 1, \"bubble-chart-area\", 2, \"fill\", \"rgb(255, 0, 0)\", \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mouseenter\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bubble-series\", \"\", 3, \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"xAxisLabel\", \"yAxisLabel\", \"colors\", \"data\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, BubbleChartComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, BubbleChartComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"rect\", 4);\n      i0.ɵɵlistener(\"mouseenter\", function BubbleChartComponent_Template__svg_rect_mouseenter_7_listener() {\n        return ctx.deactivateAll();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, BubbleChartComponent__svg_g_8_Template, 2, 3, \"g\", 5);\n      i0.ɵɵtemplate(9, BubbleChartComponent__svg_g_9_Template, 2, 3, \"g\", 5);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(16, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"activeEntries\", ctx.activeEntries)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, BubbleSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bubble-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    showGridLines: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    maxRadius: [{\n      type: Input\n    }],\n    minRadius: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass BubbleChartModule {}\n\nBubbleChartModule.ɵfac = function BubbleChartModule_Factory(t) {\n  return new (t || BubbleChartModule)();\n};\n\nBubbleChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BubbleChartModule\n});\nBubbleChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BubbleChartComponent, BubbleSeriesComponent],\n      exports: [BubbleChartComponent, BubbleSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass HeatMapCellComponent {\n  constructor(element) {\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barOrientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.transform = `translate(${this.x} , ${this.y})`;\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.startOpacity\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  loadAnimation() {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm() {\n    const node = select(this.element).select('.cell');\n    node.transition().duration(750).attr('opacity', 1);\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n}\n\nHeatMapCellComponent.ɵfac = function HeatMapCellComponent_Factory(t) {\n  return new (t || HeatMapCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nHeatMapCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell\", \"\"]],\n  hostBindings: function HeatMapCellComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function HeatMapCellComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function HeatMapCellComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    data: \"data\",\n    gradient: \"gradient\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c33,\n  decls: 3,\n  vars: 5,\n  consts: [[1, \"cell\"], [4, \"ngIf\"], [\"rx\", \"3\", 1, \"cell\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function HeatMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, HeatMapCellComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      i0.ɵɵelementStart(2, \"rect\", 2);\n      i0.ɵɵlistener(\"click\", function HeatMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell]',\n      template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass HeatCellSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    const cells = [];\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n    return cells;\n  }\n\n  getTooltipText({\n    label,\n    data,\n    series\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n}\n\nHeatCellSeriesComponent.ɵfac = function HeatCellSeriesComponent_Factory(t) {\n  return new (t || HeatCellSeriesComponent)();\n};\n\nHeatCellSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    colors: \"colors\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c34,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function HeatCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, HeatCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [HeatMapCellComponent, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell-series]',\n      template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass HeatMapComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.innerPadding = 8;\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.tooltipDisabled = false;\n    this.activeEntries = [];\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.scaleType = ScaleType.Linear;\n  }\n\n  update() {\n    super.update();\n    this.formatDates();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n    this.scaleType = getScaleType(this.valueDomain, false);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === ScaleType.Linear) {\n      let min = this.min;\n      let max = this.max;\n\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n\n\n  getDimension(value, index = 0, N, L) {\n    if (typeof value === 'string') {\n      value = value.replace('[', '').replace(']', '').replace('px', '') // tslint:disable-next-line: quotemark\n      .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n\n    return N / (L / +value + 1);\n  }\n\n  getXScale() {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n\n  getYScale() {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n\n  getRects() {\n    const rects = [];\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n    return rects;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n      title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nHeatMapComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵHeatMapComponent_BaseFactory;\n  return function HeatMapComponent_Factory(t) {\n    return (ɵHeatMapComponent_BaseFactory || (ɵHeatMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(HeatMapComponent)))(t || HeatMapComponent);\n  };\n}();\n\nHeatMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatMapComponent,\n  selectors: [[\"ngx-charts-heat-map\"]],\n  contentQueries: function HeatMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    innerPadding: \"innerPadding\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    min: \"min\",\n    max: \"max\",\n    activeEntries: \"activeEntries\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"legendOptions\", \"legendLabelClick\"], [1, \"heat-map\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-heat-map-cell-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"]],\n  template: function HeatMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function HeatMapComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, HeatMapComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, HeatMapComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, HeatMapComponent__svg_rect_4_Template, 1, 6, \"rect\", 4);\n      i0.ɵɵelementStart(5, \"g\", 5);\n      i0.ɵɵlistener(\"select\", function HeatMapComponent_Template__svg_g_select_5_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function HeatMapComponent_Template__svg_g_activate_5_listener($event) {\n        return ctx.onActivate($event, undefined);\n      })(\"deactivate\", function HeatMapComponent_Template__svg_g_deactivate_5_listener($event) {\n        return ctx.onDeactivate($event, undefined);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"animations\", ctx.animations)(\"legendOptions\", ctx.legendOptions);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.rects);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"data\", ctx.results)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, HeatCellSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-heat-map',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass HeatMapModule {}\n\nHeatMapModule.ɵfac = function HeatMapModule_Factory(t) {\n  return new (t || HeatMapModule)();\n};\n\nHeatMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HeatMapModule\n});\nHeatMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n      exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n    }]\n  }], null, null);\n})();\n\nclass LineComponent {\n  constructor(element, platformId) {\n    this.element = element;\n    this.platformId = platformId;\n    this.fill = 'none';\n    this.animations = true; // @Output() select = new EventEmitter();\n\n    this.initialized = false;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl() {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n}\n\nLineComponent.ɵfac = function LineComponent_Factory(t) {\n  return new (t || LineComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nLineComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineComponent,\n  selectors: [[\"g\", \"ngx-charts-line\", \"\"]],\n  inputs: {\n    path: \"path\",\n    stroke: \"stroke\",\n    data: \"data\",\n    fill: \"fill\",\n    animations: \"animations\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c36,\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"stroke-width\", \"1.5px\", 1, \"line\"]],\n  template: function LineComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LineComponent__svg_g_0_Template, 2, 4, \"g\", 0);\n      i0.ɵɵtemplate(1, LineComponent__svg_g_1_Template, 2, 3, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [i2.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      strokeDasharray: 2000,\n      strokeDashoffset: 2000\n    }), animate(1000, style({\n      strokeDashoffset: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line]',\n      template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        strokeDasharray: 2000,\n        strokeDashoffset: 2000\n      }), animate(1000, style({\n        strokeDashoffset: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    path: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }]\n  });\n})();\n\nclass LineSeriesComponent {\n  constructor() {\n    this.animations = true;\n    this.barOrientation = BarOrientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradients();\n    const data = this.sortData(this.data.series);\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator() {\n    return line().x(d => {\n      const label = d.name;\n      let value;\n\n      if (this.scaleType === ScaleType.Time) {\n        value = this.xScale(label);\n      } else if (this.scaleType === ScaleType.Linear) {\n        value = this.xScale(Number(label));\n      } else {\n        value = this.xScale(label);\n      }\n\n      return value;\n    }).y(d => this.yScale(d.value)).curve(this.curve);\n  }\n\n  getRangeGenerator() {\n    return area().x(d => {\n      const label = d.name;\n      let value;\n\n      if (this.scaleType === ScaleType.Time) {\n        value = this.xScale(label);\n      } else if (this.scaleType === ScaleType.Linear) {\n        value = this.xScale(Number(label));\n      } else {\n        value = this.xScale(label);\n      }\n\n      return value;\n    }).y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value)).y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value)).curve(this.curve);\n  }\n\n  getAreaGenerator() {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area().x(xProperty).y0(() => this.yScale.range()[0]).y1(d => this.yScale(d.value)).curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n}\n\nLineSeriesComponent.ɵfac = function LineSeriesComponent_Factory(t) {\n  return new (t || LineSeriesComponent)();\n};\n\nLineSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-line-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    hasRange: \"hasRange\",\n    animations: \"animations\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c37,\n  decls: 6,\n  vars: 22,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-area\", \"\", 1, \"line-highlight\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"startOpacity\", \"gradient\", \"stops\", \"animations\"], [\"ngx-charts-line\", \"\", 1, \"line-series\", 3, \"data\", \"path\", \"stroke\", \"animations\"], [\"ngx-charts-area\", \"\", \"class\", \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"active\", \"inactive\", \"opacity\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"ngx-charts-area\", \"\", 1, \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"animations\"]],\n  template: function LineSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\")(1, \"defs\");\n      i0.ɵɵtemplate(2, LineSeriesComponent__svg_g_2_Template, 1, 3, \"g\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"g\", 1)(4, \"g\", 2);\n      i0.ɵɵtemplate(5, LineSeriesComponent__svg_g_5_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.areaPath)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.colors.getColor(ctx.data.name))(\"opacity\", 0.25)(\"startOpacity\", 0)(\"gradient\", true)(\"stops\", ctx.areaGradientStops)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"stroke\", ctx.stroke)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasRange);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, AreaComponent, LineComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line-series]',\n      template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    hasRange: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }]\n  });\n})();\n\nclass LineChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.showRefLines = false;\n    this.showRefLabels = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n\n        if (d.min !== undefined) {\n          this.hasRange = true;\n\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n\n        if (d.max !== undefined) {\n          this.hasRange = true;\n\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, width]).domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    this.deactivateAll();\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nLineChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵLineChartComponent_BaseFactory;\n  return function LineChartComponent_Factory(t) {\n    return (ɵLineChartComponent_BaseFactory || (ɵLineChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LineChartComponent)))(t || LineChartComponent);\n  };\n}();\n\nLineChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineChartComponent,\n  selectors: [[\"ngx-charts-line-chart\"]],\n  contentQueries: function LineChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function LineChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function LineChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showRefLines: \"showRefLines\",\n    referenceLines: \"referenceLines\",\n    showRefLabels: \"showRefLabels\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 12,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"line-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"hasRange\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"curve\", \"hasRange\", \"animations\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function LineChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, LineChartComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, LineChartComponent__svg_g_6_Template, 1, 13, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, LineChartComponent__svg_g_8_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(9, LineChartComponent__svg_g_9_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(10, LineChartComponent__svg_g_10_Template, 3, 9, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(11, LineChartComponent__svg_g_11_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, LineSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-line-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass LineChartModule {}\n\nLineChartModule.ɵfac = function LineChartModule_Factory(t) {\n  return new (t || LineChartModule)();\n};\n\nLineChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LineChartModule\n});\nLineChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n      exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass PieLabelComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.animations = true;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes) {\n    this.setTransforms();\n    this.update();\n  }\n\n  setTransforms() {\n    if (isPlatformServer(this.platformId)) {\n      this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = `translate(${this.textX},${this.textY})`;\n      this.textTransition = !this.animations ? null : 'transform 0.75s';\n    } else {\n      const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n      this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n      this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n    }\n  }\n\n  update() {\n    let startRadius = this.radius;\n\n    if (this.explodeSlices) {\n      startRadius = this.radius * this.value / this.max;\n    }\n\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius); // Calculate innerPos then scale outer position to match label position\n\n    const innerPos = innerArc.centroid(this.data);\n    let scale = this.data.pos[1] / innerPos[1];\n\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX() {\n    return this.data.pos[0];\n  }\n\n  get textY() {\n    return this.data.pos[1];\n  }\n\n  textAnchor() {\n    return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n  }\n\n  midAngle(d) {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n}\n\nPieLabelComponent.ɵfac = function PieLabelComponent_Factory(t) {\n  return new (t || PieLabelComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nPieLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-label\", \"\"]],\n  inputs: {\n    data: \"data\",\n    radius: \"radius\",\n    label: \"label\",\n    color: \"color\",\n    max: \"max\",\n    value: \"value\",\n    explodeSlices: \"explodeSlices\",\n    animations: \"animations\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c38,\n  decls: 6,\n  vars: 17,\n  consts: [[\"dy\", \".35em\", 1, \"pie-label\"], [\"fill\", \"none\", 1, \"pie-label-line\", \"line\"]],\n  template: function PieLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"title\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(2, \"g\")(3, \"text\", 0);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(5, \"path\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"transform\", ctx.styleTransform)(\"transition\", ctx.textTransition);\n      i0.ɵɵattribute(\"transform\", ctx.attrTransform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", ctx.textAnchor())(\"shape-rendering\", \"crispEdges\");\n      i0.ɵɵclassProp(\"animation\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.labelTrim ? ctx.trimLabel(ctx.label, ctx.labelTrimSize) : ctx.label, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"animation\", ctx.animations);\n      i0.ɵɵattribute(\"d\", ctx.line)(\"stroke\", ctx.color);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-label]',\n      template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }]\n  });\n})();\n\nclass PolarSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.circleRadius = 3;\n    this.barOrientation = BarOrientation;\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradients();\n    const line = this.getLineGenerator();\n    const data = this.sortData(this.data.series);\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n    this.path = line(data) || '';\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d) {\n    const label = d.name;\n\n    if (this.scaleType === ScaleType.Time) {\n      return this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      return this.xScale(Number(label));\n    }\n\n    return this.xScale(label);\n  }\n\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator() {\n    return lineRadial().angle(d => this.getAngle(d)).radius(d => this.getRadius(d)).curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      return sortByTime(data, 'name');\n    }\n\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({\n    label,\n    value\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === ScaleType.Linear) {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n\n}\n\nPolarSeriesComponent.ɵfac = function PolarSeriesComponent_Factory(t) {\n  return new (t || PolarSeriesComponent)();\n};\n\nPolarSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PolarSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-polar-series\", \"\"]],\n  inputs: {\n    name: \"name\",\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    gradient: \"gradient\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c39,\n  decls: 5,\n  vars: 11,\n  consts: [[1, \"polar-charts-series\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-line\", \"\", 1, \"polar-series-path\", 3, \"path\", \"stroke\", \"fill\", \"animations\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0)(1, \"defs\");\n      i0.ɵɵtemplate(2, PolarSeriesComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"g\", 2);\n      i0.ɵɵtemplate(4, PolarSeriesComponent__svg_g_4_Template, 1, 12, \"g\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.active)(\"inactive\", ctx.inactive);\n      i0.ɵɵproperty(\"path\", ctx.path)(\"stroke\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"animations\", ctx.animations);\n      i0.ɵɵattribute(\"fill-opacity\", ctx.rangeFillOpacity);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.circles);\n    }\n  },\n  dependencies: [SvgRadialGradientComponent, LineComponent, CircleComponent, i2.NgIf, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-polar-series]',\n      template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    name: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nconst twoPI = 2 * Math.PI;\n\nclass PolarChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showGridLines = true;\n    this.curve = curveCardinalClosed;\n    this.activeEntries = [];\n    this.rangeFillOpacity = 0.15;\n    this.trimYAxisTicks = true;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.showSeriesOnHover = true;\n    this.gradient = false;\n    this.yAxisMinScale = 0;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter(); // series: any; // ???\n\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.orientation = Orientation;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.setDims();\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n    const outerRadius = this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5);\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n    this.yAxisDims = Object.assign(Object.assign({}, this.dims), {\n      width: halfWidth\n    });\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n    const minDistance = 10;\n    /* from pie chart, abstract out -*/\n\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j]; // if they're on the same side\n\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()) {\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n\n    return values;\n  }\n\n  getYValues() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()) {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n    min = Math.max(0, min);\n\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    switch (this.scaleType) {\n      case ScaleType.Time:\n        return scaleTime().range([0, width]).domain(domain);\n\n      case ScaleType.Linear:\n        {\n          const scale = scaleLinear().range([0, width]).domain(domain);\n          return this.roundDomains ? scale.nice() : scale;\n        }\n\n      default:\n        return scalePoint().range([0, width - twoPI / domain.length]).padding(0).domain(domain);\n    }\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === ScaleType.Ordinal) {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n}\n\nPolarChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPolarChartComponent_BaseFactory;\n  return function PolarChartComponent_Factory(t) {\n    return (ɵPolarChartComponent_BaseFactory || (ɵPolarChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PolarChartComponent)))(t || PolarChartComponent);\n  };\n}();\n\nPolarChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PolarChartComponent,\n  selectors: [[\"ngx-charts-polar-chart\"]],\n  contentQueries: function PolarChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showSeriesOnHover: \"showSeriesOnHover\",\n    gradient: \"gradient\",\n    yAxisMinScale: \"yAxisMinScale\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 17,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"polar-chart\", \"chart\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"polar-chart-background\"], [4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"gridline-path radial-gridline-path\", \"cx\", \"0\", \"cy\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"gridline-path\", \"radial-gridline-path\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-polar-series\", \"\", 3, \"gradient\", \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\");\n      i0.ɵɵelement(3, \"circle\", 2);\n      i0.ɵɵtemplate(4, PolarChartComponent__svg_g_4_Template, 2, 1, \"g\", 3);\n      i0.ɵɵtemplate(5, PolarChartComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, PolarChartComponent__svg_g_6_Template, 1, 10, \"g\", 4);\n      i0.ɵɵtemplate(7, PolarChartComponent__svg_g_7_Template, 1, 5, \"g\", 5);\n      i0.ɵɵtemplate(8, PolarChartComponent__svg_g_8_Template, 2, 3, \"g\", 3);\n      i0.ɵɵtemplate(9, PolarChartComponent__svg_g_9_Template, 2, 3, \"g\", 3);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(14, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transformPlot);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"r\", ctx.outerRadius);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showGridLines);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis && ctx.showXAxisLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, PieLabelComponent, YAxisComponent, AxisLabelComponent, PolarSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25, \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-polar-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showSeriesOnHover: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    yAxisMinScale: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass PieArcComponent {\n  constructor(element) {\n    this.startAngle = 0;\n    this.endAngle = Math.PI * 2;\n    this.cornerRadius = 0;\n    this.explodeSlices = false;\n    this.gradient = false;\n    this.animate = true;\n    this.pointerEvents = true;\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.barOrientation = BarOrientation;\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update() {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc() {\n    let outerRadius = this.outerRadius;\n\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = this.outerRadius * this.value / this.max;\n    }\n\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation() {\n    const node = select(this.element).selectAll('.arc').data([{\n      startAngle: this.startAngle,\n      endAngle: this.endAngle\n    }]);\n    const calc = this.calculateArc();\n    node.transition().attrTween('d', function (d) {\n      this._current = this._current || d;\n      const copyOfD = Object.assign({}, d);\n      copyOfD.endAngle = copyOfD.startAngle;\n      const interpolater = interpolate(copyOfD, copyOfD);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    }).transition().duration(750).attrTween('d', function (d) {\n      this._current = this._current || d;\n      const interpolater = interpolate(this._current, d);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    });\n  }\n\n  updateAnimation() {\n    const node = select(this.element).selectAll('.arc').data([{\n      startAngle: this.startAngle,\n      endAngle: this.endAngle\n    }]);\n    const calc = this.calculateArc();\n    node.transition().duration(750).attrTween('d', function (d) {\n      this._current = this._current || d;\n      const interpolater = interpolate(this._current, d);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    });\n  }\n\n  onClick() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n\n}\n\nPieArcComponent.ɵfac = function PieArcComponent_Factory(t) {\n  return new (t || PieArcComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nPieArcComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieArcComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-arc\", \"\"]],\n  inputs: {\n    fill: \"fill\",\n    startAngle: \"startAngle\",\n    endAngle: \"endAngle\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    cornerRadius: \"cornerRadius\",\n    value: \"value\",\n    max: \"max\",\n    data: \"data\",\n    explodeSlices: \"explodeSlices\",\n    gradient: \"gradient\",\n    animate: \"animate\",\n    pointerEvents: \"pointerEvents\",\n    isActive: \"isActive\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c40,\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"arc-group\"], [4, \"ngIf\"], [1, \"arc\", 3, \"click\", \"dblclick\", \"mouseenter\", \"mouseleave\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\"]],\n  template: function PieArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, PieArcComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      i0.ɵɵelementStart(2, \"path\", 2);\n      i0.ɵɵlistener(\"click\", function PieArcComponent_Template__svg_path_click_2_listener() {\n        return ctx.onClick();\n      })(\"dblclick\", function PieArcComponent_Template__svg_path_dblclick_2_listener($event) {\n        return ctx.onDblClick($event);\n      })(\"mouseenter\", function PieArcComponent_Template__svg_path_mouseenter_2_listener() {\n        return ctx.activate.emit(ctx.data);\n      })(\"mouseleave\", function PieArcComponent_Template__svg_path_mouseleave_2_listener() {\n        return ctx.deactivate.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"pointer-events\", ctx.getPointerEvents());\n      i0.ɵɵclassProp(\"active\", ctx.isActive);\n      i0.ɵɵattribute(\"d\", ctx.path)(\"fill\", ctx.getGradient());\n    }\n  },\n  dependencies: [SvgRadialGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-arc]',\n      template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    endAngle: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animate: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }]\n  });\n})();\n\nclass PieSeriesComponent {\n  constructor() {\n    this.series = [];\n    this.innerRadius = 60;\n    this.outerRadius = 80;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    const pieGenerator = pie().value(d => d.value).sort(null);\n    const arcData = pieGenerator(this.series);\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d) {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc() {\n    const factor = 1.5;\n    return arc().innerRadius(this.outerRadius * factor).outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData) {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n\n        if (!this.labelVisible(b)) {\n          continue;\n        } // if they're on the same side\n\n\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc) {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc) {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n\n    return this.label(myArc);\n  }\n\n  label(myArc) {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc) {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc) {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item) {\n    return item.data.name;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n}\n\nPieSeriesComponent.ɵfac = function PieSeriesComponent_Factory(t) {\n  return new (t || PieSeriesComponent)();\n};\n\nPieSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-series\", \"\"]],\n  inputs: {\n    colors: \"colors\",\n    series: \"series\",\n    dims: \"dims\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    explodeSlices: \"explodeSlices\",\n    showLabels: \"showLabels\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    labelFormatting: \"labelFormatting\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipText: \"tooltipText\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c41,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"gradient\", \"data\", \"max\", \"explodeSlices\", \"isActive\", \"animate\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", \"dblclick\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\"]],\n  template: function PieSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, PieSeriesComponent__svg_g_0_Template, 3, 19, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [PieLabelComponent, PieArcComponent, i2.NgForOf, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-series]',\n      template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    colors: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    showLabels: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.label = 'Total';\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [20, 20, 20, 20];\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width * 4 / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.setColors();\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nAdvancedPieChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAdvancedPieChartComponent_BaseFactory;\n  return function AdvancedPieChartComponent_Factory(t) {\n    return (ɵAdvancedPieChartComponent_BaseFactory || (ɵAdvancedPieChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AdvancedPieChartComponent)))(t || AdvancedPieChartComponent);\n  };\n}();\n\nAdvancedPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AdvancedPieChartComponent,\n  selectors: [[\"ngx-charts-advanced-pie-chart\"]],\n  contentQueries: function AdvancedPieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    label: \"label\",\n    valueFormatting: \"valueFormatting\",\n    nameFormatting: \"nameFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 37,\n  consts: [[1, \"advanced-pie\", \"chart\"], [3, \"view\", \"showLegend\", \"animations\"], [1, \"pie\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"innerRadius\", \"activeEntries\", \"outerRadius\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"animations\", \"select\", \"activate\", \"deactivate\"], [1, \"advanced-pie-legend-wrapper\"], [3, \"data\", \"colors\", \"width\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\", \"select\", \"activate\", \"deactivate\"]],\n  template: function AdvancedPieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0)(2, \"ngx-charts-chart\", 1);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(3, \"g\", 2)(4, \"g\", 3);\n      i0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"ngx-charts-advanced-legend\", 5);\n      i0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_select_6_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_activate_6_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_deactivate_6_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\")(\"height\", ctx.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.dims.width, \"px\")(\"height\", ctx.dims.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(34, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.results)(\"innerRadius\", ctx.innerRadius)(\"activeEntries\", ctx.activeEntries)(\"outerRadius\", ctx.outerRadius)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.width - ctx.dims.width, \"px\")(\"height\", ctx.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"data\", ctx.results)(\"colors\", ctx.colors)(\"width\", ctx.width - ctx.dims.width - ctx.margin[1])(\"label\", ctx.label)(\"animations\", ctx.animations)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.nameFormatting)(\"percentageFormatting\", ctx.percentageFormatting);\n    }\n  },\n  dependencies: [ChartComponent, PieSeriesComponent, AdvancedLegendComponent],\n  styles: [_c25, \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AdvancedPieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-pie-chart',\n      template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"]\n    }]\n  }], null, {\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    nameFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nclass PieChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.labels = false;\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.explodeSlices = false;\n    this.doughnut = false;\n    this.arcWidth = 0.25;\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.dblclick = new EventEmitter();\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  update() {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n\n    this.innerRadius = 0;\n\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain(); // sort data according to domain\n\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: ScaleType.Ordinal,\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  hasNoOptionalMarginsSet() {\n    return !this.margins || this.margins.length <= 0;\n  }\n\n}\n\nPieChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPieChartComponent_BaseFactory;\n  return function PieChartComponent_Factory(t) {\n    return (ɵPieChartComponent_BaseFactory || (ɵPieChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PieChartComponent)))(t || PieChartComponent);\n  };\n}();\n\nPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieChartComponent,\n  selectors: [[\"ngx-charts-pie-chart\"]],\n  contentQueries: function PieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    labels: \"labels\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    explodeSlices: \"explodeSlices\",\n    doughnut: \"doughnut\",\n    arcWidth: \"arcWidth\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    labelFormatting: \"labelFormatting\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipText: \"tooltipText\",\n    margins: \"margins\"\n  },\n  outputs: {\n    dblclick: \"dblclick\",\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 24,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"pie-chart\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"showLabels\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"activeEntries\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"dblclick\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      })(\"legendLabelClick\", function PieChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"dblclick\", function PieChartComponent_Template__svg_g_dblclick_2_listener($event) {\n        return ctx.dblclick.emit($event);\n      })(\"select\", function PieChartComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function PieChartComponent_Template__svg_g_activate_2_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function PieChartComponent_Template__svg_g_deactivate_2_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(21, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.translation);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.data)(\"showLabels\", ctx.labels)(\"labelFormatting\", ctx.labelFormatting)(\"trimLabels\", ctx.trimLabels)(\"maxLabelLength\", ctx.maxLabelLength)(\"activeEntries\", ctx.activeEntries)(\"innerRadius\", ctx.innerRadius)(\"outerRadius\", ctx.outerRadius)(\"explodeSlices\", ctx.explodeSlices)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  dependencies: [ChartComponent, PieSeriesComponent],\n  styles: [_c25, _c42],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"]\n    }]\n  }], null, {\n    labels: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    doughnut: [{\n      type: Input\n    }],\n    arcWidth: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    dblclick: [{\n      type: Output\n    }],\n    margins: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nfunction gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale = scaleBand();\n  const yScale = scaleBand();\n  const width = dims.width;\n  const height = dims.height;\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n  const xDomain = [];\n  const yDomain = [];\n\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => d ? d.value : 0).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n  constructor(element) {\n    this.innerRadius = 70;\n    this.outerRadius = 80;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.layout = pie().value(d => d.data.value).sort(null);\n    this.arcs = this.getArcs();\n  }\n\n  getArcs() {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data) {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item) {\n    return item.data.name;\n  }\n\n  label(arc) {\n    return arc.data.name;\n  }\n\n  color(arc) {\n    return this.colors(this.label(arc));\n  }\n\n}\n\nPieGridSeriesComponent.ɵfac = function PieGridSeriesComponent_Factory(t) {\n  return new (t || PieGridSeriesComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nPieGridSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieGridSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-grid-series\", \"\"]],\n  inputs: {\n    colors: \"colors\",\n    data: \"data\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c43,\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"pie-grid-arcs\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieGridSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, PieGridSeriesComponent__svg_g_1_Template, 1, 11, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [PieArcComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieGridSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-grid-series]',\n      template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    colors: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass PieGridComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.tooltipDisabled = false;\n    this.label = 'Total';\n    this.minWidth = 150;\n    this.activeEntries = [];\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [20, 20, 20, 20];\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n    this.series = this.getSeries();\n    this.setColors();\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({\n    data\n  }) {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries() {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n      let count = 0;\n\n      const colors = () => {\n        count += 1;\n\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [d, {\n          data: {\n            other: true,\n            value: total - value,\n            name: d.data.name\n          }\n        }]\n      };\n    });\n  }\n\n  getTotal() {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nPieGridComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPieGridComponent_BaseFactory;\n  return function PieGridComponent_Factory(t) {\n    return (ɵPieGridComponent_BaseFactory || (ɵPieGridComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PieGridComponent)))(t || PieGridComponent);\n  };\n}();\n\nPieGridComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieGridComponent,\n  selectors: [[\"ngx-charts-pie-grid\"]],\n  contentQueries: function PieGridComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    designatedTotal: \"designatedTotal\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    label: \"label\",\n    minWidth: \"minWidth\",\n    activeEntries: \"activeEntries\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"pie-grid\", \"chart\"], [\"class\", \"pie-grid-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"pie-grid-item\"], [\"ngx-charts-pie-grid-series\", \"\", \"ngx-tooltip\", \"\", 3, \"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countPrefix\", 4, \"ngIf\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\", 3, \"countTo\", \"countSuffix\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 1, \"label\", 3, \"countTo\", \"countPrefix\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 1, \"label\"]],\n  template: function PieGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, PieGridComponent__svg_g_2_Template, 8, 19, \"g\", 2);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(5, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.series);\n    }\n  },\n  dependencies: [ChartComponent, PieGridSeriesComponent, CountUpDirective, i2.NgForOf, TooltipDirective, i2.NgIf],\n  styles: [_c25, \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieGridComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-grid',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"]\n    }]\n  }], null, {\n    designatedTotal: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    minWidth: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass PieChartModule {}\n\nPieChartModule.ɵfac = function PieChartModule_Factory(t) {\n  return new (t || PieChartModule)();\n};\n\nPieChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PieChartModule\n});\nPieChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent],\n      exports: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass PolarChartModule {}\n\nPolarChartModule.ɵfac = function PolarChartModule_Factory(t) {\n  return new (t || PolarChartModule)();\n};\n\nPolarChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PolarChartModule\n});\nPolarChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule, PieChartModule, LineChartModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, LineChartModule],\n      declarations: [PolarChartComponent, PolarSeriesComponent],\n      exports: [PolarChartComponent, PolarSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n  return text.split('').reduce((acc, curr) => {\n    const width = fontFamilyKey[curr] || defaultWidth;\n    return acc + width;\n  }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n  '0': 10,\n  '1': 10,\n  '2': 10,\n  '3': 10,\n  '4': 10,\n  '5': 10,\n  '6': 10,\n  '7': 10,\n  '8': 10,\n  '9': 10,\n  A: 11,\n  B: 11,\n  C: 11,\n  D: 12,\n  E: 10,\n  F: 9,\n  G: 12,\n  H: 12,\n  I: 7,\n  J: 7,\n  K: 11,\n  L: 9,\n  M: 13,\n  N: 12,\n  O: 13,\n  P: 10,\n  Q: 13,\n  R: 11,\n  S: 11,\n  T: 10,\n  U: 12,\n  V: 11,\n  W: 16,\n  X: 11,\n  Y: 10,\n  Z: 11,\n  a: 10,\n  b: 10,\n  c: 8,\n  d: 10,\n  e: 10,\n  f: 6,\n  g: 10,\n  h: 10,\n  i: 4,\n  j: 6,\n  k: 9,\n  l: 4,\n  m: 16,\n  n: 10,\n  o: 10,\n  p: 10,\n  q: 10,\n  r: 7,\n  s: 8,\n  t: 6,\n  u: 10,\n  v: 9,\n  w: 13,\n  x: 9,\n  y: 9,\n  z: 8,\n  '!': 6,\n  '@': 16,\n  '#': 13,\n  $: 10,\n  '%': 17,\n  '^': 13,\n  '&': 12,\n  '*': 10,\n  '(': 7,\n  ')': 7,\n  _: 10,\n  '-': 7,\n  '+': 13,\n  '=': 13,\n  ',': 6,\n  '.': 6,\n  '/': 7,\n  \"'\": 4,\n  ':': 7,\n  '|': 7,\n  '?': 9,\n  ';': 7,\n  '<': 13,\n  '>': 13\n};\n\nclass CardComponent {\n  constructor(element, cd, zone, platformId) {\n    this.cd = cd;\n    this.zone = zone;\n    this.platformId = platformId;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.value = '';\n    this.textFontSize = 12;\n    this.textTransform = '';\n    this.initialized = false;\n    this.bandHeight = 10;\n    this.textPadding = [10, 20, 5, 20];\n    this.labelFontSize = 15;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR();\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      cancelAnimationFrame(this.animationReq);\n    }\n  }\n\n  update() {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n      this.label = this.label ? this.label : this.data.name;\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n      const value = hasValue ? valueFormatting(cardData) : '';\n      this.value = this.paddedValue(value);\n      this.setPadding();\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n      setTimeout(() => {\n        if (isPlatformBrowser(this.platformId)) {\n          this.scaleText();\n        }\n\n        this.value = value;\n\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n\n    return value;\n  }\n\n  startCount() {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({\n        value,\n        finished\n      }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({\n            label: this.label,\n            data: this.data,\n            value\n          });\n\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText() {\n    this.zone.run(() => {\n      const {\n        width,\n        height\n      } = this.textEl.nativeElement.getBoundingClientRect();\n\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  scaleTextSSR() {\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n    const height = 18;\n    const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const availableWidth = this.cardWidth - 2 * textPadding;\n    const availableHeight = this.cardHeight / 3;\n    const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n    this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n    this.labelFontSize = Math.min(this.textFontSize, 15);\n    this.setPadding();\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n}\n\nCardComponent.ɵfac = function CardComponent_Factory(t) {\n  return new (t || CardComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nCardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CardComponent,\n  selectors: [[\"g\", \"ngx-charts-card\", \"\"]],\n  viewQuery: function CardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c45, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    bandColor: \"bandColor\",\n    textColor: \"textColor\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    data: \"data\",\n    medianSize: \"medianSize\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c46,\n  decls: 10,\n  vars: 25,\n  consts: [[1, \"cell\", 3, \"click\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card\"], [\"class\", \"card-band\", \"stroke\", \"none\", 4, \"ngIf\"], [\"x\", \"5\", \"alignment-baseline\", \"hanging\", 1, \"trimmed-label\"], [3, \"innerHTML\"], [\"text-anchor\", \"start\", \"alignment-baseline\", \"hanging\", 1, \"value-text\"], [\"textEl\", \"\"], [\"stroke\", \"none\", 1, \"card-band\"]],\n  template: function CardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵlistener(\"click\", function CardComponent_Template__svg_g_click_0_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelement(1, \"rect\", 1);\n      i0.ɵɵtemplate(2, CardComponent__svg_path_2_Template, 1, 3, \"path\", 2);\n      i0.ɵɵelementStart(3, \"title\");\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"foreignObject\", 3);\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelement(6, \"p\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(7, \"text\", 5, 6);\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"fill\", ctx.color);\n      i0.ɵɵattribute(\"width\", ctx.cardWidth)(\"height\", ctx.cardHeight);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.bandColor && ctx.bandColor !== ctx.color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.cardHeight - ctx.textPadding[2])(\"width\", ctx.textWidth)(\"height\", ctx.labelFontSize + ctx.textPadding[2]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"color\", ctx.textColor)(\"font-size\", ctx.labelFontSize, \"px\")(\"line-height\", ctx.labelFontSize, \"px\");\n      i0.ɵɵproperty(\"innerHTML\", ctx.formattedLabel, i0.ɵɵsanitizeHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"fill\", ctx.textColor)(\"font-size\", ctx.textFontSize, \"pt\");\n      i0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.textPadding[0]);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  dependencies: [i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card]',\n      template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    medianSize: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl', {\n        static: false\n      }]\n    }]\n  });\n})();\n/**\n * Converts a hex to RGB\n *\n * @export\n */\n\n\nfunction hexToRgb(value) {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\n\n\nfunction invertColor(value) {\n  const color = d3_color.rgb(value);\n  const {\n    r,\n    g,\n    b,\n    opacity\n  } = color;\n\n  if (opacity === 0) {\n    return color.toString();\n  }\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n  return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\n\n\nfunction shadeRGBColor({\n  r,\n  g,\n  b\n}, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n  return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n  constructor() {\n    this.innerPadding = 15;\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data.map(d => {\n        const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n        return hasValue ? valueFormatting({\n          data: d.data,\n          label: d ? d.data.name : '',\n          value: d && d.data ? d.data.value : ''\n        }).length : 0;\n      }).sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards() {\n    const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card) {\n    return card.label;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n}\n\nCardSeriesComponent.ɵfac = function CardSeriesComponent_Factory(t) {\n  return new (t || CardSeriesComponent)();\n};\n\nCardSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CardSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-card-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    innerPadding: \"innerPadding\",\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    emptyColor: \"emptyColor\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c47,\n  decls: 2,\n  vars: 4,\n  consts: [[\"class\", \"card-empty\", \"rx\", \"3\", \"ry\", \"3\", 3, \"fill\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card-empty\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function CardSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CardSeriesComponent__svg_rect_0_Template, 1, 6, \"rect\", 0);\n      i0.ɵɵtemplate(1, CardSeriesComponent__svg_g_1_Template, 1, 13, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.emptySlots)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cards)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [CardComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card-series]',\n      template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NumberCardComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.innerPadding = 15;\n    this.margin = [10, 10, 10, 10];\n  }\n\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({\n        value: null\n      });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n}\n\nNumberCardComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵNumberCardComponent_BaseFactory;\n  return function NumberCardComponent_Factory(t) {\n    return (ɵNumberCardComponent_BaseFactory || (ɵNumberCardComponent_BaseFactory = i0.ɵɵgetInheritedFactory(NumberCardComponent)))(t || NumberCardComponent);\n  };\n}();\n\nNumberCardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NumberCardComponent,\n  selectors: [[\"ngx-charts-number-card\"]],\n  inputs: {\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    emptyColor: \"emptyColor\",\n    innerPadding: \"innerPadding\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    designatedTotal: \"designatedTotal\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"number-card\", \"chart\"], [\"ngx-charts-card-series\", \"\", 3, \"colors\", \"cardColor\", \"bandColor\", \"textColor\", \"emptyColor\", \"data\", \"dims\", \"innerPadding\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function NumberCardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"select\", function NumberCardComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"clickable\", ctx.clickable);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"cardColor\", ctx.cardColor)(\"bandColor\", ctx.bandColor)(\"textColor\", ctx.textColor)(\"emptyColor\", ctx.emptyColor)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"innerPadding\", ctx.innerPadding)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [ChartComponent, CardSeriesComponent],\n  styles: [_c25, \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberCardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-number-card',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"]\n    }]\n  }], null, {\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    designatedTotal: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NumberCardModule {}\n\nNumberCardModule.ɵfac = function NumberCardModule_Factory(t) {\n  return new (t || NumberCardModule)();\n};\n\nNumberCardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NumberCardModule\n});\nNumberCardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberCardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n      exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n    }]\n  }], null, null);\n})();\n\nclass TreeMapCellComponent {\n  constructor(element) {\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.initialized = false;\n    this.orientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges() {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update() {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation() {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n    this.animateToCurrentForm();\n  }\n\n  getTextColor() {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm() {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: 0.3\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n}\n\nTreeMapCellComponent.ɵfac = function TreeMapCellComponent_Factory(t) {\n  return new (t || TreeMapCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nTreeMapCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell\", \"\"]],\n  inputs: {\n    data: \"data\",\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c48,\n  decls: 4,\n  vars: 7,\n  consts: [[4, \"ngIf\"], [1, \"cell\", 3, \"click\"], [\"class\", \"treemap-label\", 3, \"pointer-events\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [1, \"treemap-label\"], [1, \"treemap-label\", 3, \"innerHTML\"], [\"class\", \"treemap-val\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"treemap-val\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"treemap-val\", 3, \"countTo\", \"valueFormatting\"], [1, \"treemap-val\"]],\n  template: function TreeMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, TreeMapCellComponent__svg_defs_1_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵelementStart(2, \"rect\", 1);\n      i0.ɵɵlistener(\"click\", function TreeMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, TreeMapCellComponent__svg_foreignObject_3_Template, 6, 15, \"foreignObject\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height)(\"x\", ctx.x)(\"y\", ctx.y);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.width >= 70 && ctx.height >= 35);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, CountUpDirective, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell]',\n      template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TreeMapCellSeriesComponent {\n  constructor() {\n    this.gradient = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.styleTypes = StyleTypes;\n    this.placementTypes = PlacementTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    return this.data.children.filter(d => {\n      return d.depth === 1;\n    }).map((d, index) => {\n      const label = d.id;\n      return {\n        data: d.data,\n        x: d.x0,\n        y: d.y0,\n        width: d.x1 - d.x0,\n        height: d.y1 - d.y0,\n        fill: this.colors.getColor(label),\n        label,\n        value: d.value\n      };\n    });\n  }\n\n  getTooltipText({\n    label,\n    value\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nTreeMapCellSeriesComponent.ɵfac = function TreeMapCellSeriesComponent_Factory(t) {\n  return new (t || TreeMapCellSeriesComponent)();\n};\n\nTreeMapCellSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c49,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\"]],\n  template: function TreeMapCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TreeMapCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [TreeMapCellComponent, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell-series]',\n      template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TreeMapComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.select = new EventEmitter();\n    this.margin = [10, 10, 10, 10];\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.domain = this.getDomain();\n    this.treemap = treemap().size([this.dims.width, this.dims.height]);\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n    const root = stratify().id(d => {\n      let label = d.name;\n\n      if (label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label.toLocaleString();\n      }\n\n      return label;\n    }).parentId(d => d.isRoot ? null : 'root')([rootNode, ...this.results]).sum(d => d.value);\n    this.data = this.treemap(root);\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n}\n\nTreeMapComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵTreeMapComponent_BaseFactory;\n  return function TreeMapComponent_Factory(t) {\n    return (ɵTreeMapComponent_BaseFactory || (ɵTreeMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(TreeMapComponent)))(t || TreeMapComponent);\n  };\n}();\n\nTreeMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapComponent,\n  selectors: [[\"ngx-charts-tree-map\"]],\n  contentQueries: function TreeMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    results: \"results\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 16,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"tree-map\", \"chart\"], [\"ngx-charts-tree-map-cell-series\", \"\", 3, \"colors\", \"data\", \"dims\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"select\"]],\n  template: function TreeMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"select\", function TreeMapComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(13, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [ChartComponent, TreeMapCellSeriesComponent],\n  styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-tree-map',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"]\n    }]\n  }], null, {\n    results: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass TreeMapModule {}\n\nTreeMapModule.ɵfac = function TreeMapModule_Factory(t) {\n  return new (t || TreeMapModule)();\n};\n\nTreeMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TreeMapModule\n});\nTreeMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n      exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n    }]\n  }], null, null);\n})();\n\nvar ElementType;\n\n(function (ElementType) {\n  ElementType[\"Value\"] = \"value\";\n  ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\n\nclass LinearGaugeComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.min = 0;\n    this.max = 100;\n    this.value = 0;\n    this.margin = [10, 20, 10, 20];\n    this.valueResizeScale = 1;\n    this.unitsResizeScale = 1;\n    this.valueTextTransform = '';\n    this.valueTranslate = '';\n    this.unitsTextTransform = '';\n    this.unitsTranslate = '';\n    this.barOrientation = BarOrientation;\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText(ElementType.Value);\n      this.scaleText(ElementType.Units);\n    });\n  }\n\n  update() {\n    super.update();\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n    this.setColors();\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR('value');\n      this.scaleTextSSR('units');\n    } else {\n      setTimeout(() => this.scaleText(ElementType.Value), 50);\n      setTimeout(() => this.scaleText(ElementType.Units), 50);\n    }\n  }\n\n  getValueDomain() {\n    return [this.min, this.max];\n  }\n\n  getValueScale() {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n\n  getDisplayValue() {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element, repeat = true) {\n    let el;\n    let resizeScale;\n\n    if (element === ElementType.Value) {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const {\n      width,\n      height\n    } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n    const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === ElementType.Value) {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n\n      this.cd.markForCheck();\n\n      if (repeat && isPlatformBrowser(this.platformId)) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  scaleTextSSR(element) {\n    let resizeScale = 1;\n    const value = element === 'value' ? this.displayValue : this.units;\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n    const height = 25;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n    const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (element === 'value') {\n      this.valueResizeScale = resizeScale;\n      this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    } else {\n      this.unitsResizeScale = resizeScale;\n      this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  onClick() {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n  }\n\n}\n\nLinearGaugeComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵLinearGaugeComponent_BaseFactory;\n  return function LinearGaugeComponent_Factory(t) {\n    return (ɵLinearGaugeComponent_BaseFactory || (ɵLinearGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LinearGaugeComponent)))(t || LinearGaugeComponent);\n  };\n}();\n\nLinearGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LinearGaugeComponent,\n  selectors: [[\"ngx-charts-linear-gauge\"]],\n  viewQuery: function LinearGaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c50, 5);\n      i0.ɵɵviewQuery(_c51, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.valueTextEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.unitsTextEl = _t.first);\n    }\n  },\n  inputs: {\n    min: \"min\",\n    max: \"max\",\n    value: \"value\",\n    units: \"units\",\n    previousValue: \"previousValue\",\n    valueFormatting: \"valueFormatting\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 15,\n  vars: 38,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"click\"], [1, \"linear-gauge\", \"chart\"], [\"ngx-charts-bar\", \"\", 1, \"background-bar\", 3, \"width\", \"height\", \"x\", \"y\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"ngx-charts-bar\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\", 4, \"ngIf\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\", 4, \"ngIf\"], [\"alignment-baseline\", \"after-edge\", 1, \"value\"], [\"valueTextEl\", \"\"], [\"alignment-baseline\", \"before-edge\", 1, \"units\"], [\"unitsTextEl\", \"\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\"]],\n  template: function LinearGaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"click\", function LinearGaugeComponent_Template_ngx_charts_chart_click_0_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2)(3, \"g\", 3);\n      i0.ɵɵtemplate(4, LinearGaugeComponent__svg_line_4_Template, 1, 2, \"line\", 4);\n      i0.ɵɵtemplate(5, LinearGaugeComponent__svg_line_5_Template, 1, 2, \"line\", 5);\n      i0.ɵɵelementStart(6, \"g\")(7, \"g\")(8, \"text\", 6, 7);\n      i0.ɵɵtext(10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"g\")(12, \"text\", 8, 9);\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(33, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"width\", ctx.dims.width)(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"data\", i0.ɵɵpureFunction0(36, _c52))(\"orientation\", ctx.barOrientation.Horizontal)(\"roundEdges\", true)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"width\", ctx.valueScale(ctx.value))(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"fill\", ctx.colors.getColor(ctx.units))(\"data\", i0.ɵɵpureFunction0(37, _c52))(\"orientation\", ctx.barOrientation.Horizontal)(\"roundEdges\", true)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.valueTranslate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      i0.ɵɵattribute(\"transform\", ctx.valueTextTransform);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayValue, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.unitsTranslate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      i0.ɵɵattribute(\"transform\", ctx.unitsTextTransform);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.units, \" \");\n    }\n  },\n  dependencies: [ChartComponent, BarComponent, i2.NgIf],\n  styles: [_c25, \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LinearGaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-linear-gauge',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"]\n    }]\n  }], null, {\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    previousValue: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    valueTextEl: [{\n      type: ViewChild,\n      args: ['valueTextEl']\n    }],\n    unitsTextEl: [{\n      type: ViewChild,\n      args: ['unitsTextEl']\n    }]\n  });\n})();\n\nclass GaugeArcComponent {\n  constructor() {\n    this.isActive = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  tooltipText(arc) {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n}\n\nGaugeArcComponent.ɵfac = function GaugeArcComponent_Factory(t) {\n  return new (t || GaugeArcComponent)();\n};\n\nGaugeArcComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeArcComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-arc\", \"\"]],\n  inputs: {\n    backgroundArc: \"backgroundArc\",\n    valueArc: \"valueArc\",\n    cornerRadius: \"cornerRadius\",\n    colors: \"colors\",\n    isActive: \"isActive\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  attrs: _c53,\n  decls: 2,\n  vars: 23,\n  consts: [[\"ngx-charts-pie-arc\", \"\", 1, \"background-arc\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"data\", \"animate\", \"pointerEvents\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"fill\", \"data\", \"animate\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function GaugeArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"g\", 0);\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵlistener(\"select\", function GaugeArcComponent_Template__svg_g_select_1_listener($event) {\n        return ctx.select.emit($event);\n      })(\"activate\", function GaugeArcComponent_Template__svg_g_activate_1_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function GaugeArcComponent_Template__svg_g_deactivate_1_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.backgroundArc.endAngle)(\"innerRadius\", ctx.backgroundArc.innerRadius)(\"outerRadius\", ctx.backgroundArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"data\", ctx.backgroundArc.data)(\"animate\", false)(\"pointerEvents\", false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.valueArc.endAngle)(\"innerRadius\", ctx.valueArc.innerRadius)(\"outerRadius\", ctx.valueArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"fill\", ctx.colors.getColor(ctx.valueArc.data.name))(\"data\", ctx.valueArc.data)(\"animate\", ctx.animations)(\"isActive\", ctx.isActive)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.placementTypes.Top)(\"tooltipType\", ctx.styleTypes.tooltip)(\"tooltipTitle\", ctx.tooltipTemplate ? undefined : ctx.tooltipText(ctx.valueArc))(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.valueArc.data);\n    }\n  },\n  dependencies: [PieArcComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-arc]',\n      template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    backgroundArc: [{\n      type: Input\n    }],\n    valueArc: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GaugeAxisComponent {\n  constructor() {\n    this.rotate = '';\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks() {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = angleDeg * Math.PI / 180;\n      const textAnchor = this.getTextAnchor(angleDeg);\n      let skip = false;\n\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = smallAngleDeg * Math.PI / 180;\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = TextAnchor.Middle;\n\n    if (angle > 45 && angle <= 135) {\n      textAnchor = TextAnchor.Start;\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = TextAnchor.End;\n    }\n\n    return textAnchor;\n  }\n\n  getTickPath(startDistance, tickLength, angle) {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n    const points = [{\n      x: x1,\n      y: y1\n    }, {\n      x: x2,\n      y: y2\n    }];\n    const lineGenerator = line().x(d => d.x).y(d => d.y);\n    return lineGenerator(points);\n  }\n\n}\n\nGaugeAxisComponent.ɵfac = function GaugeAxisComponent_Factory(t) {\n  return new (t || GaugeAxisComponent)();\n};\n\nGaugeAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-axis\", \"\"]],\n  inputs: {\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    min: \"min\",\n    max: \"max\",\n    angleSpan: \"angleSpan\",\n    startAngle: \"startAngle\",\n    radius: \"radius\",\n    valueScale: \"valueScale\",\n    tickFormatting: \"tickFormatting\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c54,\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"gauge-tick gauge-tick-large\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gauge-tick gauge-tick-small\", 4, \"ngFor\", \"ngForOf\"], [1, \"gauge-tick\", \"gauge-tick-large\"], [\"alignment-baseline\", \"central\"], [1, \"gauge-tick\", \"gauge-tick-small\"]],\n  template: function GaugeAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, GaugeAxisComponent__svg_g_1_Template, 2, 1, \"g\", 0);\n      i0.ɵɵtemplate(2, GaugeAxisComponent__svg_g_2_Template, 3, 4, \"g\", 0);\n      i0.ɵɵtemplate(3, GaugeAxisComponent__svg_g_3_Template, 2, 1, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.rotate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.small);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-axis]',\n      template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    valueScale: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GaugeComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.min = 0;\n    this.max = 100;\n    this.bigSegments = 10;\n    this.smallSegments = 5;\n    this.showAxis = true;\n    this.startAngle = -120;\n    this.angleSpan = 240;\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.showText = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.resizeScale = 1;\n    this.rotation = '';\n    this.textTransform = 'scale(1, 1)';\n    this.cornerRadius = 10;\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    } // make the starting angle positive\n\n\n    if (this.startAngle < 0) {\n      this.startAngle = this.startAngle % 360 + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n    this.arcs = this.getArcs();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs() {\n    const arcs = [];\n    const availableRadius = this.outerRadius * 0.7;\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n    let i = 0;\n\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n      const backgroundArc = {\n        endAngle: this.angleSpan * Math.PI / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n      const valueArc = {\n        endAngle: Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain() {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale() {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n\n  getDisplayValue() {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat = true) {\n    if (!this.showText) {\n      return;\n    }\n\n    const {\n      width\n    } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor(availableSpace / (width / this.resizeScale) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: ScaleType.Ordinal,\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index, item) {\n    return item.valueArc.data.name;\n  }\n\n}\n\nGaugeComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵGaugeComponent_BaseFactory;\n  return function GaugeComponent_Factory(t) {\n    return (ɵGaugeComponent_BaseFactory || (ɵGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(GaugeComponent)))(t || GaugeComponent);\n  };\n}();\n\nGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeComponent,\n  selectors: [[\"ngx-charts-gauge\"]],\n  contentQueries: function GaugeComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  viewQuery: function GaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c45, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    min: \"min\",\n    max: \"max\",\n    textValue: \"textValue\",\n    units: \"units\",\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    results: \"results\",\n    showAxis: \"showAxis\",\n    startAngle: \"startAngle\",\n    angleSpan: \"angleSpan\",\n    activeEntries: \"activeEntries\",\n    axisTickFormatting: \"axisTickFormatting\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    showText: \"showText\",\n    margin: \"margin\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"gauge\", \"chart\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\", 4, \"ngIf\"], [\"alignment-baseline\", \"central\", 3, \"textAnchor\", 4, \"ngIf\"], [\"ngx-charts-gauge-arc\", \"\", 3, \"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\"], [\"alignment-baseline\", \"central\"], [\"textEl\", \"\"], [\"x\", \"0\", \"dy\", \"0\"], [\"x\", \"0\", \"dy\", \"1.2em\"]],\n  template: function GaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function GaugeComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, GaugeComponent__svg_g_2_Template, 2, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, GaugeComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, GaugeComponent__svg_text_4_Template, 6, 5, \"text\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showText);\n    }\n  },\n  dependencies: [ChartComponent, GaugeArcComponent, GaugeAxisComponent, i2.NgForOf, i2.NgIf],\n  styles: [_c25, \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-gauge',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    textValue: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    showAxis: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    axisTickFormatting: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    showText: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl']\n    }]\n  });\n})();\n\nclass GaugeModule {}\n\nGaugeModule.ɵfac = function GaugeModule_Factory(t) {\n  return new (t || GaugeModule)();\n};\n\nGaugeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GaugeModule\n});\nGaugeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule, PieChartModule, BarChartModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, BarChartModule],\n      declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n      exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n    }]\n  }], null, null);\n})(); // The export is needed here to generate a valid polyfills.metadata.json file\n\n\nfunction ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n\nclass NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n\n}\n\nNgxChartsModule.ɵfac = function NgxChartsModule_Factory(t) {\n  return new (t || NgxChartsModule)();\n};\n\nNgxChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxChartsModule\n});\nNgxChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxChartsModule, [{\n    type: NgModule,\n    args: [{\n      exports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction tickFormat(fieldType, groupByType) {\n  return function (label) {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(label);\n    }\n\n    return label.toString();\n  };\n}\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getTickLines, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };","map":{"version":3,"names":["i0","PLATFORM_ID","Component","ViewEncapsulation","Inject","Input","ViewChild","HostBinding","HostListener","Injectable","ChangeDetectionStrategy","EventEmitter","Output","Directive","NgModule","ContentChild","i2","isPlatformBrowser","isPlatformServer","CommonModule","__decorate","DomPortalOutlet","ComponentPortal","fromEvent","debounceTime","trigger","transition","style","animate","select","brushX","scaleTime","scaleLinear","scalePoint","scaleOrdinal","scaleQuantile","scaleBand","area","curveLinear","line","arc","lineRadial","curveCardinalClosed","pie","range","min","max","quantile","interpolate","easeSinInOut","rfdc","format","d3_color","treemap","stratify","timeFormat","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","arguments","clearTimeout","trailing","setTimeout","throttleable","duration","innerDecorator","target","key","descriptor","configurable","enumerable","get","getter","Object","defineProperty","value","PlacementTypes","caretOffset","verticalPosition","elDimensions","popoverDimensions","alignment","Top","top","Bottom","height","Center","undefined","horizontalPosition","Left","left","Right","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","positionContent","determinePlacement","TooltipContentComponent","constructor","element","renderer","platformId","cssClasses","clz","type","cssClass","ngAfterViewInit","position","bind","nativeElm","nativeElement","host","getBoundingClientRect","checkFlip","showCaret","addClass","setStyle","caretElm","onWindowResize","ɵfac","ElementRef","Renderer2","ɵcmp","NgIf","NgTemplateOutlet","prototype","selector","template","encapsulation","None","styles","decorators","title","InjectionRegisteryService","injectionService","defaults","components","Map","getByType","create","bindings","createByType","assignDefaults","component","injectComponent","register","destroy","instance","compsByType","componentType","length","idx","indexOf","splice","destroyAll","destroyByType","comps","i","appendComponent","inputs","assign","outputs","has","set","types","push","isViewContainerRef","x","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","Error","setRootViewContainer","getComponentRootNode","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindingKeys","getOwnPropertyNames","bindingName","eventKeys","eventName","componentClass","appendLocation","portalHost","portal","componentRef","attach","ApplicationRef","ComponentFactoryResolver","Injector","ɵprov","TooltipService","LegendPosition","LegendType","ScaleType","ScaleLegendComponent","horizontal","ngOnChanges","changes","gradientValues","gradientString","colors","domain","direction","gradient","splits","pairs","reverse","forEach","c","Math","round","join","changeDetection","OnPush","valueRange","formatLabel","label","toLocaleDateString","toLocaleString","escapeLabel","replace","match","LegendEntryComponent","isActive","activate","deactivate","toggle","trimmedLabel","formattedLabel","onMouseEnter","emit","name","onMouseLeave","color","LegendComponent","cd","labelClick","labelActivate","labelDeactivate","legendEntries","update","markForCheck","getLegendEntries","items","data","findIndex","getColor","entry","activeEntries","item","find","d","trackBy","index","ChangeDetectorRef","NgForOf","ChartComponent","showLegend","animations","legendLabelClick","legendLabelActivate","legendLabelDeactivate","legendColumns","legendType","getLegendType","legendOptions","ScaleLegend","chartColumns","chartWidth","floor","view","legendWidth","scaleType","Linear","Legend","providers","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","check","offsetHeight","offsetWidth","runOutsideAngular","NgZone","ɵdir","isDate","toString","call","isNumber","BaseChartComponent","chartElement","scheme","schemeType","Ordinal","ngOnInit","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","hostElem","parentNode","formatDates","g","series","j","resizeSubscription","source","subscription","pipe","e","copy","seriesItem","seriesItemCopy","JSON","parse","stringify","customColors","Orientation","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","trimLabel","s","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","getTickLines","maxLength","maxLines","labelString","totalLines","test","split","reduce","lines","last","pop","startIndex","substring","TextAnchor","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","wrapTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","Middle","maxTicksLength","maxAllowedLength","approxHeight","maxPossibleLengthForTickIfWrapped","isWrapTicksSupported","scale","step","updateDims","parseInt","ticksElement","getTicks","tickFormatting","tickFormat","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","End","tick","tickLength","tickTrim","len","charWidth","wordWidth","baseWidth","maxBaseWidth","cos","PI","labelHeight","longestTick","earlier","current","tickLines","tickChunks","getMaxPossibleLengthForTick","requiredHeight","abs","sin","getMaxTicks","maxScaleTicks","tickValues","tickWidth","tickTransform","gridLineTransform","longestLabel","averageCharacterWidth","maxCharacters","truncatedText","maxAllowedLines","possibleStringLength","gridLineHeight","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","orientation","xAxisTickCount","emitTicksHeight","newLabelOffset","xScale","showLabel","labelText","ticksComponent","roundedRect","w","h","r","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","getApproximateAxisWidth","sign","tickSpacing","positionMiddle","chunksLength","bandWidth","heightOfLines","availableFreeSpace","referenceLines","setReferencelines","y2","y1","dy","x2","x1","Start","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","maxChars","t","preferredWidth","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","yScale","AxesModule","ɵmod","ɵinj","imports","declarations","exports","StyleTypes","ShowTypes","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","listensForFocus","focus","listensForHover","mouseover","hideTooltip","onFocus","showTooltip","onBlur","contentDom","contains","onMouseClick","immediate","time","navigator","userAgent","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","event","destroyFn","tooltipTitle","tooltipTemplate","tooltipContext","ViewContainerRef","TooltipModule","entryComponents","cache","id","newId","random","pow","BarOrientation","SvgLinearGradientComponent","Vertical","Horizontal","stops","CircleComponent","onClick","classNames","Array","isArray","cx","cy","circleOpacity","pointerEvents","SeriesType","CircleSeriesComponent","Standard","barVisible","barOrientation","placementTypes","styleTypes","isSSR","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","visibleValue","mapDataPointToCircle","seriesName","tooltipLabel","Time","Number","d1","radius","opacity","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","activateCircle","deactivateCircle","GridPanelComponent","ClassEnum","GridPanelSeriesComponent","gridPanels","getGridPanels","className","Odd","positionIndex","Even","paddingInner","class","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","animationsLoaded","hasGradient","loadAnimation","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","b","count","countFrom","countTo","countDecimals","countDuration","callback","startVal","endVal","countDown","decimals","dec","startTime","runCount","timestamp","frameVal","progress","finished","requestAnimationFrame","val","decimalChecker","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","root","global","MouseEvent","createMouseEvent","bubbles","cancelable","document","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","initialized","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","includes","extent","on","selection","newSelection","newDomain","invert","legend","autoScale","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","ChartCommonModule","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","showYLabel","legendPosition","columns","xOffset","chartHeight","colorSets","selectable","ColorHelper","cs","colorDomain","generateColorScheme","colorScale","Quantile","points","valueScale","formattedValue","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","endColor","startColor","currentVal","originalOffset","getUniqueXDomainValues","valueSet","Set","add","from","getScaleType","checkDateType","allDates","every","allNumbers","getXDomainArray","xScaleMin","xScaleMax","mappedValues","sort","a","aDate","getTime","bDate","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","baseValue","stacked","normalized","updateGradient","currentArea","startingArea","xProperty","y0","curve","d0values","d1values","isInactive","AreaChartComponent","legendTitle","xAxis","yAxis","timeline","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","showXAxisLabel","showYAxisLabel","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","yScaleMin","yScaleMax","nice","date","num","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","xAxisLabel","yAxisLabel","xAxisTickFormatting","yAxisTickFormatting","xAxisTicks","yAxisTicks","seriesTooltipTemplate","AreaChartNormalizedComponent","seriesType","valueOf","AreaChartStackedComponent","AreaChartModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","ariaLabel","BarChartType","D0Types","BarLabelComponent","horizontalPadding","verticalPadding","getSize","negative","formatedValue","barX","barWidth","barY","barHeight","SeriesHorizontal","showDataLabel","dataLabelWidthChanged","barsForDataLabels","updateTooltipSettings","positive","d0Type","Normalized","bars","getLabel","bar","Stacked","offset0","offset1","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","_a","active","dataItem","trackDataLabelBy","barLabel","click","BarHorizontalComponent","barPadding","dataLabelMaxWidth","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valueDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","barChartType","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","SeriesVerticalComponent","dataLabelHeightChanged","BarVerticalComponent","dataLabelMaxHeight","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","BarVerticalStackedComponent","BarChartModule","cloneDeep","BoxComponent","boxStrokeWidth","whiskerStrokeWidth","medianLineWidth","updateLineEl","maskLineId","maskLine","boxPath","oldPath","oldLineCoordinates","getStartingLineCoordinates","nodeBar","selectAll","ease","attrTween","pathTween","lineEl","lineCoordinates","_","v1","v2","lineTween","nodeLineEl","baseVal","precision","path0","path1","cloneNode","setAttribute","n0","getTotalLength","n1","distances","dt","p0","getPointAtLength","p1","p","strokeColor","BoxSeriesComponent","counts","mappedCounts","serie","whiskers","groupCounts","quartiles","getBoxQuantiles","getLinesCoordinates","box","formattedTooltipLabel","inputData","commonX","offsetX","whiskerLineWidth","whiskerZero","whiskerOne","median","topLine","medianLine","bottomLine","verticalLine","BoxChartComponent","setScales","getUniqueBoxChartXDomainValues","legendOpts","legendOptionsConfig","BoxChartModule","getDomain","minVal","maxVal","getScale","BubbleSeriesComponent","circles","getCircles","rScale","xScaleType","yScaleType","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","getRScale","getBubblePadding","yMin","xMin","yMax","xMax","Infinity","BubbleChartModule","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","f","yVal","rx","HeatMapModule","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","hasRange","getRangeGenerator","outerPath","areaGradientStops","rangeFillOpacity","LineChartComponent","LineChartModule","PieLabelComponent","labelTrim","labelTrimSize","setTransforms","styleTransform","textX","textY","attrTransform","textTransition","isIE","startRadius","explodeSlices","innerArc","innerRadius","outerRadius","innerPos","centroid","pos","outerPos","midAngle","startAngle","endAngle","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","cData","inactive","defaultTooltipText","twoPI","PolarChartComponent","showSeriesOnHover","yAxisMinScale","setDims","setTicks","halfWidth","halfHeight","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","thetaTicks","dd","startPos","minDistance","o","radiusTicks","getYValues","PieArcComponent","cornerRadius","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","_current","copyOfD","interpolater","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieSeriesComponent","trimLabels","maxLabelLength","pieGenerator","arcData","calculateLabelPositions","outerArc","factor","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","AdvancedPieChartComponent","nameFormatting","PieChartComponent","labels","doughnut","arcWidth","hasNoOptionalMarginsSet","translation","gridSize","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridSeriesComponent","layout","arcs","getArcs","other","PieGridComponent","getSeries","baselineLabelHeight","yPos","PieChartModule","PolarChartModule","calculateTextWidth","fontFamilyKey","text","defaultWidth","acc","curr","VERDANA_FONT_WIDTHS_16_PX","A","B","C","D","E","F","G","H","I","J","K","M","O","P","Q","R","S","T","U","V","W","X","Y","Z","k","l","m","n","q","u","z","$","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","scaleTextSSR","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","decs","textEl","availableWidth","availableHeight","resizeScale","bandColor","textColor","hexToRgb","rgb","invertColor","yiq","depth","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","NumberCardComponent","clickable","observers","NumberCardModule","TreeMapCellComponent","cellData","getTextColor","TreeMapCellSeriesComponent","children","x0","TreeMapComponent","rootNode","isRoot","parentId","TreeMapModule","ElementType","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","Value","Units","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","units","GaugeArcComponent","backgroundArc","valueArc","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","angleSpan","bigSegments","smallTickSegment","smallSegments","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","getTickPath","smallAngleDeg","smallAngle","lineGenerator","GaugeComponent","showAxis","showText","rotation","availableRadius","radiusPerArc","textRadius","dataMin","dataMax","textValue","availableSpace","axisTickFormatting","GaugeModule","ngxChartsPolyfills","SVGElement","HTMLDivElement","NgxChartsModule","fieldType","groupByType","formatter"],"sources":["D:/Angular Dev/HR_EMS/EMS/ClientApp/node_modules/@swimlane/ngx-charts/fesm2015/swimlane-ngx-charts.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport rfdc from 'rfdc';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\n\n/**\n * Throttle a function\n *\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        // eslint-disable-next-line prefer-rest-params\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\nvar PlacementTypes;\n(function (PlacementTypes) {\n    PlacementTypes[\"Top\"] = \"top\";\n    PlacementTypes[\"Bottom\"] = \"bottom\";\n    PlacementTypes[\"Left\"] = \"left\";\n    PlacementTypes[\"Right\"] = \"right\";\n    PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Top) {\n        return elDimensions.top - caretOffset;\n    }\n    if (alignment === PlacementTypes.Bottom) {\n        return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n    }\n    return undefined;\n}\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Left) {\n        return elDimensions.left - caretOffset;\n    }\n    if (alignment === PlacementTypes.Right) {\n        return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n    }\n    return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nclass PositionHelper {\n    /**\n     * Calculate vertical alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.height > window.innerHeight) {\n            result = window.innerHeight - popoverDimensions.height;\n        }\n        return result;\n    }\n    /**\n     * Calculate vertical caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Top) {\n            result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Bottom) {\n            result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n        }\n        const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n            result += popoverPosition + popoverDimensions.height - window.innerHeight;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.width > window.innerWidth) {\n            result = window.innerWidth - popoverDimensions.width;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Left) {\n            result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Right) {\n            result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n        }\n        const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n            result += popoverPosition + popoverDimensions.width - window.innerWidth;\n        }\n        return result;\n    }\n    /**\n     * Checks if the element's position should be flipped\n     *\n     * @memberOf PositionHelper\n     */\n    static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n        let flip = false;\n        if (placement === PlacementTypes.Right) {\n            if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Left) {\n            if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Top) {\n            if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Bottom) {\n            if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n                flip = true;\n            }\n        }\n        return flip;\n    }\n    /**\n     * Position caret\n     *\n     * @memberOf PositionHelper\n     */\n    static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = -7;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = elmDim.width;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = elmDim.height;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = -7;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Position content\n     *\n     * @memberOf PositionHelper\n     */\n    static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = hostDim.left + hostDim.width + spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = hostDim.left - elmDim.width - spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = hostDim.top - elmDim.height - spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = hostDim.top + hostDim.height + spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Determine placement based on flip\n     *\n     * @memberOf PositionHelper\n     */\n    static determinePlacement(placement, elmDim, hostDim, spacing) {\n        const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n        if (shouldFlip) {\n            if (placement === PlacementTypes.Right) {\n                return PlacementTypes.Left;\n            }\n            else if (placement === PlacementTypes.Left) {\n                return PlacementTypes.Right;\n            }\n            else if (placement === PlacementTypes.Top) {\n                return PlacementTypes.Bottom;\n            }\n            else if (placement === PlacementTypes.Bottom) {\n                return PlacementTypes.Top;\n            }\n        }\n        return placement;\n    }\n}\n\nclass TooltipContentComponent {\n    constructor(element, renderer, platformId) {\n        this.element = element;\n        this.renderer = renderer;\n        this.platformId = platformId;\n    }\n    get cssClasses() {\n        let clz = 'ngx-charts-tooltip-content';\n        clz += ` position-${this.placement}`;\n        clz += ` type-${this.type}`;\n        clz += ` ${this.cssClass}`;\n        return clz;\n    }\n    ngAfterViewInit() {\n        setTimeout(this.position.bind(this));\n    }\n    position() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const nativeElm = this.element.nativeElement;\n        const hostDim = this.host.nativeElement.getBoundingClientRect();\n        // if no dims were found, never show\n        if (!hostDim.height && !hostDim.width)\n            return;\n        const elmDim = nativeElm.getBoundingClientRect();\n        this.checkFlip(hostDim, elmDim);\n        this.positionContent(nativeElm, hostDim, elmDim);\n        if (this.showCaret) {\n            this.positionCaret(hostDim, elmDim);\n        }\n        // animate its entry\n        setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n    }\n    positionContent(nativeElm, hostDim, elmDim) {\n        const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n        this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n        this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n    }\n    positionCaret(hostDim, elmDim) {\n        const caretElm = this.caretElm.nativeElement;\n        const caretDimensions = caretElm.getBoundingClientRect();\n        const { top, left } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n        this.renderer.setStyle(caretElm, 'top', `${top}px`);\n        this.renderer.setStyle(caretElm, 'left', `${left}px`);\n    }\n    checkFlip(hostDim, elmDim) {\n        this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n    }\n    onWindowResize() {\n        this.position();\n    }\n}\nTooltipContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipContentComponent, selector: \"ngx-tooltip-content\", inputs: { host: \"host\", showCaret: \"showCaret\", type: \"type\", placement: \"placement\", alignment: \"alignment\", spacing: \"spacing\", cssClass: \"cssClass\", title: \"title\", template: \"template\", context: \"context\" }, host: { listeners: { \"window:resize\": \"onWindowResize()\" }, properties: { \"class\": \"this.cssClasses\" } }, viewQueries: [{ propertyName: \"caretElm\", first: true, predicate: [\"caretElm\"], descendants: true }], ngImport: i0, template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    throttleable(100)\n], TooltipContentComponent.prototype, \"onWindowResize\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-tooltip-content', template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { host: [{\n                type: Input\n            }], showCaret: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], placement: [{\n                type: Input\n            }], alignment: [{\n                type: Input\n            }], spacing: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], context: [{\n                type: Input\n            }], caretElm: [{\n                type: ViewChild,\n                args: ['caretElm']\n            }], cssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], onWindowResize: [{\n                type: HostListener,\n                args: ['window:resize']\n            }] } });\n\nclass InjectionRegisteryService {\n    constructor(injectionService) {\n        this.injectionService = injectionService;\n        this.defaults = {};\n        this.components = new Map();\n    }\n    getByType(type = this.type) {\n        return this.components.get(type);\n    }\n    create(bindings) {\n        return this.createByType(this.type, bindings);\n    }\n    createByType(type, bindings) {\n        bindings = this.assignDefaults(bindings);\n        const component = this.injectComponent(type, bindings);\n        this.register(type, component);\n        return component;\n    }\n    destroy(instance) {\n        const compsByType = this.components.get(instance.componentType);\n        if (compsByType && compsByType.length) {\n            const idx = compsByType.indexOf(instance);\n            if (idx > -1) {\n                const component = compsByType[idx];\n                component.destroy();\n                compsByType.splice(idx, 1);\n            }\n        }\n    }\n    destroyAll() {\n        this.destroyByType(this.type);\n    }\n    destroyByType(type) {\n        const comps = this.components.get(type);\n        if (comps && comps.length) {\n            let i = comps.length - 1;\n            while (i >= 0) {\n                this.destroy(comps[i--]);\n            }\n        }\n    }\n    injectComponent(type, bindings) {\n        return this.injectionService.appendComponent(type, bindings);\n    }\n    assignDefaults(bindings) {\n        const inputs = Object.assign({}, this.defaults.inputs);\n        const outputs = Object.assign({}, this.defaults.outputs);\n        if (!bindings.inputs && !bindings.outputs) {\n            bindings = { inputs: bindings };\n        }\n        if (inputs) {\n            bindings.inputs = Object.assign(Object.assign({}, inputs), bindings.inputs);\n        }\n        if (outputs) {\n            bindings.outputs = Object.assign(Object.assign({}, outputs), bindings.outputs);\n        }\n        return bindings;\n    }\n    register(type, component) {\n        if (!this.components.has(type)) {\n            this.components.set(type, []);\n        }\n        const types = this.components.get(type);\n        types.push(component);\n    }\n}\n\nfunction isViewContainerRef(x) {\n    return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\nclass InjectionService {\n    constructor(applicationRef, componentFactoryResolver, injector) {\n        this.applicationRef = applicationRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n    }\n    /**\n     * Sets a default global root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     */\n    static setGlobalRootViewContainer(container) {\n        InjectionService.globalRootViewContainer = container;\n    }\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainer() {\n        if (this._container)\n            return this._container;\n        if (InjectionService.globalRootViewContainer)\n            return InjectionService.globalRootViewContainer;\n        if (this.applicationRef.components.length)\n            return this.applicationRef.components[0];\n        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n    }\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     *\n     * @memberOf InjectionService\n     */\n    setRootViewContainer(container) {\n        this._container = container;\n    }\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param componentRef\n     *\n     * @memberOf InjectionService\n     */\n    getComponentRootNode(component) {\n        if (isViewContainerRef(component)) {\n            return component.element.nativeElement;\n        }\n        if (component.hostView && component.hostView.rootNodes.length > 0) {\n            return component.hostView.rootNodes[0];\n        }\n        // the top most component root node has no `hostView`\n        return component.location.nativeElement;\n    }\n    /**\n     * Gets the root component container html element.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainerNode(component) {\n        return this.getComponentRootNode(component);\n    }\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param component\n     * @param options\n     *\n     * @memberOf InjectionService\n     */\n    projectComponentBindings(component, bindings) {\n        if (bindings) {\n            if (bindings.inputs !== undefined) {\n                const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n                for (const bindingName of bindingKeys) {\n                    component.instance[bindingName] = bindings.inputs[bindingName];\n                }\n            }\n            if (bindings.outputs !== undefined) {\n                const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n                for (const eventName of eventKeys) {\n                    component.instance[eventName] = bindings.outputs[eventName];\n                }\n            }\n        }\n        return component;\n    }\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @param componentClass\n     * @param [options={}]\n     * @param [location]\n     *\n     * @memberOf InjectionService\n     */\n    appendComponent(componentClass, bindings = {}, location) {\n        if (!location)\n            location = this.getRootViewContainer();\n        const appendLocation = this.getComponentRootNode(location);\n        const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n        const portal = new ComponentPortal(componentClass);\n        const componentRef = portalHost.attach(portal);\n        this.projectComponentBindings(componentRef, bindings);\n        return componentRef;\n    }\n}\nInjectionService.globalRootViewContainer = null;\nInjectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, deps: [{ token: i0.ApplicationRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nInjectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }]; } });\n\nclass TooltipService extends InjectionRegisteryService {\n    constructor(injectionService) {\n        super(injectionService);\n        this.type = TooltipContentComponent;\n    }\n}\nTooltipService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, deps: [{ token: InjectionService }], target: i0.ɵɵFactoryTarget.Injectable });\nTooltipService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: InjectionService }]; } });\n\nvar LegendPosition;\n(function (LegendPosition) {\n    LegendPosition[\"Right\"] = \"right\";\n    LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\nvar LegendType;\n(function (LegendType) {\n    LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n    LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"Time\"] = \"time\";\n    ScaleType[\"Linear\"] = \"linear\";\n    ScaleType[\"Ordinal\"] = \"ordinal\";\n    ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n    constructor() {\n        this.horizontal = false;\n    }\n    ngOnChanges(changes) {\n        const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n        const direction = this.horizontal ? 'right' : 'bottom';\n        this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n    }\n    /**\n     * Generates the string used in the gradient stylesheet properties\n     * @param colors array of colors\n     * @param splits array of splits on a scale of (0, 1)\n     */\n    gradientString(colors, splits) {\n        // add the 100%\n        splits.push(1);\n        const pairs = [];\n        colors.reverse().forEach((c, i) => {\n            pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n        });\n        return pairs.join(', ');\n    }\n}\nScaleLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nScaleLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: { valueRange: \"valueRange\", colors: \"colors\", height: \"height\", width: \"width\", horizontal: \"horizontal\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-scale-legend', template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"] }]\n        }], propDecorators: { valueRange: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }] } });\n\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nfunction formatLabel(label) {\n    if (label instanceof Date) {\n        label = label.toLocaleDateString();\n    }\n    else {\n        label = label.toLocaleString();\n    }\n    return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\nfunction escapeLabel(label) {\n    return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n        return {\n            '&': '&amp;',\n            // tslint:disable-next-line: quotemark\n            \"'\": '&#x27;',\n            '`': '&#x60;',\n            '\"': '&quot;',\n            '<': '&lt;',\n            '>': '&gt;'\n        }[match];\n    });\n}\n\nclass LegendEntryComponent {\n    constructor() {\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.toggle = new EventEmitter();\n    }\n    get trimmedLabel() {\n        return this.formattedLabel || '(empty)';\n    }\n    onMouseEnter() {\n        this.activate.emit({ name: this.label });\n    }\n    onMouseLeave() {\n        this.deactivate.emit({ name: this.label });\n    }\n}\nLegendEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLegendEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: { color: \"color\", label: \"label\", formattedLabel: \"formattedLabel\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", toggle: \"toggle\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, ngImport: i0, template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-charts-legend-entry',\n                    template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], formattedLabel: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], toggle: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LegendComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.horizontal = false;\n        this.labelClick = new EventEmitter();\n        this.labelActivate = new EventEmitter();\n        this.labelDeactivate = new EventEmitter();\n        this.legendEntries = [];\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cd.markForCheck();\n        this.legendEntries = this.getLegendEntries();\n    }\n    getLegendEntries() {\n        const items = [];\n        for (const label of this.data) {\n            const formattedLabel = formatLabel(label);\n            const idx = items.findIndex(i => {\n                return i.label === formattedLabel;\n            });\n            if (idx === -1) {\n                items.push({\n                    label,\n                    formattedLabel,\n                    color: this.colors.getColor(label)\n                });\n            }\n        }\n        return items;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.label === d.name;\n        });\n        return item !== undefined;\n    }\n    activate(item) {\n        this.labelActivate.emit(item);\n    }\n    deactivate(item) {\n        this.labelDeactivate.emit(item);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendComponent, selector: \"ngx-charts-legend\", inputs: { data: \"data\", title: \"title\", colors: \"colors\", height: \"height\", width: \"width\", activeEntries: \"activeEntries\", horizontal: \"horizontal\" }, outputs: { labelClick: \"labelClick\", labelActivate: \"labelActivate\", labelDeactivate: \"labelDeactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"], components: [{ type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: [\"color\", \"label\", \"formattedLabel\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"toggle\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-legend', template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }], labelClick: [{\n                type: Output\n            }], labelActivate: [{\n                type: Output\n            }], labelDeactivate: [{\n                type: Output\n            }] } });\n\nclass ChartComponent {\n    constructor() {\n        this.showLegend = false;\n        this.animations = true;\n        this.legendLabelClick = new EventEmitter();\n        this.legendLabelActivate = new EventEmitter();\n        this.legendLabelDeactivate = new EventEmitter();\n        this.LegendPosition = LegendPosition;\n        this.LegendType = LegendType;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        let legendColumns = 0;\n        if (this.showLegend) {\n            this.legendType = this.getLegendType();\n            if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n                if (this.legendType === LegendType.ScaleLegend) {\n                    legendColumns = 1;\n                }\n                else {\n                    legendColumns = 2;\n                }\n            }\n        }\n        const chartColumns = 12 - legendColumns;\n        this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n        this.legendWidth =\n            !this.legendOptions || this.legendOptions.position === LegendPosition.Right\n                ? Math.floor((this.view[0] * legendColumns) / 12.0)\n                : this.chartWidth;\n    }\n    getLegendType() {\n        return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n    }\n}\nChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ChartComponent, selector: \"ngx-charts-chart\", inputs: { view: \"view\", showLegend: \"showLegend\", legendOptions: \"legendOptions\", legendType: \"legendType\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { legendLabelClick: \"legendLabelClick\", legendLabelActivate: \"legendLabelActivate\", legendLabelDeactivate: \"legendLabelDeactivate\" }, providers: [TooltipService], usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `, isInline: true, components: [{ type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: [\"valueRange\", \"colors\", \"height\", \"width\", \"horizontal\"] }, { type: LegendComponent, selector: \"ngx-charts-legend\", inputs: [\"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"horizontal\"], outputs: [\"labelClick\", \"labelActivate\", \"labelDeactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    providers: [TooltipService],\n                    selector: 'ngx-charts-chart',\n                    template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { view: [{\n                type: Input\n            }], showLegend: [{\n                type: Input\n            }], legendOptions: [{\n                type: Input\n            }], legendType: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], legendLabelClick: [{\n                type: Output\n            }], legendLabelActivate: [{\n                type: Output\n            }], legendLabelDeactivate: [{\n                type: Output\n            }] } });\n\n/**\n * Visibility Observer\n */\nclass VisibilityObserver {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.visible = new EventEmitter();\n        this.isVisible = false;\n        this.runCheck();\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run(() => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        });\n    }\n    runCheck() {\n        const check = () => {\n            if (!this.element) {\n                return;\n            }\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular(() => {\n                    this.timeout = setTimeout(() => check(), 100);\n                });\n            }\n        };\n        this.zone.runOutsideAngular(() => {\n            this.timeout = setTimeout(() => check());\n        });\n    }\n}\nVisibilityObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nVisibilityObserver.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: VisibilityObserver, selector: \"visibility-observer\", outputs: { visible: \"visible\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'visibility-observer'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { visible: [{\n                type: Output\n            }] } });\n\nfunction isDate(value) {\n    return toString.call(value) === '[object Date]';\n}\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n    constructor(chartElement, zone, cd, platformId) {\n        this.chartElement = chartElement;\n        this.zone = zone;\n        this.cd = cd;\n        this.platformId = platformId;\n        this.scheme = 'cool';\n        this.schemeType = ScaleType.Ordinal;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.animations = false;\n        }\n    }\n    ngAfterViewInit() {\n        this.bindWindowResizeEvent();\n        // listen for visibility of the element for hidden by default scenario\n        this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n        this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        if (this.visibilityObserver) {\n            this.visibilityObserver.visible.unsubscribe();\n            this.visibilityObserver.destroy();\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.results) {\n            this.results = this.cloneData(this.results);\n        }\n        else {\n            this.results = [];\n        }\n        if (this.view) {\n            this.width = this.view[0];\n            this.height = this.view[1];\n        }\n        else {\n            const dims = this.getContainerDims();\n            if (dims) {\n                this.width = dims.width;\n                this.height = dims.height;\n            }\n        }\n        // default values if width or height are 0 or undefined\n        if (!this.width) {\n            this.width = 600;\n        }\n        if (!this.height) {\n            this.height = 400;\n        }\n        this.width = Math.floor(this.width);\n        this.height = Math.floor(this.height);\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    getContainerDims() {\n        let width;\n        let height;\n        const hostElem = this.chartElement.nativeElement;\n        if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n            // Get the container dimensions\n            const dims = hostElem.parentNode.getBoundingClientRect();\n            width = dims.width;\n            height = dims.height;\n        }\n        if (width && height) {\n            return { width, height };\n        }\n        return null;\n    }\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n    formatDates() {\n        for (let i = 0; i < this.results.length; i++) {\n            const g = this.results[i];\n            g.label = g.name;\n            if (isDate(g.label)) {\n                g.label = g.label.toLocaleDateString();\n            }\n            if (g.series) {\n                for (let j = 0; j < g.series.length; j++) {\n                    const d = g.series[j];\n                    d.label = d.name;\n                    if (isDate(d.label)) {\n                        d.label = d.label.toLocaleDateString();\n                    }\n                }\n            }\n        }\n    }\n    unbindEvents() {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    }\n    bindWindowResizeEvent() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const source = fromEvent(window, 'resize');\n        const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n            this.update();\n            if (this.cd) {\n                this.cd.markForCheck();\n            }\n        });\n        this.resizeSubscription = subscription;\n    }\n    /**\n     * Clones the data into a new object\n     *\n     * @memberOf BaseChart\n     */\n    cloneData(data) {\n        const results = [];\n        for (const item of data) {\n            const copy = {\n                name: item['name']\n            };\n            if (item['value'] !== undefined) {\n                copy['value'] = item['value'];\n            }\n            if (item['series'] !== undefined) {\n                copy['series'] = [];\n                for (const seriesItem of item['series']) {\n                    const seriesItemCopy = Object.assign({}, seriesItem);\n                    copy['series'].push(seriesItemCopy);\n                }\n            }\n            if (item['extra'] !== undefined) {\n                copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n            }\n            results.push(copy);\n        }\n        return results;\n    }\n}\nBaseChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBaseChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BaseChartComponent, selector: \"base-chart\", inputs: { results: \"results\", view: \"view\", scheme: \"scheme\", schemeType: \"schemeType\", customColors: \"customColors\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: ` <div></div> `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'base-chart',\n                    template: ` <div></div> `\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { results: [{\n                type: Input\n            }], view: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nvar Orientation;\n(function (Orientation) {\n    Orientation[\"Top\"] = \"top\";\n    Orientation[\"Bottom\"] = \"bottom\";\n    Orientation[\"Left\"] = \"left\";\n    Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n    constructor(element) {\n        this.textHeight = 25;\n        this.margin = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.strokeWidth = '0.01';\n        this.textAnchor = 'middle';\n        this.transform = '';\n        switch (this.orient) {\n            case Orientation.Top:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Bottom:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Left:\n                this.y = -(this.offset + this.textHeight + this.margin);\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            case Orientation.Right:\n                this.y = this.offset + this.margin;\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            default:\n        }\n    }\n}\nAxisLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAxisLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: { orient: \"orient\", label: \"label\", offset: \"offset\", width: \"width\", height: \"height\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-axis-label]',\n                    template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { orient: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }] } });\n\nfunction trimLabel(s, max = 16) {\n    if (typeof s !== 'string') {\n        if (typeof s === 'number') {\n            return s + '';\n        }\n        else {\n            return '';\n        }\n    }\n    s = s.trim();\n    if (s.length <= max) {\n        return s;\n    }\n    else {\n        return `${s.slice(0, max)}...`;\n    }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n    if (ticks.length > maxTicks) {\n        const reduced = [];\n        const modulus = Math.floor(ticks.length / maxTicks);\n        for (let i = 0; i < ticks.length; i++) {\n            if (i % modulus === 0) {\n                reduced.push(ticks[i]);\n            }\n        }\n        ticks = reduced;\n    }\n    return ticks;\n}\nfunction getTickLines(label, maxLength, maxLines) {\n    const labelString = (label || '').toString();\n    let totalLines = [];\n    if (/\\s/.test(labelString)) {\n        totalLines = labelString.split(/\\s+/).reduce((lines, line) => {\n            const last = (lines.pop() || '') + ' ';\n            return last.length + line.length > maxLength ? [...lines, last.trim(), line.trim()] : [...lines, last + line];\n        }, []);\n    }\n    else {\n        let startIndex = 0;\n        while (startIndex < labelString.length) {\n            totalLines.push(labelString.substring(startIndex, startIndex + maxLength));\n            startIndex += maxLength;\n        }\n    }\n    if (totalLines.length > maxLines) {\n        totalLines = totalLines.splice(0, maxLines);\n        totalLines[totalLines.length - 1] += '...';\n    }\n    return totalLines;\n}\n\nvar TextAnchor;\n(function (TextAnchor) {\n    TextAnchor[\"Start\"] = \"start\";\n    TextAnchor[\"Middle\"] = \"middle\";\n    TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.rotateTicks = true;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.verticalSpacing = 20;\n        this.rotateLabels = false;\n        this.innerTickSize = 6;\n        this.outerTickSize = 6;\n        this.tickPadding = 3;\n        this.textAnchor = TextAnchor.Middle;\n        this.maxTicksLength = 0;\n        this.maxAllowedLength = 16;\n        this.height = 0;\n        this.approxHeight = 10;\n        this.maxPossibleLengthForTickIfWrapped = 16;\n    }\n    get isWrapTicksSupported() {\n        return this.wrapTicks && this.scale.step;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.dimensionsChanged.emit({ height: this.approxHeight });\n            return;\n        }\n        const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n        if (height !== this.height) {\n            this.height = height;\n            this.dimensionsChanged.emit({ height: this.height });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            // eslint-disable-next-line prefer-spread\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n        this.adjustedScale = this.scale.bandwidth\n            ? function (d) {\n                return this.scale(d) + this.scale.bandwidth() * 0.5;\n            }\n            : this.scale;\n        this.textTransform = '';\n        if (angle && angle !== 0) {\n            this.textTransform = `rotate(${angle})`;\n            this.textAnchor = TextAnchor.End;\n            this.verticalSpacing = 10;\n        }\n        else {\n            this.textAnchor = TextAnchor.Middle;\n        }\n        setTimeout(() => this.updateDims());\n    }\n    getRotationAngle(ticks) {\n        let angle = 0;\n        this.maxTicksLength = 0;\n        for (let i = 0; i < ticks.length; i++) {\n            const tick = this.tickFormat(ticks[i]).toString();\n            let tickLength = tick.length;\n            if (this.trimTicks) {\n                tickLength = this.tickTrim(tick).length;\n            }\n            if (tickLength > this.maxTicksLength) {\n                this.maxTicksLength = tickLength;\n            }\n        }\n        const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n        const charWidth = 7; // need to measure this\n        const wordWidth = len * charWidth;\n        let baseWidth = wordWidth;\n        const maxBaseWidth = Math.floor(this.width / ticks.length);\n        // calculate optimal angle\n        while (baseWidth > maxBaseWidth && angle > -90) {\n            angle -= 30;\n            baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n        }\n        let labelHeight = 14;\n        if (this.isWrapTicksSupported) {\n            const longestTick = this.ticks.reduce((earlier, current) => (current.length > earlier.length ? current : earlier), '');\n            const tickLines = this.tickChunks(longestTick);\n            labelHeight = 14 * (tickLines.length || 1);\n            this.maxPossibleLengthForTickIfWrapped = this.getMaxPossibleLengthForTick(longestTick);\n        }\n        const requiredHeight = angle !== 0\n            ? Math.max(Math.abs(Math.sin((angle * Math.PI) / 180)) * this.maxTickLength * charWidth, 10)\n            : labelHeight;\n        this.approxHeight = Math.min(requiredHeight, 200);\n        return angle;\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(100);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickWidth) {\n        return Math.floor(this.width / tickWidth);\n    }\n    tickTransform(tick) {\n        return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    }\n    gridLineTransform() {\n        return `translate(0,${-this.verticalSpacing - 5})`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getMaxPossibleLengthForTick(longestLabel) {\n        if (this.scale.bandwidth) {\n            const averageCharacterWidth = 7; // approximate char width\n            const maxCharacters = Math.floor(this.scale.bandwidth() / averageCharacterWidth);\n            const truncatedText = longestLabel.slice(0, maxCharacters);\n            return Math.max(truncatedText.length, this.maxTickLength);\n        }\n        return this.maxTickLength;\n    }\n    tickChunks(label) {\n        if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n            const maxAllowedLines = 5;\n            let maxLines = this.rotateTicks ? Math.floor(this.scale.step() / 14) : maxAllowedLines;\n            if (maxLines <= 1) {\n                return [this.tickTrim(label)];\n            }\n            let possibleStringLength = Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength);\n            if (!isPlatformBrowser(this.platformId)) {\n                possibleStringLength = Math.floor(Math.min(this.approxHeight / maxAllowedLines, Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength)));\n            }\n            maxLines = Math.min(maxLines, maxAllowedLines);\n            const lines = getTickLines(label, possibleStringLength, maxLines < 1 ? 1 : maxLines);\n            return lines;\n        }\n        return [this.tickTrim(label)];\n    }\n}\nXAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nXAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineHeight: \"gridLineHeight\", width: \"width\", rotateTicks: \"rotateTicks\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineHeight: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass XAxisComponent {\n    constructor() {\n        this.rotateTicks = true;\n        this.showGridLines = false;\n        this.xOrient = Orientation.Bottom;\n        this.xAxisOffset = 0;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.xAxisClassName = 'x axis';\n        this.labelOffset = 0;\n        this.fill = 'none';\n        this.stroke = 'stroke';\n        this.tickStroke = '#ccc';\n        this.strokeWidth = 'none';\n        this.padding = 5;\n        this.orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n        if (typeof this.xAxisTickCount !== 'undefined') {\n            this.tickArguments = [this.xAxisTickCount];\n        }\n    }\n    emitTicksHeight({ height }) {\n        const newLabelOffset = height + 25 + 5;\n        if (newLabelOffset !== this.labelOffset) {\n            this.labelOffset = newLabelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ height });\n            }, 0);\n        }\n    }\n}\nXAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nXAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: { xScale: \"xScale\", dims: \"dims\", trimTicks: \"trimTicks\", rotateTicks: \"rotateTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", ticks: \"ticks\", xAxisTickCount: \"xAxisTickCount\", xOrient: \"xOrient\", xAxisOffset: \"xAxisOffset\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: XAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineHeight\", \"width\", \"rotateTicks\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis]',\n                    template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { xScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], xAxisTickCount: [{\n                type: Input\n            }], xOrient: [{\n                type: Input\n            }], xAxisOffset: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [XAxisTicksComponent]\n            }] } });\n\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n    let retval = '';\n    w = Math.floor(w);\n    h = Math.floor(h);\n    w = w === 0 ? 1 : w;\n    h = h === 0 ? 1 : h;\n    retval = `M${[x + r, y]}`;\n    retval += `h${w - 2 * r}`;\n    if (tr) {\n        retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n    }\n    else {\n        retval += `h${r}v${r}`;\n    }\n    retval += `v${h - 2 * r}`;\n    if (br) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n    }\n    else {\n        retval += `v${r}h${-r}`;\n    }\n    retval += `h${2 * r - w}`;\n    if (bl) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n    }\n    else {\n        retval += `h${-r}v${-r}`;\n    }\n    retval += `v${2 * r - h}`;\n    if (tl) {\n        retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n    }\n    else {\n        retval += `v${-r}h${r}`;\n    }\n    retval += `z`;\n    return retval;\n}\n\nclass YAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.showRefLabels = false;\n        this.showRefLines = false;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.innerTickSize = 6;\n        this.tickPadding = 3;\n        this.verticalSpacing = 20;\n        this.textAnchor = TextAnchor.Middle;\n        this.width = 0;\n        this.outerTickSize = 6;\n        this.rotateLabels = false;\n        this.referenceLineLength = 0;\n        this.Orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.width = this.getApproximateAxisWidth();\n            this.dimensionsChanged.emit({ width: this.width });\n            return;\n        }\n        const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n        if (width !== this.width) {\n            this.width = width;\n            this.dimensionsChanged.emit({ width });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n        this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            // eslint-disable-next-line prefer-spread\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        this.adjustedScale = scale.bandwidth\n            ? d => {\n                // position the tick to middle considering number of lines of the tick\n                const positionMiddle = scale(d) + scale.bandwidth() * 0.5;\n                if (this.wrapTicks && d.toString().length > this.maxTickLength) {\n                    const chunksLength = this.tickChunks(d).length;\n                    if (chunksLength === 1) {\n                        return positionMiddle;\n                    }\n                    const bandWidth = scale.bandwidth();\n                    const heightOfLines = chunksLength * 8;\n                    const availableFreeSpace = bandWidth * 0.5 - heightOfLines * 0.5;\n                    return scale(d) + availableFreeSpace;\n                }\n                return positionMiddle;\n            }\n            : scale;\n        if (this.showRefLines && this.referenceLines) {\n            this.setReferencelines();\n        }\n        switch (this.orient) {\n            case Orientation.Top:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Bottom:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Left:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.End;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            case Orientation.Right:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.Start;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            default:\n        }\n        setTimeout(() => this.updateDims());\n    }\n    setReferencelines() {\n        this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n        this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n        this.referenceLineLength = this.referenceLines.length;\n        this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n            false,\n            false,\n            false,\n            false\n        ]);\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(50);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickHeight) {\n        return Math.floor(this.height / tickHeight);\n    }\n    tickTransform(tick) {\n        return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n    }\n    gridLineTransform() {\n        return `translate(5,0)`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getApproximateAxisWidth() {\n        const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n        const charWidth = 7;\n        return maxChars * charWidth;\n    }\n    tickChunks(label) {\n        if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n            // for y-axis the width of the tick is fixed\n            const preferredWidth = this.maxTickLength;\n            const maxLines = Math.floor(this.scale.bandwidth() / 15);\n            if (maxLines <= 1) {\n                return [this.tickTrim(label)];\n            }\n            return getTickLines(label, preferredWidth, Math.min(maxLines, 5));\n        }\n        return [this.tickFormat(label)];\n    }\n}\nYAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nYAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineWidth: \"gridLineWidth\", height: \"height\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", showRefLines: \"showRefLines\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineWidth: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass YAxisComponent {\n    constructor() {\n        this.showGridLines = false;\n        this.yOrient = Orientation.Left;\n        this.yAxisOffset = 0;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.yAxisClassName = 'y axis';\n        this.labelOffset = 15;\n        this.fill = 'none';\n        this.stroke = '#CCC';\n        this.tickStroke = '#CCC';\n        this.strokeWidth = 1;\n        this.padding = 5;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.offset = -(this.yAxisOffset + this.padding);\n        if (this.yOrient === Orientation.Right) {\n            this.labelOffset = 65;\n            this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n        }\n        else {\n            this.transform = `translate(${this.offset} , 0)`;\n        }\n        if (this.yAxisTickCount !== undefined) {\n            this.tickArguments = [this.yAxisTickCount];\n        }\n    }\n    emitTicksWidth({ width }) {\n        if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n            this.labelOffset = width + this.labelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n        else if (width !== this.labelOffset) {\n            this.labelOffset = width;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n    }\n}\nYAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nYAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: { yScale: \"yScale\", dims: \"dims\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", ticks: \"ticks\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", yAxisTickCount: \"yAxisTickCount\", yOrient: \"yOrient\", referenceLines: \"referenceLines\", showRefLines: \"showRefLines\", showRefLabels: \"showRefLabels\", yAxisOffset: \"yAxisOffset\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: YAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineWidth\", \"height\", \"referenceLines\", \"showRefLabels\", \"showRefLines\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis]',\n                    template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { yScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], yAxisTickCount: [{\n                type: Input\n            }], yOrient: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], yAxisOffset: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [YAxisTicksComponent]\n            }] } });\n\nclass AxesModule {\n}\nAxesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAxesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent], imports: [CommonModule], exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent] });\nAxesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n                    exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n                }]\n        }] });\n\nvar StyleTypes;\n(function (StyleTypes) {\n    StyleTypes[\"popover\"] = \"popover\";\n    StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n(function (ShowTypes) {\n    ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n    ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n    ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n    constructor(tooltipService, viewContainerRef, renderer) {\n        this.tooltipService = tooltipService;\n        this.viewContainerRef = viewContainerRef;\n        this.renderer = renderer;\n        this.tooltipCssClass = '';\n        this.tooltipAppendToBody = true;\n        this.tooltipSpacing = 10;\n        this.tooltipDisabled = false;\n        this.tooltipShowCaret = true;\n        this.tooltipPlacement = PlacementTypes.Top;\n        this.tooltipAlignment = PlacementTypes.Center;\n        this.tooltipType = StyleTypes.popover;\n        this.tooltipCloseOnClickOutside = true;\n        this.tooltipCloseOnMouseLeave = true;\n        this.tooltipHideTimeout = 300;\n        this.tooltipShowTimeout = 100;\n        this.tooltipShowEvent = ShowTypes.all;\n        this.tooltipImmediateExit = false;\n        this.show = new EventEmitter();\n        this.hide = new EventEmitter();\n    }\n    get listensForFocus() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n    }\n    get listensForHover() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n    }\n    ngOnDestroy() {\n        this.hideTooltip(true);\n    }\n    onFocus() {\n        if (this.listensForFocus) {\n            this.showTooltip();\n        }\n    }\n    onBlur() {\n        if (this.listensForFocus) {\n            this.hideTooltip(true);\n        }\n    }\n    onMouseEnter() {\n        if (this.listensForHover) {\n            this.showTooltip();\n        }\n    }\n    onMouseLeave(target) {\n        if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n            clearTimeout(this.timeout);\n            if (this.component) {\n                const contentDom = this.component.instance.element.nativeElement;\n                const contains = contentDom.contains(target);\n                if (contains)\n                    return;\n            }\n            this.hideTooltip(this.tooltipImmediateExit);\n        }\n    }\n    onMouseClick() {\n        if (this.listensForHover) {\n            this.hideTooltip(true);\n        }\n    }\n    showTooltip(immediate) {\n        if (this.component || this.tooltipDisabled)\n            return;\n        const time = immediate\n            ? 0\n            : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 400 : 0);\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.tooltipService.destroyAll();\n            const options = this.createBoundOptions();\n            this.component = this.tooltipService.create(options);\n            // add a tiny timeout to avoid event re-triggers\n            setTimeout(() => {\n                if (this.component) {\n                    this.addHideListeners(this.component.instance.element.nativeElement);\n                }\n            }, 10);\n            this.show.emit(true);\n        }, time);\n    }\n    addHideListeners(tooltip) {\n        // on mouse enter, cancel the hide triggered by the leave\n        this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n            clearTimeout(this.timeout);\n        });\n        // content mouse leave listener\n        if (this.tooltipCloseOnMouseLeave) {\n            this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n                this.hideTooltip(this.tooltipImmediateExit);\n            });\n        }\n        // content close on click outside\n        if (this.tooltipCloseOnClickOutside) {\n            this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n                const contains = tooltip.contains(event.target);\n                if (!contains)\n                    this.hideTooltip();\n            });\n        }\n    }\n    hideTooltip(immediate = false) {\n        if (!this.component)\n            return;\n        const destroyFn = () => {\n            // remove events\n            if (this.mouseLeaveContentEvent)\n                this.mouseLeaveContentEvent();\n            if (this.mouseEnterContentEvent)\n                this.mouseEnterContentEvent();\n            if (this.documentClickEvent)\n                this.documentClickEvent();\n            // emit events\n            this.hide.emit(true);\n            // destroy component\n            this.tooltipService.destroy(this.component);\n            this.component = undefined;\n        };\n        clearTimeout(this.timeout);\n        if (!immediate) {\n            this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n        }\n        else {\n            destroyFn();\n        }\n    }\n    createBoundOptions() {\n        return {\n            title: this.tooltipTitle,\n            template: this.tooltipTemplate,\n            host: this.viewContainerRef.element,\n            placement: this.tooltipPlacement,\n            alignment: this.tooltipAlignment,\n            type: this.tooltipType,\n            showCaret: this.tooltipShowCaret,\n            cssClass: this.tooltipCssClass,\n            spacing: this.tooltipSpacing,\n            context: this.tooltipContext\n        };\n    }\n}\nTooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, deps: [{ token: TooltipService }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\nTooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: { tooltipCssClass: \"tooltipCssClass\", tooltipTitle: \"tooltipTitle\", tooltipAppendToBody: \"tooltipAppendToBody\", tooltipSpacing: \"tooltipSpacing\", tooltipDisabled: \"tooltipDisabled\", tooltipShowCaret: \"tooltipShowCaret\", tooltipPlacement: \"tooltipPlacement\", tooltipAlignment: \"tooltipAlignment\", tooltipType: \"tooltipType\", tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\", tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\", tooltipHideTimeout: \"tooltipHideTimeout\", tooltipShowTimeout: \"tooltipShowTimeout\", tooltipTemplate: \"tooltipTemplate\", tooltipShowEvent: \"tooltipShowEvent\", tooltipContext: \"tooltipContext\", tooltipImmediateExit: \"tooltipImmediateExit\" }, outputs: { show: \"show\", hide: \"hide\" }, host: { listeners: { \"focusin\": \"onFocus()\", \"blur\": \"onBlur()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave($event.target)\", \"click\": \"onMouseClick()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-tooltip]' }]\n        }], ctorParameters: function () { return [{ type: TooltipService }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { tooltipCssClass: [{\n                type: Input\n            }], tooltipTitle: [{\n                type: Input\n            }], tooltipAppendToBody: [{\n                type: Input\n            }], tooltipSpacing: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipShowCaret: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipAlignment: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], tooltipCloseOnClickOutside: [{\n                type: Input\n            }], tooltipCloseOnMouseLeave: [{\n                type: Input\n            }], tooltipHideTimeout: [{\n                type: Input\n            }], tooltipShowTimeout: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipShowEvent: [{\n                type: Input\n            }], tooltipContext: [{\n                type: Input\n            }], tooltipImmediateExit: [{\n                type: Input\n            }], show: [{\n                type: Output\n            }], hide: [{\n                type: Output\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focusin']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave', ['$event.target']]\n            }], onMouseClick: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\n\nclass TooltipModule {\n}\nTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, declarations: [TooltipContentComponent, TooltipDirective], imports: [CommonModule], exports: [TooltipContentComponent, TooltipDirective] });\nTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, providers: [InjectionService, TooltipService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TooltipContentComponent, TooltipDirective],\n                    providers: [InjectionService, TooltipService],\n                    exports: [TooltipContentComponent, TooltipDirective],\n                    imports: [CommonModule],\n                    entryComponents: [TooltipContentComponent]\n                }]\n        }] });\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nfunction id() {\n    let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n    // append a 'a' because neo gets mad\n    newId = `a${newId}`;\n    // ensure not already used\n    if (!cache[newId]) {\n        cache[newId] = true;\n        return newId;\n    }\n    return id();\n}\n\nvar BarOrientation;\n(function (BarOrientation) {\n    BarOrientation[\"Vertical\"] = \"vertical\";\n    BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n    constructor() {\n        this.orientation = BarOrientation.Vertical;\n    }\n    ngOnChanges(changes) {\n        this.x1 = '0%';\n        this.x2 = '0%';\n        this.y1 = '0%';\n        this.y2 = '0%';\n        if (this.orientation === BarOrientation.Horizontal) {\n            this.x2 = '100%';\n        }\n        else if (this.orientation === BarOrientation.Vertical) {\n            this.y1 = '100%';\n        }\n    }\n}\nSvgLinearGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgLinearGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: { orientation: \"orientation\", name: \"name\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-linear-gradient]',\n                    template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { orientation: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass CircleComponent {\n    constructor() {\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    ngOnChanges(changes) {\n        this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n        this.classNames += 'circle';\n    }\n}\nCircleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCircleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: { cx: \"cx\", cy: \"cy\", r: \"r\", fill: \"fill\", stroke: \"stroke\", data: \"data\", classNames: \"classNames\", circleOpacity: \"circleOpacity\", pointerEvents: \"pointerEvents\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"click\": \"onClick()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle]',\n                    template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], r: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], classNames: [{\n                type: Input\n            }], circleOpacity: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onClick: [{\n                type: HostListener,\n                args: ['click']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar SeriesType;\n(function (SeriesType) {\n    SeriesType[\"Standard\"] = \"standard\";\n    SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\nclass CircleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = SeriesType.Standard;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barVisible = false;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges() {\n        this.update();\n    }\n    update() {\n        this.circle = this.getActiveCircle();\n    }\n    getActiveCircle() {\n        const indexActiveDataPoint = this.data.series.findIndex(d => {\n            const label = d.name;\n            return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n        });\n        if (indexActiveDataPoint === -1) {\n            // No valid point is 'active/hovered over' at this moment.\n            return undefined;\n        }\n        return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n    }\n    mapDataPointToCircle(d, i) {\n        const seriesName = this.data.name;\n        const value = d.value;\n        const label = d.name;\n        const tooltipLabel = formatLabel(label);\n        let cx;\n        if (this.scaleType === ScaleType.Time) {\n            cx = this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            cx = this.xScale(Number(label));\n        }\n        else {\n            cx = this.xScale(label);\n        }\n        const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n        const radius = 5;\n        const height = this.yScale.range()[0] - cy;\n        const opacity = 1;\n        let color;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            if (this.type === SeriesType.Standard) {\n                color = this.colors.getColor(value);\n            }\n            else {\n                color = this.colors.getColor(d.d1);\n            }\n        }\n        else {\n            color = this.colors.getColor(seriesName);\n        }\n        const data = Object.assign({}, d, {\n            series: seriesName,\n            value,\n            name: label\n        });\n        return {\n            classNames: [`circle-data-${i}`],\n            value,\n            label,\n            data,\n            cx,\n            cy,\n            radius,\n            height,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            gradientStops: this.getGradientStops(color),\n            min: d.min,\n            max: d.max\n        };\n    }\n    getTooltipText({ tooltipLabel, value, seriesName, min, max }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n    }\n    getTooltipMinMaxText(min, max) {\n        if (min !== undefined || max !== undefined) {\n            let result = ' (';\n            if (min !== undefined) {\n                if (max === undefined) {\n                    result += '≥';\n                }\n                result += min.toLocaleString();\n                if (max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (max !== undefined) {\n                result += '≤';\n            }\n            if (max !== undefined) {\n                result += max.toLocaleString();\n            }\n            result += ')';\n            return result;\n        }\n        else {\n            return '';\n        }\n    }\n    getGradientStops(color) {\n        return [\n            {\n                offset: 0,\n                color,\n                opacity: 0.2\n            },\n            {\n                offset: 100,\n                color,\n                opacity: 1\n            }\n        ];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    activateCircle() {\n        this.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle() {\n        this.barVisible = false;\n        this.circle.opacity = 0;\n        this.deactivate.emit({ name: this.data.name });\n    }\n}\nCircleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCircleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: { data: \"data\", type: \"type\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 1 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle-series]',\n                    template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 1 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { data: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GridPanelComponent {\n}\nGridPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: { width: \"width\", height: \"height\", x: \"x\", y: \"y\" }, ngImport: i0, template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel]',\n                    template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }] } });\n\nvar ClassEnum;\n(function (ClassEnum) {\n    ClassEnum[\"Odd\"] = \"odd\";\n    ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\nclass GridPanelSeriesComponent {\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.gridPanels = this.getGridPanels();\n    }\n    getGridPanels() {\n        return this.data.map(d => {\n            let offset;\n            let width;\n            let height;\n            let x;\n            let y;\n            let className = ClassEnum.Odd;\n            if (this.orient === BarOrientation.Vertical) {\n                const position = this.xScale(d.name);\n                const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n                width = this.xScale.bandwidth() + offset;\n                height = this.dims.height;\n                x = this.xScale(d.name) - offset / 2;\n                y = 0;\n            }\n            else if (this.orient === BarOrientation.Horizontal) {\n                const position = this.yScale(d.name);\n                const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n                width = this.dims.width;\n                height = this.yScale.bandwidth() + offset;\n                x = 0;\n                y = this.yScale(d.name) - offset / 2;\n            }\n            return {\n                name: d.name,\n                class: className,\n                height,\n                width,\n                x,\n                y\n            };\n        });\n    }\n}\nGridPanelSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: { data: \"data\", dims: \"dims\", xScale: \"xScale\", yScale: \"yScale\", orient: \"orient\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: [\"width\", \"height\", \"x\", \"y\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel-series]',\n                    template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }] } });\n\nclass SvgRadialGradientComponent {\n    constructor() {\n        this.endOpacity = 1;\n        this.cx = 0;\n        this.cy = 0;\n    }\n    get stops() {\n        return this.stopsInput || this.stopsDefault;\n    }\n    set stops(value) {\n        this.stopsInput = value;\n    }\n    ngOnChanges(changes) {\n        this.r = '30%';\n        if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n            this.stopsDefault = [\n                {\n                    offset: 0,\n                    color: this.color,\n                    opacity: this.startOpacity\n                },\n                {\n                    offset: 100,\n                    color: this.color,\n                    opacity: this.endOpacity\n                }\n            ];\n        }\n    }\n}\nSvgRadialGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgRadialGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: { color: \"color\", name: \"name\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", cx: \"cx\", cy: \"cy\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-radial-gradient]',\n                    template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass AreaComponent {\n    constructor(element) {\n        this.opacity = 1;\n        this.startOpacity = 0.5;\n        this.endOpacity = 1;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.animationsLoaded = false;\n        this.hasGradient = false;\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        if (!this.animationsLoaded) {\n            this.loadAnimation();\n            this.animationsLoaded = true;\n        }\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n    }\n    loadAnimation() {\n        this.areaPath = this.startingPath;\n        setTimeout(this.updatePathEl.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.area');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: this.endOpacity\n            }\n        ];\n    }\n}\nAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: { data: \"data\", path: \"path\", startingPath: \"startingPath\", fill: \"fill\", opacity: \"opacity\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", gradient: \"gradient\", stops: \"stops\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area]',\n                    template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], path: [{\n                type: Input\n            }], startingPath: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\n// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n    const startVal = Number(countFrom);\n    const endVal = Number(countTo);\n    const countDown = startVal > endVal;\n    const decimals = Math.max(0, countDecimals);\n    const dec = Math.pow(10, decimals);\n    const duration = Number(countDuration) * 1000;\n    let startTime;\n    function runCount(timestamp) {\n        let frameVal;\n        const progress = timestamp - startTime;\n        if (countDown) {\n            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n        }\n        else {\n            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n        }\n        if (countDown) {\n            frameVal = frameVal < endVal ? endVal : frameVal;\n        }\n        else {\n            frameVal = frameVal > endVal ? endVal : frameVal;\n        }\n        frameVal = Math.round(frameVal * dec) / dec;\n        const tick = progress < duration;\n        callback({\n            value: frameVal,\n            progress,\n            timestamp,\n            finished: !tick\n        });\n        if (tick) {\n            return requestAnimationFrame(val => runCount(val));\n        }\n    }\n    return requestAnimationFrame(timestamp => {\n        startTime = timestamp;\n        return runCount(timestamp);\n    });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\nfunction decimalChecker(countTo) {\n    const endVal = Number(countTo);\n    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n        return 2;\n    }\n    return 0;\n}\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\nclass CountUpDirective {\n    constructor(cd, element) {\n        this.cd = cd;\n        this.countDuration = 1;\n        this.countPrefix = '';\n        this.countSuffix = '';\n        this.countChange = new EventEmitter();\n        this.countFinish = new EventEmitter();\n        this.value = '';\n        this._countDecimals = 0;\n        this._countTo = 0;\n        this._countFrom = 0;\n        this.nativeElement = element.nativeElement;\n    }\n    set countDecimals(val) {\n        this._countDecimals = val;\n    }\n    get countDecimals() {\n        if (this._countDecimals)\n            return this._countDecimals;\n        return decimalChecker(this.countTo);\n    }\n    set countTo(val) {\n        this._countTo = parseFloat(val);\n        this.start();\n    }\n    get countTo() {\n        return this._countTo;\n    }\n    set countFrom(val) {\n        this._countFrom = parseFloat(val);\n        this.start();\n    }\n    get countFrom() {\n        return this._countFrom;\n    }\n    ngOnDestroy() {\n        cancelAnimationFrame(this.animationReq);\n    }\n    start() {\n        cancelAnimationFrame(this.animationReq);\n        const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n        const callback = ({ value, progress, finished }) => {\n            this.value = valueFormatting(value);\n            this.cd.markForCheck();\n            if (!finished)\n                this.countChange.emit({ value: this.value, progress });\n            if (finished)\n                this.countFinish.emit({ value: this.value, progress });\n        };\n        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n    }\n}\nCountUpDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nCountUpDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: { countDuration: \"countDuration\", countPrefix: \"countPrefix\", countSuffix: \"countSuffix\", valueFormatting: \"valueFormatting\", countDecimals: \"countDecimals\", countTo: \"countTo\", countFrom: \"countFrom\" }, outputs: { countChange: \"countChange\", countFinish: \"countFinish\" }, ngImport: i0, template: ` {{ value }} `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ngx-charts-count-up]',\n                    template: ` {{ value }} `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { countDuration: [{\n                type: Input\n            }], countPrefix: [{\n                type: Input\n            }], countSuffix: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], countDecimals: [{\n                type: Input\n            }], countTo: [{\n                type: Input\n            }], countFrom: [{\n                type: Input\n            }], countChange: [{\n                type: Output\n            }], countFinish: [{\n                type: Output\n            }] } });\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root;\nif (typeof window !== 'undefined') {\n    root = window;\n}\nelse if (typeof global !== 'undefined') {\n    root = global;\n}\n// tslint:disable-next-line:variable-name\nconst MouseEvent = root.MouseEvent;\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n    // Calling new of an event does not work correctly on IE. The following is a tested workaround\n    // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n    if (typeof MouseEvent === 'function') {\n        // Sane browsers\n        return new MouseEvent(name, { bubbles, cancelable });\n    }\n    else {\n        // IE\n        const event = document.createEvent('MouseEvent');\n        event.initEvent(name, bubbles, cancelable);\n        return event;\n    }\n}\n\nclass TooltipArea {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.anchorOpacity = 0;\n        this.anchorPos = -1;\n        this.anchorValues = [];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.showPercentage = false;\n        this.tooltipDisabled = false;\n        this.hover = new EventEmitter();\n    }\n    getValues(xVal) {\n        const results = [];\n        for (const group of this.results) {\n            const item = group.series.find(d => d.name.toString() === xVal.toString());\n            let groupName = group.name;\n            if (groupName instanceof Date) {\n                groupName = groupName.toLocaleDateString();\n            }\n            if (item) {\n                const label = item.name;\n                let val = item.value;\n                if (this.showPercentage) {\n                    val = (item.d1 - item.d0).toFixed(2) + '%';\n                }\n                let color;\n                if (this.colors.scaleType === ScaleType.Linear) {\n                    let v = val;\n                    if (item.d1) {\n                        v = item.d1;\n                    }\n                    color = this.colors.getColor(v);\n                }\n                else {\n                    color = this.colors.getColor(group.name);\n                }\n                const data = Object.assign({}, item, {\n                    value: val,\n                    name: label,\n                    series: groupName,\n                    min: item.min,\n                    max: item.max,\n                    color\n                });\n                results.push(data);\n            }\n        }\n        return results;\n    }\n    mouseMove(event) {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const xPos = event.pageX - event.target.getBoundingClientRect().left;\n        const closestIndex = this.findClosestPointIndex(xPos);\n        const closestPoint = this.xSet[closestIndex];\n        this.anchorPos = this.xScale(closestPoint);\n        this.anchorPos = Math.max(0, this.anchorPos);\n        this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n        this.anchorValues = this.getValues(closestPoint);\n        if (this.anchorPos !== this.lastAnchorPos) {\n            const ev = createMouseEvent('mouseleave');\n            this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n            this.anchorOpacity = 0.7;\n            this.hover.emit({\n                value: closestPoint\n            });\n            this.showTooltip();\n            this.lastAnchorPos = this.anchorPos;\n        }\n    }\n    findClosestPointIndex(xPos) {\n        let minIndex = 0;\n        let maxIndex = this.xSet.length - 1;\n        let minDiff = Number.MAX_VALUE;\n        let closestIndex = 0;\n        while (minIndex <= maxIndex) {\n            const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n            const currentElement = this.xScale(this.xSet[currentIndex]);\n            const curDiff = Math.abs(currentElement - xPos);\n            if (curDiff < minDiff) {\n                minDiff = curDiff;\n                closestIndex = currentIndex;\n            }\n            if (currentElement < xPos) {\n                minIndex = currentIndex + 1;\n            }\n            else if (currentElement > xPos) {\n                maxIndex = currentIndex - 1;\n            }\n            else {\n                minDiff = 0;\n                closestIndex = currentIndex;\n                break;\n            }\n        }\n        return closestIndex;\n    }\n    showTooltip() {\n        const event = createMouseEvent('mouseenter');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    }\n    hideTooltip() {\n        const event = createMouseEvent('mouseleave');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n        this.anchorOpacity = 0;\n        this.lastAnchorPos = -1;\n    }\n    getToolTipText(tooltipItem) {\n        let result = '';\n        if (tooltipItem.series !== undefined) {\n            result += tooltipItem.series;\n        }\n        else {\n            result += '???';\n        }\n        result += ': ';\n        if (tooltipItem.value !== undefined) {\n            result += tooltipItem.value.toLocaleString();\n        }\n        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n            result += ' (';\n            if (tooltipItem.min !== undefined) {\n                if (tooltipItem.max === undefined) {\n                    result += '≥';\n                }\n                result += tooltipItem.min.toLocaleString();\n                if (tooltipItem.max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (tooltipItem.max !== undefined) {\n                result += '≤';\n            }\n            if (tooltipItem.max !== undefined) {\n                result += tooltipItem.max.toLocaleString();\n            }\n            result += ')';\n        }\n        return result;\n    }\n}\nTooltipArea.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipArea.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: { dims: \"dims\", xSet: \"xSet\", xScale: \"xScale\", yScale: \"yScale\", results: \"results\", colors: \"colors\", showPercentage: \"showPercentage\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { hover: \"hover\" }, viewQueries: [{ propertyName: \"tooltipAnchor\", first: true, predicate: [\"tooltipAnchor\"], descendants: true }], ngImport: i0, template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition('inactive => active', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 0.7 }))\n            ]),\n            transition('active => inactive', [\n                style({\n                    opacity: 0.7\n                }),\n                animate(250, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tooltip-area]',\n                    template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition('inactive => active', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 0.7 }))\n                            ]),\n                            transition('active => inactive', [\n                                style({\n                                    opacity: 0.7\n                                }),\n                                animate(250, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { dims: [{\n                type: Input\n            }], xSet: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], showPercentage: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], hover: [{\n                type: Output\n            }], tooltipAnchor: [{\n                type: ViewChild,\n                args: ['tooltipAnchor', { static: false }]\n            }] } });\n\nclass Timeline {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.height = 50;\n        this.select = new EventEmitter();\n        this.onDomainChange = new EventEmitter();\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n        if (!this.initialized) {\n            this.addBrush();\n            this.initialized = true;\n        }\n    }\n    update() {\n        this.dims = this.getDims();\n        this.height = this.dims.height;\n        const offsetY = this.view[1] - this.height;\n        this.xDomain = this.getXDomain();\n        this.xScale = this.getXScale();\n        if (this.brush) {\n            this.updateBrush();\n        }\n        this.transform = `translate(0 , ${offsetY})`;\n        this.filterId = 'filter' + id().toString();\n        this.filter = `url(#${this.filterId})`;\n        this.cd.markForCheck();\n    }\n    getXDomain() {\n        let values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else {\n            domain = values;\n        }\n        return domain;\n    }\n    getXScale() {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n        }\n        return scale;\n    }\n    addBrush() {\n        if (this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush = brushX()\n            .extent([\n            [0, 0],\n            [width, height]\n        ])\n            .on('brush end', ({ selection }) => {\n            const newSelection = selection || this.xScale.range();\n            const newDomain = newSelection.map(this.xScale.invert);\n            this.onDomainChange.emit(newDomain);\n            this.cd.markForCheck();\n        });\n        select(this.element).select('.brush').call(this.brush);\n    }\n    updateBrush() {\n        if (!this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush.extent([\n            [0, 0],\n            [width, height]\n        ]);\n        select(this.element).select('.brush').call(this.brush);\n        // clear hardcoded properties so they can be defined by CSS\n        select(this.element)\n            .select('.selection')\n            .attr('fill', undefined)\n            .attr('stroke', undefined)\n            .attr('fill-opacity', undefined);\n        this.cd.markForCheck();\n    }\n    getDims() {\n        const width = this.view[0];\n        const dims = {\n            width,\n            height: this.height\n        };\n        return dims;\n    }\n}\nTimeline.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTimeline.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: { view: \"view\", results: \"results\", scheme: \"scheme\", customColors: \"customColors\", legend: \"legend\", autoScale: \"autoScale\", scaleType: \"scaleType\", height: \"height\" }, outputs: { select: \"select\", onDomainChange: \"onDomainChange\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, isInline: true, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-timeline]', template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { view: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], onDomainChange: [{\n                type: Output\n            }] } });\n\nclass AdvancedLegendComponent {\n    constructor() {\n        this.label = 'Total';\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.legendItems = [];\n        this.labelFormatting = label => label;\n        this.percentageFormatting = percentage => percentage;\n        this.defaultValueFormatting = value => value.toLocaleString();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getTotal() {\n        return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n    }\n    update() {\n        this.total = this.getTotal();\n        this.roundedTotal = this.total;\n        this.legendItems = this.getLegendItems();\n    }\n    getLegendItems() {\n        return this.data.map(d => {\n            const label = formatLabel(d.name);\n            const value = d.value;\n            const color = this.colors.getColor(label);\n            const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n            const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n            return {\n                _value: value,\n                data: d,\n                value,\n                color,\n                label: formattedLabel,\n                displayLabel: trimLabel(formattedLabel, 20),\n                origialLabel: d.name,\n                percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n            };\n        });\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nAdvancedLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAdvancedLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: { width: \"width\", data: \"data\", colors: \"colors\", label: \"label\", animations: \"animations\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"], components: [{ type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-legend', template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"] }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nconst COMPONENTS = [\n    AreaComponent,\n    BaseChartComponent,\n    CountUpDirective,\n    TooltipArea,\n    ChartComponent,\n    LegendComponent,\n    LegendEntryComponent,\n    ScaleLegendComponent,\n    CircleComponent,\n    CircleSeriesComponent,\n    GridPanelComponent,\n    GridPanelSeriesComponent,\n    SvgLinearGradientComponent,\n    SvgRadialGradientComponent,\n    Timeline,\n    AdvancedLegendComponent\n];\nclass ChartCommonModule {\n}\nChartCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nChartCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, declarations: [AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver], imports: [CommonModule, AxesModule, TooltipModule], exports: [CommonModule, AxesModule, TooltipModule, AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver] });\nChartCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, AxesModule, TooltipModule],\n                    declarations: [...COMPONENTS, VisibilityObserver],\n                    exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n                }]\n        }] });\n\nfunction calculateViewDimensions({ width, height, margins, showXAxis = false, showYAxis = false, xAxisHeight = 0, yAxisWidth = 0, showXLabel = false, showYLabel = false, showLegend = false, legendType = ScaleType.Ordinal, legendPosition = LegendPosition.Right, columns = 12 }) {\n    let xOffset = margins[3];\n    let chartWidth = width;\n    let chartHeight = height - margins[0] - margins[2];\n    if (showLegend && legendPosition === LegendPosition.Right) {\n        if (legendType === ScaleType.Ordinal) {\n            columns -= 2;\n        }\n        else {\n            columns -= 1;\n        }\n    }\n    chartWidth = (chartWidth * columns) / 12;\n    chartWidth = chartWidth - margins[1] - margins[3];\n    if (showXAxis) {\n        chartHeight -= 5;\n        chartHeight -= xAxisHeight;\n        if (showXLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartHeight -= offset;\n        }\n    }\n    if (showYAxis) {\n        chartWidth -= 5;\n        chartWidth -= yAxisWidth;\n        xOffset += yAxisWidth;\n        xOffset += 10;\n        if (showYLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartWidth -= offset;\n            xOffset += offset;\n        }\n    }\n    chartWidth = Math.max(0, chartWidth);\n    chartHeight = Math.max(0, chartHeight);\n    return {\n        width: Math.floor(chartWidth),\n        height: Math.floor(chartHeight),\n        xOffset: Math.floor(xOffset)\n    };\n}\n\nconst colorSets = [\n    {\n        name: 'vivid',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#647c8a',\n            '#3f51b5',\n            '#2196f3',\n            '#00b862',\n            '#afdf0a',\n            '#a7b61a',\n            '#f3e562',\n            '#ff9800',\n            '#ff5722',\n            '#ff4514'\n        ]\n    },\n    {\n        name: 'natural',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#bf9d76',\n            '#e99450',\n            '#d89f59',\n            '#f2dfa7',\n            '#a5d7c6',\n            '#7794b1',\n            '#afafaf',\n            '#707160',\n            '#ba9383',\n            '#d9d5c3'\n        ]\n    },\n    {\n        name: 'cool',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#a8385d',\n            '#7aa3e5',\n            '#a27ea8',\n            '#aae3f5',\n            '#adcded',\n            '#a95963',\n            '#8796c0',\n            '#7ed3ed',\n            '#50abcc',\n            '#ad6886'\n        ]\n    },\n    {\n        name: 'fire',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n    },\n    {\n        name: 'solar',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#fff8e1',\n            '#ffecb3',\n            '#ffe082',\n            '#ffd54f',\n            '#ffca28',\n            '#ffc107',\n            '#ffb300',\n            '#ffa000',\n            '#ff8f00',\n            '#ff6f00'\n        ]\n    },\n    {\n        name: 'air',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e1f5fe',\n            '#b3e5fc',\n            '#81d4fa',\n            '#4fc3f7',\n            '#29b6f6',\n            '#03a9f4',\n            '#039be5',\n            '#0288d1',\n            '#0277bd',\n            '#01579b'\n        ]\n    },\n    {\n        name: 'aqua',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e0f7fa',\n            '#b2ebf2',\n            '#80deea',\n            '#4dd0e1',\n            '#26c6da',\n            '#00bcd4',\n            '#00acc1',\n            '#0097a7',\n            '#00838f',\n            '#006064'\n        ]\n    },\n    {\n        name: 'flame',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#A10A28',\n            '#D3342D',\n            '#EF6D49',\n            '#FAAD67',\n            '#FDDE90',\n            '#DBED91',\n            '#A9D770',\n            '#6CBA67',\n            '#2C9653',\n            '#146738'\n        ]\n    },\n    {\n        name: 'ocean',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#1D68FB',\n            '#33C0FC',\n            '#4AFFFE',\n            '#AFFFFF',\n            '#FFFC63',\n            '#FDBD2D',\n            '#FC8A25',\n            '#FA4F1E',\n            '#FA141B',\n            '#BA38D1'\n        ]\n    },\n    {\n        name: 'forest',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#55C22D',\n            '#C1F33D',\n            '#3CC099',\n            '#AFFFFF',\n            '#8CFC9D',\n            '#76CFFA',\n            '#BA60FB',\n            '#EE6490',\n            '#C42A1C',\n            '#FC9F32'\n        ]\n    },\n    {\n        name: 'horizon',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2597FB',\n            '#65EBFD',\n            '#99FDD0',\n            '#FCEE4B',\n            '#FEFCFA',\n            '#FDD6E3',\n            '#FCB1A8',\n            '#EF6F7B',\n            '#CB96E8',\n            '#EFDEE0'\n        ]\n    },\n    {\n        name: 'neons',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FF3333',\n            '#FF33FF',\n            '#CC33FF',\n            '#0000FF',\n            '#33CCFF',\n            '#33FFFF',\n            '#33FF66',\n            '#CCFF33',\n            '#FFCC00',\n            '#FF6600'\n        ]\n    },\n    {\n        name: 'picnic',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FAC51D',\n            '#66BD6D',\n            '#FAA026',\n            '#29BB9C',\n            '#E96B56',\n            '#55ACD2',\n            '#B7332F',\n            '#2C83C9',\n            '#9166B8',\n            '#92E7E8'\n        ]\n    },\n    {\n        name: 'night',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2B1B5A',\n            '#501356',\n            '#183356',\n            '#28203F',\n            '#391B3C',\n            '#1E2B3C',\n            '#120634',\n            '#2D0432',\n            '#051932',\n            '#453080',\n            '#75267D',\n            '#2C507D',\n            '#4B3880',\n            '#752F7D',\n            '#35547D'\n        ]\n    },\n    {\n        name: 'nightLights',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#4e31a5',\n            '#9c25a7',\n            '#3065ab',\n            '#57468b',\n            '#904497',\n            '#46648b',\n            '#32118d',\n            '#a00fb3',\n            '#1052a2',\n            '#6e51bd',\n            '#b63cc3',\n            '#6c97cb',\n            '#8671c1',\n            '#b455be',\n            '#7496c3'\n        ]\n    }\n];\n\nclass ColorHelper {\n    constructor(scheme, type, domain, customColors) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        this.colorDomain = scheme.domain;\n        this.scaleType = type;\n        this.domain = domain;\n        this.customColors = customColors;\n        this.scale = this.generateColorScheme(scheme, type, this.domain);\n    }\n    generateColorScheme(scheme, type, domain) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        let colorScale;\n        switch (type) {\n            case ScaleType.Quantile:\n                colorScale = scaleQuantile()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Ordinal:\n                colorScale = scaleOrdinal()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Linear:\n                {\n                    const colorDomain = [...scheme.domain];\n                    if (colorDomain.length === 1) {\n                        colorDomain.push(colorDomain[0]);\n                        this.colorDomain = colorDomain;\n                    }\n                    const points = range(0, 1, 1.0 / colorDomain.length);\n                    colorScale = scaleLinear()\n                        .range(colorDomain)\n                        .domain(points);\n                }\n                break;\n            default:\n                break;\n        }\n        return colorScale;\n    }\n    getColor(value) {\n        if (value === undefined || value === null) {\n            throw new Error('Value can not be null');\n        }\n        if (this.scaleType === ScaleType.Linear) {\n            const valueScale = scaleLinear()\n                .domain(this.domain)\n                .range([0, 1]);\n            return this.scale(valueScale(value));\n        }\n        else {\n            if (typeof this.customColors === 'function') {\n                return this.customColors(value);\n            }\n            const formattedValue = value.toString();\n            let found; // todo type customColors\n            if (this.customColors && this.customColors.length > 0) {\n                found = this.customColors.find(mapping => {\n                    return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n                });\n            }\n            if (found) {\n                return found.value;\n            }\n            else {\n                return this.scale(value);\n            }\n        }\n    }\n    getLinearGradientStops(value, start) {\n        if (start === undefined) {\n            start = this.domain[0];\n        }\n        const valueScale = scaleLinear()\n            .domain(this.domain)\n            .range([0, 1]);\n        const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n        const endColor = this.getColor(value);\n        // generate the stops\n        const startVal = valueScale(start);\n        const startColor = this.getColor(start);\n        const endVal = valueScale(value);\n        let i = 1;\n        let currentVal = startVal;\n        const stops = [];\n        stops.push({\n            color: startColor,\n            offset: startVal,\n            originalOffset: startVal,\n            opacity: 1\n        });\n        while (currentVal < endVal && i < this.colorDomain.length) {\n            const color = this.colorDomain[i];\n            const offset = colorValueScale(color);\n            if (offset <= startVal) {\n                i++;\n                continue;\n            }\n            if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n                break;\n            }\n            stops.push({\n                color,\n                offset,\n                opacity: 1\n            });\n            currentVal = offset;\n            i++;\n        }\n        if (stops[stops.length - 1].offset < 100) {\n            stops.push({\n                color: endColor,\n                offset: endVal,\n                opacity: 1\n            });\n        }\n        if (endVal === startVal) {\n            stops[0].offset = 0;\n            stops[1].offset = 100;\n        }\n        else {\n            // normalize the offsets into percentages\n            if (stops[stops.length - 1].offset !== 100) {\n                for (const s of stops) {\n                    s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n                }\n            }\n        }\n        return stops;\n    }\n}\n\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nfunction getUniqueXDomainValues(results) {\n    const valueSet = new Set();\n    for (const result of results) {\n        for (const d of result.series) {\n            valueSet.add(d.name);\n        }\n    }\n    return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nfunction getScaleType(values, checkDateType = true) {\n    if (checkDateType) {\n        const allDates = values.every(value => value instanceof Date);\n        if (allDates) {\n            return ScaleType.Time;\n        }\n    }\n    const allNumbers = values.every(value => typeof value === 'number');\n    if (allNumbers) {\n        return ScaleType.Linear;\n    }\n    return ScaleType.Ordinal;\n}\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n    const scaleType = getScaleType(values);\n    let xSet = [];\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n    }\n    let min;\n    let max;\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const mappedValues = values.map(v => Number(v));\n        min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n        max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n    }\n    if (scaleType === ScaleType.Time) {\n        domain = [new Date(min), new Date(max)];\n        xSet = [...values].sort((a, b) => {\n            const aDate = a.getTime();\n            const bDate = b.getTime();\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        });\n    }\n    else if (scaleType === ScaleType.Linear) {\n        domain = [min, max];\n        // Use compare function to sort numbers numerically\n        xSet = [...values].sort((a, b) => a - b);\n    }\n    else {\n        domain = values;\n        xSet = values;\n    }\n    return { domain, xSet, scaleType };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        if (direction === 'asc') {\n            return a[property] - b[property];\n        }\n        else {\n            return b[property] - a[property];\n        }\n    });\n}\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n    return data.sort((a, b) => {\n        const aVal = a[property];\n        const bVal = b[property];\n        const aIdx = domain.indexOf(aVal);\n        const bIdx = domain.indexOf(bVal);\n        if (direction === 'asc') {\n            return aIdx - bIdx;\n        }\n        else {\n            return bIdx - aIdx;\n        }\n    });\n}\nfunction sortByTime(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        const aDate = a[property].getTime();\n        const bDate = b[property].getTime();\n        if (direction === 'asc') {\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        }\n        else {\n            if (aDate > bDate)\n                return -1;\n            if (bDate > aDate)\n                return 1;\n            return 0;\n        }\n    });\n}\n\nclass AreaSeriesComponent {\n    constructor() {\n        this.baseValue = 'auto';\n        this.stacked = false;\n        this.normalized = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradient();\n        let currentArea;\n        let startingArea;\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        if (this.stacked || this.normalized) {\n            currentArea = area()\n                .x(xProperty)\n                .y0((d, i) => this.yScale(d.d0))\n                .y1((d, i) => this.yScale(d.d1));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => this.yScale.range()[0])\n                .y1(d => this.yScale.range()[0]);\n        }\n        else {\n            currentArea = area()\n                .x(xProperty)\n                .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => this.yScale(d.value));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n        }\n        currentArea.curve(this.curve);\n        startingArea.curve(this.curve);\n        this.opacity = 0.8;\n        let data = this.data.series;\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        this.path = currentArea(data);\n        this.startingPath = startingArea(data);\n    }\n    updateGradient() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            if (this.stacked || this.normalized) {\n                const d0values = this.data.series.map(d => d.d0);\n                const d1values = this.data.series.map(d => d.d1);\n                const max = Math.max(...d1values);\n                const min = Math.min(...d0values);\n                this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            }\n            else {\n                const values = this.data.series.map(d => d.value);\n                const max = Math.max(...values);\n                this.gradientStops = this.colors.getLinearGradientStops(max);\n            }\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nAreaSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAreaSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", baseValue: \"baseValue\", colors: \"colors\", scaleType: \"scaleType\", stacked: \"stacked\", normalized: \"normalized\", gradient: \"gradient\", curve: \"curve\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `, isInline: true, components: [{ type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area-series]',\n                    template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], stacked: [{\n                type: Input\n            }], normalized: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass AreaChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.baseValue = 'auto';\n        this.autoScale = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        if (this.baseValue !== 'auto') {\n            values.push(this.baseValue);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getScaleType(values) {\n        let date = true;\n        let num = true;\n        for (const value of values) {\n            if (isDate(value)) {\n                date = false;\n            }\n            if (isNumber(value)) {\n                num = false;\n            }\n        }\n        if (date) {\n            return ScaleType.Time;\n        }\n        if (num) {\n            return ScaleType.Linear;\n        }\n        return ScaleType.Ordinal;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartComponent, selector: \"ngx-charts-area-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", baseValue: \"baseValue\", autoScale: \"autoScale\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showXAxisLabel = false;\n        this.showYAxisLabel = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.yDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.seriesType = SeriesType;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            let total = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    total += d.value;\n                }\n            }\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n                if (total > 0) {\n                    d.d0 = (d.d0 * 100) / total;\n                    d.d1 = (d.d1 * 100) / total;\n                }\n                else {\n                    d.d0 = 0;\n                    d.d1 = 0;\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartNormalizedComponent, selector: \"ngx-charts-area-chart-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.seriesType = SeriesType;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let sum = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    sum += d.value;\n                }\n            }\n            domain.push(sum);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartStackedComponent, selector: \"ngx-charts-area-chart-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartModule {\n}\nAreaChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAreaChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent], imports: [ChartCommonModule], exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent] });\nAreaChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n                    exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n                }]\n        }] });\n\nclass BarComponent {\n    constructor(element) {\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (changes.roundEdges) {\n            this.loadAnimation();\n        }\n        this.update();\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n        this.checkToHideBar();\n    }\n    loadAnimation() {\n        this.path = this.getStartingPath();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            node.transition().duration(500).attr('d', path);\n        }\n        else {\n            node.attr('d', path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        else {\n            if (this.orientation === BarOrientation.Vertical) {\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        return path;\n    }\n    getPath() {\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n        }\n        else {\n            path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        }\n        return path;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                if (this.data.value > 0) {\n                    edges = [true, true, false, false];\n                }\n                else {\n                    edges = [false, false, true, true];\n                }\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                if (this.data.value > 0) {\n                    edges = [false, true, false, true];\n                }\n                else {\n                    edges = [true, false, true, false];\n                }\n            }\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar =\n            this.noBarWhenZero &&\n                ((this.orientation === BarOrientation.Vertical && this.height === 0) ||\n                    (this.orientation === BarOrientation.Horizontal && this.width === 0));\n    }\n}\nBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: { fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", orientation: \"orientation\", roundEdges: \"roundEdges\", gradient: \"gradient\", offset: \"offset\", isActive: \"isActive\", stops: \"stops\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bar]',\n                    template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar BarChartType;\n(function (BarChartType) {\n    BarChartType[\"Standard\"] = \"standard\";\n    BarChartType[\"Normalized\"] = \"normalized\";\n    BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n(function (D0Types) {\n    D0Types[\"positive\"] = \"positive\";\n    D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n    constructor(element) {\n        this.dimensionsChanged = new EventEmitter();\n        this.horizontalPadding = 2;\n        this.verticalPadding = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getSize() {\n        const h = this.element.getBoundingClientRect().height;\n        const w = this.element.getBoundingClientRect().width;\n        return { height: h, width: w, negative: this.value < 0 };\n    }\n    ngAfterViewInit() {\n        this.dimensionsChanged.emit(this.getSize());\n    }\n    update() {\n        if (this.valueFormatting) {\n            this.formatedValue = this.valueFormatting(this.value);\n        }\n        else {\n            this.formatedValue = formatLabel(this.value);\n        }\n        if (this.orientation === 'horizontal') {\n            this.x = this.barX + this.barWidth;\n            // if the value is negative then it's on the left of the x0.\n            // we need to put the data label in front of the bar\n            if (this.value < 0) {\n                this.x = this.x - this.horizontalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.x = this.x + this.horizontalPadding;\n                this.textAnchor = 'start';\n            }\n            this.y = this.barY + this.barHeight / 2;\n        }\n        else {\n            // orientation must be \"vertical\"\n            this.x = this.barX + this.barWidth / 2;\n            this.y = this.barY + this.barHeight;\n            if (this.value < 0) {\n                this.y = this.y + this.verticalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.y = this.y - this.verticalPadding;\n                this.textAnchor = 'start';\n            }\n            this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n        }\n    }\n}\nBarLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: { value: \"value\", valueFormatting: \"valueFormatting\", barX: \"barX\", barY: \"barY\", barWidth: \"barWidth\", barHeight: \"barHeight\", orientation: \"orientation\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, isInline: true, styles: [\".textDataLabel{font-size:11px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-bar-label]', template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".textDataLabel{font-size:11px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], barX: [{\n                type: Input\n            }], barY: [{\n                type: Input\n            }], barWidth: [{\n                type: Input\n            }], barHeight: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }] } });\n\nclass SeriesHorizontal {\n    constructor() {\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelWidthChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type;\n        d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n        this.bars = this.series.map(d => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                formattedLabel\n            };\n            bar.height = this.yScale.bandwidth();\n            if (this.type === BarChartType.Standard) {\n                bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n                if (value < 0) {\n                    bar.x = this.xScale(value);\n                }\n                else {\n                    bar.x = this.xScale(xScaleMin);\n                }\n                bar.y = this.yScale(label);\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            // if total is positive then we show it on the right, otherwise on the left\n            if (section.total > 0) {\n                section.width = this.xScale(totalPositive);\n            }\n            else {\n                section.width = this.xScale(totalNegative);\n            }\n            section.height = this.yScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                var _a;\n                const section = {};\n                section.series = (_a = this.seriesName) !== null && _a !== void 0 ? _a : d.label;\n                section.total = d.value;\n                section.x = this.xScale(0);\n                section.y = this.yScale(d.label);\n                section.width = this.xScale(section.total) - this.xScale(0);\n                section.height = this.yScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n    click(data) {\n        this.select.emit(data);\n    }\n}\nSeriesHorizontal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSeriesHorizontal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelWidthChanged: \"dataLabelWidthChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-horizontal]',\n                    template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelWidthChanged: [{\n                type: Output\n            }] } });\n\nclass BarHorizontalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n    }\n    getXDomain() {\n        const values = this.results.map(d => d.value);\n        const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n        return [min, max];\n    }\n    getYDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.yDomain;\n        }\n        else {\n            domain = this.xDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalComponent, selector: \"ngx-charts-bar-horizontal\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", xScaleMin: \"xScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const height = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.groupScale(group.label)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontal2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontal2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontal2DComponent, selector: \"ngx-charts-bar-horizontal-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalNormalizedComponent, selector: \"ngx-charts-bar-horizontal-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalStackedComponent, selector: \"ngx-charts-bar-horizontal-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass SeriesVerticalComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelHeightChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        let width;\n        if (this.series.length) {\n            width = this.xScale.bandwidth();\n        }\n        width = Math.round(width);\n        const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        this.bars = this.series.map((d, index) => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                width,\n                formattedLabel,\n                height: 0,\n                x: 0,\n                y: 0\n            };\n            if (this.type === BarChartType.Standard) {\n                bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n                bar.x = this.xScale(label);\n                if (value < 0) {\n                    bar.y = this.yScale(0);\n                }\n                else {\n                    bar.y = this.yScale(value);\n                }\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            if (section.total > 0) {\n                section.height = this.yScale(totalPositive);\n            }\n            else {\n                section.height = this.yScale(totalNegative);\n            }\n            section.width = this.xScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                var _a;\n                const section = {};\n                section.series = (_a = this.seriesName) !== null && _a !== void 0 ? _a : d.label;\n                section.total = d.value;\n                section.x = this.xScale(d.label);\n                section.y = this.yScale(0);\n                section.height = this.yScale(section.total) - this.yScale(0);\n                section.width = this.xScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n}\nSeriesVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nSeriesVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelHeightChanged: \"dataLabelHeightChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-vertical]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelHeightChanged: [{\n                type: Output\n            }] } });\n\nclass BarVerticalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getXDomain() {\n        return this.results.map(d => d.label);\n    }\n    getYDomain() {\n        const values = this.results.map(d => d.value);\n        let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            min = Math.min(min, ...this.yAxisTicks);\n        }\n        let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            max = Math.max(max, ...this.yAxisTicks);\n        }\n        return [min, max];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.xDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxHeightChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalComponent, selector: \"ngx-charts-bar-vertical\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", yScaleMin: \"yScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVertical2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.scaleType = ScaleType.Ordinal;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const width = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(${this.groupScale(group.label)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVertical2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVertical2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVertical2DComponent, selector: \"ngx-charts-bar-vertical-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", scaleType: \"scaleType\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalNormalizedComponent, selector: \"ngx-charts-bar-vertical-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name) || 0}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalStackedComponent, selector: \"ngx-charts-bar-vertical-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarChartModule {\n}\nBarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, declarations: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent], imports: [ChartCommonModule], exports: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent] });\nBarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ],\n                    exports: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ]\n                }]\n        }] });\n\nconst cloneDeep = rfdc();\nclass BoxComponent {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.BarOrientation = BarOrientation;\n        this.initialized = false;\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.nativeElm = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.loadAnimation();\n            this.initialized = true;\n        }\n        else {\n            this.update();\n        }\n    }\n    update() {\n        this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n        this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n        this.medianLineWidth = 1.5 * this.strokeWidth;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updateLineEl();\n        this.updatePathEl();\n        this.checkToHideBar();\n        this.maskLineId = 'mask' + id().toString();\n        this.maskLine = `url(#${this.maskLineId})`;\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    loadAnimation() {\n        this.boxPath = this.oldPath = this.getStartingPath();\n        this.oldLineCoordinates = this.getStartingLineCoordinates();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const nodeBar = select(this.nativeElm).selectAll('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            nodeBar\n                .attr('d', this.oldPath)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attrTween('d', this.pathTween(path, 4));\n        }\n        else {\n            nodeBar.attr('d', path);\n        }\n        this.oldPath = path;\n    }\n    updateLineEl() {\n        const lineEl = select(this.nativeElm).selectAll('.bar-line');\n        const lineCoordinates = this.lineCoordinates;\n        const oldLineCoordinates = this.oldLineCoordinates;\n        if (this.animations) {\n            lineEl\n                .attr('x1', (_, index) => oldLineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => oldLineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => oldLineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => oldLineCoordinates[index].v2.y)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        else {\n            lineEl\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        this.oldLineCoordinates = [...lineCoordinates];\n    }\n    /**\n     * See [D3 Selections](https://www.d3indepth.com/selections/)\n     * @param d The joined data.\n     * @param index The index of the element within the selection\n     * @param node The node element (Line).\n     */\n    lineTween(attr, d, index, node) {\n        const nodeLineEl = node[index];\n        return nodeLineEl[attr].baseVal.value;\n    }\n    // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n    pathTween(d1, precision) {\n        return function () {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const path0 = this;\n            const path1 = this.cloneNode();\n            path1.setAttribute('d', d1);\n            const n0 = path0 === null || path0 === void 0 ? void 0 : path0.getTotalLength();\n            const n1 = path1 === null || path1 === void 0 ? void 0 : path1.getTotalLength();\n            // Uniform sampling of distance based on specified precision.\n            const distances = [0];\n            let i = 0;\n            const dt = precision / Math.max(n0, n1);\n            while (i < 1) {\n                distances.push(i);\n                i += dt;\n            }\n            distances.push(1);\n            // Compute point-interpolators at each distance.\n            const points = distances.map((t) => {\n                const p0 = path0.getPointAtLength(t * n0);\n                const p1 = path1.getPointAtLength(t * n1);\n                return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n            });\n            // 't': T is the fraction of time (between 0 and 1) since the transition began.\n            return (t) => {\n                return t < 1 ? 'M' + points.map((p) => p(t)).join('L') : d1;\n            };\n        };\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        const radius = this.roundEdges ? 1 : 0;\n        const { x, y } = this.lineCoordinates[2].v1;\n        return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n    }\n    getPath() {\n        const radius = this.getRadius();\n        let path = '';\n        path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n        return path;\n    }\n    getStartingLineCoordinates() {\n        if (!this.animations) {\n            return [...this.lineCoordinates];\n        }\n        const lineCoordinates = cloneDeep(this.lineCoordinates);\n        lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y =\n            lineCoordinates[2].v1.y;\n        return lineCoordinates;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getGradient() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            edges = [true, true, true, true];\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar = this.noBarWhenZero && this.height === 0;\n    }\n}\nBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: { strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", lineCoordinates: \"lineCoordinates\", roundEdges: \"roundEdges\", gradient: \"gradient\", gradientStops: \"gradientStops\", offset: \"offset\", isActive: \"isActive\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box]',\n                    template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], lineCoordinates: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], gradientStops: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BoxSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    update() {\n        this.updateTooltipSettings();\n        const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n        const seriesName = this.series.name;\n        // Calculate Quantile and Whiskers for each box serie.\n        this.counts = this.series.series;\n        const mappedCounts = this.counts.map(serie => Number(serie.value));\n        this.whiskers = [min(mappedCounts), max(mappedCounts)];\n        // We get the group count and must sort it in order to retrieve quantiles.\n        const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n        this.quartiles = this.getBoxQuantiles(groupCounts);\n        this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n        const value = this.quartiles[1];\n        const formattedLabel = formatLabel(seriesName);\n        const box = {\n            value,\n            data: this.counts,\n            label: seriesName,\n            formattedLabel,\n            width,\n            height: 0,\n            x: 0,\n            y: 0,\n            roundEdges: this.roundEdges,\n            quartiles: this.quartiles,\n            lineCoordinates: this.lineCoordinates\n        };\n        box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n        box.x = this.xScale(seriesName.toString());\n        box.y = this.yScale(this.quartiles[2]);\n        box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n        if (this.colors.scaleType === ScaleType.Ordinal) {\n            box.color = this.colors.getColor(seriesName);\n        }\n        else {\n            box.color = this.colors.getColor(this.quartiles[1]);\n            box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n        }\n        const tooltipLabel = formattedLabel;\n        const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n        box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n        this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n        this.box = box;\n    }\n    getBoxQuantiles(inputData) {\n        return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n    }\n    getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n        // The X value is not being centered, so had to sum half the width to align it.\n        const commonX = this.xScale(seriesName);\n        const offsetX = commonX + barWidth / 2;\n        const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n        const whiskerLineWidth = Math.max(barWidth / 3, 1);\n        const whiskerZero = this.yScale(whiskers[0]);\n        const whiskerOne = this.yScale(whiskers[1]);\n        const median = this.yScale(quartiles[1]);\n        const topLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerZero },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerZero }\n        };\n        const medianLine = {\n            v1: { x: offsetX + medianLineWidth / 2, y: median },\n            v2: { x: offsetX - medianLineWidth / 2, y: median }\n        };\n        const bottomLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerOne },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerOne }\n        };\n        const verticalLine = {\n            v1: { x: offsetX, y: whiskerZero },\n            v2: { x: offsetX, y: whiskerOne }\n        };\n        return [verticalLine, topLine, medianLine, bottomLine];\n    }\n    updateTooltipSettings() {\n        if (this.tooltipDisabled) {\n            this.tooltipPlacement = undefined;\n            this.tooltipType = undefined;\n        }\n        else {\n            if (!this.tooltipPlacement) {\n                this.tooltipPlacement = PlacementTypes.Top;\n            }\n            if (!this.tooltipType) {\n                this.tooltipType = StyleTypes.tooltip;\n            }\n        }\n    }\n}\nBoxSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBoxSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: { dims: \"dims\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", animations: \"animations\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", tooltipPlacement: \"tooltipPlacement\", tooltipType: \"tooltipType\", roundEdges: \"roundEdges\", gradient: \"gradient\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: [\"strokeColor\", \"strokeWidth\", \"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"lineCoordinates\", \"roundEdges\", \"gradient\", \"gradientStops\", \"offset\", \"isActive\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box-series]',\n                    template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BoxChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        /** Show or hide the legend. */\n        this.legend = false;\n        this.legendPosition = LegendPosition.Right;\n        this.legendTitle = 'Legend';\n        this.showGridLines = true;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.showXAxisLabel = true;\n        this.showYAxisLabel = true;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.strokeColor = '#FFFFFF';\n        this.strokeWidth = 2;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        /** Chart Margins (For each side, counterclock wise). */\n        this.margin = [10, 20, 10, 20];\n        /** Chart X axis dimension. */\n        this.xAxisHeight = 0;\n        /** Chart Y axis dimension. */\n        this.yAxisWidth = 0;\n    }\n    trackBy(index, item) {\n        return item.name;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    setColors() {\n        let domain = [];\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    setScales() {\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    }\n    getXScale(domain, width) {\n        const scale = scaleBand()\n            .domain(domain.map(d => d.toString()))\n            .rangeRound([0, width])\n            .padding(0.5);\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().domain(domain).range([height, 0]);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getUniqueBoxChartXDomainValues(results) {\n        const valueSet = new Set();\n        for (const result of results) {\n            valueSet.add(result.name);\n        }\n        return Array.from(valueSet);\n    }\n    getXDomain() {\n        let domain = [];\n        const values = this.getUniqueBoxChartXDomainValues(this.results);\n        let min;\n        let max;\n        if (typeof values[0] === 'string') {\n            domain = values.map(val => val.toString());\n        }\n        else if (typeof values[0] === 'number') {\n            const mappedValues = values.map(v => Number(v));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [min, max];\n        }\n        else {\n            const mappedValues = values.map(v => Number(new Date(v)));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [new Date(min), new Date(max)];\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        const mappedValues = values.map(v => Number(v));\n        const min = Math.min(...mappedValues);\n        const max = Math.max(...mappedValues);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => `${d.name}`);\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    onActivate(data) {\n        this.activate.emit(data);\n    }\n    onDeactivate(data) {\n        this.deactivate.emit(data);\n    }\n    getLegendOptions() {\n        const legendOpts = {\n            scaleType: this.schemeType,\n            colors: this.colors,\n            domain: [],\n            position: this.legendPosition,\n            title: this.legendTitle\n        };\n        if (this.schemeType === ScaleType.Ordinal) {\n            legendOpts.domain = this.xDomain;\n            legendOpts.colors = this.colors;\n        }\n        else {\n            legendOpts.domain = this.yDomain;\n            legendOpts.colors = this.colors.scale;\n        }\n        return legendOpts;\n    }\n}\nBoxChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBoxChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxChartComponent, selector: \"ngx-charts-box-chart\", inputs: { legend: \"legend\", legendPosition: \"legendPosition\", legendTitle: \"legendTitle\", legendOptionsConfig: \"legendOptionsConfig\", showGridLines: \"showGridLines\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", roundDomains: \"roundDomains\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", roundEdges: \"roundEdges\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", wrapTicks: \"wrapTicks\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: [\"dims\", \"series\", \"xScale\", \"yScale\", \"colors\", \"animations\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipPlacement\", \"tooltipType\", \"roundEdges\", \"gradient\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-box-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendOptionsConfig: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate', { static: false }]\n            }] } });\n\nclass BoxChartModule {\n}\nBoxChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBoxChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent], imports: [ChartCommonModule], exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent] });\nBoxChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n                    exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n                }]\n        }] });\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n        if (!autoScale) {\n            values.push(0);\n        }\n    }\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const min = minVal || minVal === 0 ? minVal : Math.min(...values);\n        const max = maxVal ? maxVal : Math.max(...values);\n        domain = [min, max];\n    }\n    else {\n        domain = values;\n    }\n    return domain;\n}\nfunction getScale(domain, range, scaleType, roundDomains) {\n    switch (scaleType) {\n        case ScaleType.Time:\n            return scaleTime().range(range).domain(domain);\n        case ScaleType.Linear: {\n            const scale = scaleLinear().range(range).domain(domain);\n            if (roundDomains) {\n                return scale.nice();\n            }\n            return scale;\n        }\n        case ScaleType.Ordinal:\n            return scalePoint()\n                .range([range[0], range[1]])\n                .domain(domain.map(r => r.toString()));\n        default:\n            return undefined;\n    }\n}\n\nclass BubbleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.circles = this.getCircles();\n    }\n    getCircles() {\n        const seriesName = this.data.name;\n        return this.data.series\n            .map((d, i) => {\n            if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n                const y = d.y;\n                const x = d.x;\n                const r = d.r;\n                const radius = this.rScale(r || 1);\n                const tooltipLabel = formatLabel(d.name);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n                const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n                const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n                const opacity = isActive ? 1 : 0.3;\n                const data = Object.assign({}, d, {\n                    series: seriesName,\n                    name: d.name,\n                    value: d.y,\n                    x: d.x,\n                    radius: d.r\n                });\n                return {\n                    data,\n                    x,\n                    y,\n                    r,\n                    classNames: [`circle-data-${i}`],\n                    value: y,\n                    label: x,\n                    cx,\n                    cy,\n                    radius,\n                    tooltipLabel,\n                    color,\n                    opacity,\n                    seriesName,\n                    isActive,\n                    transform: `translate(${cx},${cy})`\n                };\n            }\n        })\n            .filter(circle => circle !== undefined);\n    }\n    getTooltipText(circle) {\n        const hasRadius = typeof circle.r !== 'undefined';\n        const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n        const hasSeriesName = circle.seriesName && circle.seriesName.length;\n        const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n        const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n        const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n        const x = formatLabel(circle.x);\n        const y = formatLabel(circle.y);\n        const name = hasSeriesName && hasTooltipLabel\n            ? `${circle.seriesName} • ${circle.tooltipLabel}`\n            : circle.seriesName + circle.tooltipLabel;\n        const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n        return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isVisible(circle) {\n        if (this.activeEntries.length > 0) {\n            return this.isActive({ name: circle.seriesName });\n        }\n        return circle.opacity !== 0;\n    }\n    activateCircle(circle) {\n        circle.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle(circle) {\n        circle.barVisible = false;\n        this.deactivate.emit({ name: this.data.name });\n    }\n    trackBy(index, circle) {\n        return `${circle.data.series} ${circle.data.name}`;\n    }\n}\nBubbleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBubbleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", rScale: \"rScale\", xScaleType: \"xScaleType\", yScaleType: \"yScaleType\", colors: \"colors\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0,\n                    transform: 'scale(0)'\n                }),\n                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bubble-series]',\n                    template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0,\n                                    transform: 'scale(0)'\n                                }),\n                                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], rScale: [{\n                type: Input\n            }], xScaleType: [{\n                type: Input\n            }], yScaleType: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BubbleChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.showGridLines = true;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.maxRadius = 10;\n        this.minRadius = 3;\n        this.schemeType = ScaleType.Ordinal;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.scaleType = ScaleType.Linear;\n        this.margin = [10, 20, 10, 20];\n        this.bubblePadding = [0, 0, 0, 0];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.activeEntries = [];\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.seriesDomain = this.results.map(d => d.name);\n        this.rDomain = this.getRDomain();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n        const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n        this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n        this.data = this.results;\n        this.minRadius = Math.max(this.minRadius, 1);\n        this.maxRadius = Math.max(this.maxRadius, 1);\n        this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n        this.bubblePadding = [0, 0, 0, 0];\n        this.setScales();\n        this.bubblePadding = this.getBubblePadding();\n        this.setScales();\n        this.legendOptions = this.getLegendOptions();\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    hideCircles() {\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    getBubblePadding() {\n        let yMin = 0;\n        let xMin = 0;\n        let yMax = this.dims.height;\n        let xMax = this.dims.width;\n        for (const s of this.data) {\n            for (const d of s.series) {\n                const r = this.rScale(d.r);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n                xMin = Math.max(r - cx, xMin);\n                yMin = Math.max(r - cy, yMin);\n                yMax = Math.max(cy + r, yMax);\n                xMax = Math.max(cx + r, xMax);\n            }\n        }\n        xMax = Math.max(xMax - this.dims.width, 0);\n        yMax = Math.max(yMax - this.dims.height, 0);\n        return [yMin, xMax, yMax, xMin];\n    }\n    setScales() {\n        let width = this.dims.width;\n        if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n            width = width - this.bubblePadding[1];\n        }\n        let height = this.dims.height;\n        if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n            height = height - this.bubblePadding[2];\n        }\n        this.xScale = this.getXScale(this.xDomain, width);\n        this.yScale = this.getYScale(this.yDomain, height);\n    }\n    getYScale(domain, height) {\n        return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n    }\n    getXScale(domain, width) {\n        return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n    }\n    getRScale(domain, range) {\n        const scale = scaleLinear().range(range).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            position: this.legendPosition,\n            title: undefined\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.rDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    getXDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.x)) {\n                    values.push(d.x);\n                }\n            }\n        }\n        this.xScaleType = getScaleType(values);\n        return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n    }\n    getYDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.y)) {\n                    values.push(d.y);\n                }\n            }\n        }\n        this.yScaleType = getScaleType(values);\n        return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n    }\n    getRDomain() {\n        let min = Infinity;\n        let max = -Infinity;\n        for (const results of this.results) {\n            for (const d of results.series) {\n                const value = Number(d.r) || 1;\n                min = Math.min(min, value);\n                max = Math.max(max, value);\n            }\n        }\n        return [min, max];\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nBubbleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBubbleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleChartComponent, selector: \"ngx-charts-bubble-chart\", inputs: { showGridLines: \"showGridLines\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", maxRadius: \"maxRadius\", minRadius: \"minRadius\", autoScale: \"autoScale\", schemeType: \"schemeType\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"colors\", \"visibleValue\", \"activeEntries\", \"xAxisLabel\", \"yAxisLabel\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bubble-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { showGridLines: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], maxRadius: [{\n                type: Input\n            }], minRadius: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BubbleChartModule {\n}\nBubbleChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBubbleChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, declarations: [BubbleChartComponent, BubbleSeriesComponent], imports: [ChartCommonModule], exports: [BubbleChartComponent, BubbleSeriesComponent] });\nBubbleChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BubbleChartComponent, BubbleSeriesComponent],\n                    exports: [BubbleChartComponent, BubbleSeriesComponent]\n                }]\n        }] });\n\nclass HeatMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.transform = `translate(${this.x} , ${this.y})`;\n        this.startOpacity = 0.3;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n        if (this.animations) {\n            this.loadAnimation();\n        }\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0);\n        this.animateToCurrentForm();\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        node.transition().duration(750).attr('opacity', 1);\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n}\nHeatMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nHeatMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: { fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", data: \"data\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass HeatCellSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnInit() {\n        if (!this.tooltipText) {\n            this.tooltipText = this.getTooltipText;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        const cells = [];\n        this.data.map(row => {\n            row.series.map(cell => {\n                const value = cell.value;\n                cell.series = row.name;\n                cells.push({\n                    row,\n                    cell,\n                    x: this.xScale(row.name),\n                    y: this.yScale(cell.name),\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: this.colors.getColor(value),\n                    data: value,\n                    label: formatLabel(cell.name),\n                    series: row.name\n                });\n            });\n        });\n        return cells;\n    }\n    getTooltipText({ label, data, series }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nHeatCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nHeatCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: { data: \"data\", colors: \"colors\", xScale: \"xScale\", yScale: \"yScale\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: [\"fill\", \"x\", \"y\", \"width\", \"height\", \"data\", \"gradient\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass HeatMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.innerPadding = 8;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.tooltipDisabled = false;\n        this.activeEntries = [];\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.scaleType = ScaleType.Linear;\n    }\n    update() {\n        super.update();\n        this.formatDates();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.valueDomain = this.getValueDomain();\n        this.scaleType = getScaleType(this.valueDomain, false);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.scaleType,\n            legendPosition: this.legendPosition\n        });\n        if (this.scaleType === ScaleType.Linear) {\n            let min = this.min;\n            let max = this.max;\n            if (!this.min) {\n                min = Math.min(0, ...this.valueDomain);\n            }\n            if (!this.max) {\n                max = Math.max(...this.valueDomain);\n            }\n            this.valueDomain = [min, max];\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.rects = this.getRects();\n    }\n    getXDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.name)) {\n                domain.push(group.name);\n            }\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.name)) {\n                    domain.push(d.name);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        return domain;\n    }\n    /**\n     * Converts the input to gap paddingInner in fraction\n     * Supports the following inputs:\n     *    Numbers: 8\n     *    Strings: \"8\", \"8px\", \"8%\"\n     *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n     *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n     *\n     * @memberOf HeatMapComponent\n     */\n    getDimension(value, index = 0, N, L) {\n        if (typeof value === 'string') {\n            value = value\n                .replace('[', '')\n                .replace(']', '')\n                .replace('px', '')\n                // tslint:disable-next-line: quotemark\n                .replace(\"'\", '');\n            if (value.includes(',')) {\n                value = value.split(',');\n            }\n        }\n        if (Array.isArray(value) && typeof index === 'number') {\n            return this.getDimension(value[index], null, N, L);\n        }\n        if (typeof value === 'string' && value.includes('%')) {\n            return +value.replace('%', '') / 100;\n        }\n        return N / (L / +value + 1);\n    }\n    getXScale() {\n        const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n        return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n    }\n    getYScale() {\n        const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n        return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n    }\n    getRects() {\n        const rects = [];\n        this.xDomain.map(xVal => {\n            this.yDomain.map(yVal => {\n                rects.push({\n                    x: this.xScale(xVal),\n                    y: this.yScale(yVal),\n                    rx: 3,\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: 'rgba(200,200,200,0.03)'\n                });\n            });\n        });\n        return rects;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: this.scaleType,\n            domain: this.valueDomain,\n            colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n            title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nHeatMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nHeatMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapComponent, selector: \"ngx-charts-heat-map\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", gradient: \"gradient\", innerPadding: \"innerPadding\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", min: \"min\", max: \"max\", activeEntries: \"activeEntries\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: [\"data\", \"colors\", \"xScale\", \"yScale\", \"gradient\", \"tooltipDisabled\", \"tooltipText\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-heat-map', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass HeatMapModule {\n}\nHeatMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHeatMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent], imports: [ChartCommonModule], exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent] });\nHeatMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n                    exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n                }]\n        }] });\n\nclass LineComponent {\n    constructor(element, platformId) {\n        this.element = element;\n        this.platformId = platformId;\n        this.fill = 'none';\n        this.animations = true;\n        // @Output() select = new EventEmitter();\n        this.initialized = false;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.initialized = true;\n            this.initialPath = this.path;\n        }\n        else {\n            this.updatePathEl();\n        }\n    }\n    updatePathEl() {\n        const node = select(this.element.nativeElement).select('.line');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n}\nLineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, deps: [{ token: i0.ElementRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nLineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: { path: \"path\", stroke: \"stroke\", data: \"data\", fill: \"fill\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    strokeDasharray: 2000,\n                    strokeDashoffset: 2000\n                }),\n                animate(1000, style({\n                    strokeDashoffset: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    strokeDasharray: 2000,\n                                    strokeDashoffset: 2000\n                                }),\n                                animate(1000, style({\n                                    strokeDashoffset: 0\n                                }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { path: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const data = this.sortData(this.data.series);\n        const lineGen = this.getLineGenerator();\n        this.path = lineGen(data) || '';\n        const areaGen = this.getAreaGenerator();\n        this.areaPath = areaGen(data) || '';\n        if (this.hasRange) {\n            const range = this.getRangeGenerator();\n            this.outerPath = range(data) || '';\n        }\n        if (this.hasGradient) {\n            this.stroke = this.gradientUrl;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            if (max === min) {\n                this.stroke = this.colors.getColor(max);\n            }\n        }\n        else {\n            this.stroke = this.colors.getColor(this.data.name);\n        }\n    }\n    getLineGenerator() {\n        return line()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    getRangeGenerator() {\n        return area()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n            .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n            .curve(this.curve);\n    }\n    getAreaGenerator() {\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        return area()\n            .x(xProperty)\n            .y0(() => this.yScale.range()[0])\n            .y1(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        return data;\n    }\n    updateGradients() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            this.gradientId = 'grad' + id().toString();\n            this.gradientUrl = `url(#${this.gradientId})`;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            this.areaGradientStops = this.colors.getLinearGradientStops(max);\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n            this.areaGradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nLineSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLineSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", hasRange: \"hasRange\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line-series]',\n                    template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], hasRange: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showRefLines = false;\n        this.showRefLabels = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, width]).domain(domain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, width]).domain(domain);\n            if (this.roundDomains) {\n                scale = scale.nice();\n            }\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n        }\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        this.deactivateAll();\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nLineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineChartComponent, selector: \"ngx-charts-line-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showRefLines: \"showRefLines\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"hasRange\", \"animations\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-line-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LineChartModule {\n}\nLineChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLineChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, declarations: [LineComponent, LineChartComponent, LineSeriesComponent], imports: [ChartCommonModule], exports: [LineComponent, LineChartComponent, LineSeriesComponent] });\nLineChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n                    exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n                }]\n        }] });\n\nclass PieLabelComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.animations = true;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.trimLabel = trimLabel;\n    }\n    ngOnChanges(changes) {\n        this.setTransforms();\n        this.update();\n    }\n    setTransforms() {\n        if (isPlatformServer(this.platformId)) {\n            this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = `translate(${this.textX},${this.textY})`;\n            this.textTransition = !this.animations ? null : 'transform 0.75s';\n        }\n        else {\n            const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n            this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n            this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n        }\n    }\n    update() {\n        let startRadius = this.radius;\n        if (this.explodeSlices) {\n            startRadius = (this.radius * this.value) / this.max;\n        }\n        const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n        // Calculate innerPos then scale outer position to match label position\n        const innerPos = innerArc.centroid(this.data);\n        let scale = this.data.pos[1] / innerPos[1];\n        if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n            scale = 1;\n        }\n        const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n        this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n    }\n    get textX() {\n        return this.data.pos[0];\n    }\n    get textY() {\n        return this.data.pos[1];\n    }\n    textAnchor() {\n        return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n}\nPieLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nPieLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: { data: \"data\", radius: \"radius\", label: \"label\", color: \"color\", max: \"max\", value: \"value\", explodeSlices: \"explodeSlices\", animations: \"animations\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\" }, usesOnChanges: true, ngImport: i0, template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-label]',\n                    template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { data: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }] } });\n\nclass PolarSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.circleRadius = 3;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const line = this.getLineGenerator();\n        const data = this.sortData(this.data.series);\n        const seriesName = this.data.name;\n        const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n        const min = this.yScale.domain()[0];\n        this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n        this.path = line(data) || '';\n        this.circles = data.map(d => {\n            const a = this.getAngle(d);\n            const r = this.getRadius(d);\n            const value = d.value;\n            const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n            const cData = Object.assign({}, d, {\n                series: seriesName,\n                value,\n                name: d.name\n            });\n            return {\n                data: cData,\n                cx: r * Math.sin(a),\n                cy: -r * Math.cos(a),\n                value,\n                color,\n                label: d.name\n            };\n        });\n        this.active = this.isActive(this.data);\n        this.inactive = this.isInactive(this.data);\n        this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n    }\n    getAngle(d) {\n        const label = d.name;\n        if (this.scaleType === ScaleType.Time) {\n            return this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            return this.xScale(Number(label));\n        }\n        return this.xScale(label);\n    }\n    getRadius(d) {\n        return this.yScale(d.value);\n    }\n    getLineGenerator() {\n        return lineRadial()\n            .angle(d => this.getAngle(d))\n            .radius(d => this.getRadius(d))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            return sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            return sortByTime(data, 'name');\n        }\n        return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n    defaultTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    updateGradients() {\n        this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n        if (!this.hasGradient) {\n            return;\n        }\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n        }\n        else {\n            this.gradientStops = undefined;\n        }\n    }\n}\nPolarSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPolarSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: { name: \"name\", data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", gradient: \"gradient\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-polar-series]',\n                    template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { name: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nconst twoPI = 2 * Math.PI;\nclass PolarChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveCardinalClosed;\n        this.activeEntries = [];\n        this.rangeFillOpacity = 0.15;\n        this.trimYAxisTicks = true;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showSeriesOnHover = true;\n        this.gradient = false;\n        this.yAxisMinScale = 0;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        // series: any; // ???\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.orientation = Orientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.setDims();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.setTicks();\n    }\n    setDims() {\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        const halfWidth = Math.floor(this.dims.width / 2);\n        const halfHeight = Math.floor(this.dims.height / 2);\n        const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n        const yOffset = Math.max(0, halfHeight - outerRadius);\n        this.yAxisDims = Object.assign(Object.assign({}, this.dims), { width: halfWidth });\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.transformYAxis = `translate(0, ${yOffset})`;\n        this.labelOffset = this.dims.height + 40;\n        this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n    }\n    setScales() {\n        const xValues = this.getXValues();\n        this.scaleType = getScaleType(xValues);\n        this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, twoPI);\n        this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n        this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n    }\n    setTicks() {\n        let tickFormat;\n        if (this.xAxisTickFormatting) {\n            tickFormat = this.xAxisTickFormatting;\n        }\n        else if (this.xScale.tickFormat) {\n            tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n        }\n        else {\n            tickFormat = d => {\n                if (isDate(d)) {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const outerRadius = this.outerRadius;\n        const s = 1.1;\n        this.thetaTicks = this.xDomain.map(d => {\n            const startAngle = this.xScale(d);\n            const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n            const label = tickFormat(d);\n            const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n            const pos = [dd, s * startPos[1]];\n            return {\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle: startAngle,\n                value: outerRadius,\n                label,\n                startPos,\n                pos\n            };\n        });\n        const minDistance = 10;\n        /* from pie chart, abstract out -*/\n        for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n            const a = this.thetaTicks[i];\n            for (let j = i + 1; j < this.thetaTicks.length; j++) {\n                const b = this.thetaTicks[j];\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n    }\n    getXValues() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        return values;\n    }\n    getXDomain(values = this.getXValues()) {\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        return values;\n    }\n    getYValues() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        return domain;\n    }\n    getYDomain(domain = this.getYValues()) {\n        let min = Math.min(...domain);\n        const max = Math.max(this.yAxisMinScale, ...domain);\n        min = Math.max(0, min);\n        if (!this.autoScale) {\n            min = Math.min(0, min);\n        }\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        switch (this.scaleType) {\n            case ScaleType.Time:\n                return scaleTime().range([0, width]).domain(domain);\n            case ScaleType.Linear: {\n                const scale = scaleLinear().range([0, width]).domain(domain);\n                return this.roundDomains ? scale.nice() : scale;\n            }\n            default:\n                return scalePoint()\n                    .range([0, width - twoPI / domain.length])\n                    .padding(0)\n                    .domain(domain);\n        }\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([0, height]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        if (this.schemeType === ScaleType.Ordinal) {\n            return {\n                scaleType: this.schemeType,\n                colors: this.colors,\n                domain: this.seriesDomain,\n                title: this.legendTitle,\n                position: this.legendPosition\n            };\n        }\n        return {\n            scaleType: this.schemeType,\n            colors: this.colors.scale,\n            domain: this.yDomain,\n            title: undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nPolarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPolarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarChartComponent, selector: \"ngx-charts-polar-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimYAxisTicks: \"trimYAxisTicks\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showSeriesOnHover: \"showSeriesOnHover\", gradient: \"gradient\", yAxisMinScale: \"yAxisMinScale\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }, { type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: [\"name\", \"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"tooltipDisabled\", \"tooltipText\", \"gradient\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-polar-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showSeriesOnHover: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], yAxisMinScale: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieArcComponent {\n    constructor(element) {\n        this.startAngle = 0;\n        this.endAngle = Math.PI * 2;\n        this.cornerRadius = 0;\n        this.explodeSlices = false;\n        this.gradient = false;\n        this.animate = true;\n        this.pointerEvents = true;\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getGradient() {\n        return this.gradient ? this.gradientFill : this.fill;\n    }\n    getPointerEvents() {\n        return this.pointerEvents ? 'auto' : 'none';\n    }\n    update() {\n        const calc = this.calculateArc();\n        this.startOpacity = 0.5;\n        this.radialGradientId = 'linearGrad' + id().toString();\n        this.gradientFill = `url(#${this.radialGradientId})`;\n        if (this.animate) {\n            if (this.initialized) {\n                this.updateAnimation();\n            }\n            else {\n                this.loadAnimation();\n                this.initialized = true;\n            }\n        }\n        else {\n            this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n        }\n    }\n    calculateArc() {\n        let outerRadius = this.outerRadius;\n        if (this.explodeSlices && this.innerRadius === 0) {\n            outerRadius = (this.outerRadius * this.value) / this.max;\n        }\n        return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n    }\n    loadAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const copyOfD = Object.assign({}, d);\n            copyOfD.endAngle = copyOfD.startAngle;\n            const interpolater = interpolate(copyOfD, copyOfD);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        })\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    updateAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    onClick() {\n        clearTimeout(this._timeout);\n        this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n    }\n    onDblClick(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._timeout);\n        this.dblclick.emit({\n            data: this.data,\n            nativeEvent: event\n        });\n    }\n}\nPieArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: { fill: \"fill\", startAngle: \"startAngle\", endAngle: \"endAngle\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", cornerRadius: \"cornerRadius\", value: \"value\", max: \"max\", data: \"data\", explodeSlices: \"explodeSlices\", gradient: \"gradient\", animate: \"animate\", pointerEvents: \"pointerEvents\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-arc]',\n                    template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], endAngle: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animate: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass PieSeriesComponent {\n    constructor() {\n        this.series = [];\n        this.innerRadius = 60;\n        this.outerRadius = 80;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        const pieGenerator = pie()\n            .value(d => d.value)\n            .sort(null);\n        const arcData = pieGenerator(this.series);\n        this.max = max(arcData, d => {\n            return d.value;\n        });\n        this.data = this.calculateLabelPositions(arcData);\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n    outerArc() {\n        const factor = 1.5;\n        return arc()\n            .innerRadius(this.outerRadius * factor)\n            .outerRadius(this.outerRadius * factor);\n    }\n    calculateLabelPositions(pieData) {\n        const factor = 1.5;\n        const minDistance = 10;\n        const labelPositions = pieData;\n        labelPositions.forEach(d => {\n            d.pos = this.outerArc().centroid(d);\n            d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n        });\n        for (let i = 0; i < labelPositions.length - 1; i++) {\n            const a = labelPositions[i];\n            if (!this.labelVisible(a)) {\n                continue;\n            }\n            for (let j = i + 1; j < labelPositions.length; j++) {\n                const b = labelPositions[j];\n                if (!this.labelVisible(b)) {\n                    continue;\n                }\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        return labelPositions;\n    }\n    labelVisible(myArc) {\n        return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n    }\n    getTooltipTitle(a) {\n        return this.tooltipTemplate ? undefined : this.tooltipText(a);\n    }\n    labelText(myArc) {\n        if (this.labelFormatting) {\n            return this.labelFormatting(myArc.data.name);\n        }\n        return this.label(myArc);\n    }\n    label(myArc) {\n        return formatLabel(myArc.data.name);\n    }\n    defaultTooltipText(myArc) {\n        const label = this.label(myArc);\n        const val = formatLabel(myArc.data.value);\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    color(myArc) {\n        return this.colors.getColor(this.label(myArc));\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n}\nPieSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPieSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: { colors: \"colors\", series: \"series\", dims: \"dims\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", explodeSlices: \"explodeSlices\", showLabels: \"showLabels\", gradient: \"gradient\", activeEntries: \"activeEntries\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-series]',\n                    template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { colors: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], showLabels: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: (this.width * 4) / 12.0,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        const xOffset = this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.legendWidth = this.width - this.dims.width - this.margin[1];\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n        this.innerRadius = this.outerRadius * 0.75;\n        this.transform = `translate(${xOffset} , ${yOffset})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nAdvancedPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAdvancedPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedPieChartComponent, selector: \"ngx-charts-advanced-pie-chart\", inputs: { gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", valueFormatting: \"valueFormatting\", nameFormatting: \"nameFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }, { type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: [\"width\", \"data\", \"colors\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-pie-chart', template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"] }]\n        }], propDecorators: { gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], valueFormatting: [{\n                type: Input\n            }], nameFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nclass PieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.labels = false;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.explodeSlices = false;\n        this.doughnut = false;\n        this.arcWidth = 0.25;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.dblclick = new EventEmitter();\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    update() {\n        super.update();\n        if (this.labels && this.hasNoOptionalMarginsSet()) {\n            this.margins = [30, 80, 30, 80];\n        }\n        else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n            // default value for margins\n            this.margins = [20, 20, 20, 20];\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margins,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        const xOffset = this.margins[3] + this.dims.width / 2;\n        const yOffset = this.margins[0] + this.dims.height / 2;\n        this.translation = `translate(${xOffset}, ${yOffset})`;\n        this.outerRadius = Math.min(this.dims.width, this.dims.height);\n        if (this.labels) {\n            // make room for labels\n            this.outerRadius /= 3;\n        }\n        else {\n            this.outerRadius /= 2;\n        }\n        this.innerRadius = 0;\n        if (this.doughnut) {\n            this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n        }\n        this.domain = this.getDomain();\n        // sort data according to domain\n        this.data = this.results.sort((a, b) => {\n            return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n        });\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            domain: this.domain,\n            colors: this.colors,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    hasNoOptionalMarginsSet() {\n        return !this.margins || this.margins.length <= 0;\n    }\n}\nPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieChartComponent, selector: \"ngx-charts-pie-chart\", inputs: { labels: \"labels\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", explodeSlices: \"explodeSlices\", doughnut: \"doughnut\", arcWidth: \"arcWidth\", gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", margins: \"margins\" }, outputs: { dblclick: \"dblclick\", select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"] }]\n        }], propDecorators: { labels: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], doughnut: [{\n                type: Input\n            }], arcWidth: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], dblclick: [{\n                type: Output\n            }], margins: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nfunction gridSize(dims, len, minWidth) {\n    let rows = 1;\n    let cols = len;\n    const width = dims.width;\n    if (width > minWidth) {\n        while (width / cols < minWidth) {\n            rows += 1;\n            cols = Math.ceil(len / rows);\n        }\n    }\n    return [cols, rows];\n}\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n    const xScale = scaleBand();\n    const yScale = scaleBand();\n    const width = dims.width;\n    const height = dims.height;\n    const [columns, rows] = gridSize(dims, data.length, minWidth);\n    const xDomain = [];\n    const yDomain = [];\n    for (let i = 0; i < rows; i++) {\n        yDomain.push(i);\n    }\n    for (let i = 0; i < columns; i++) {\n        xDomain.push(i);\n    }\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n    xScale.rangeRound([0, width], 0.1);\n    yScale.rangeRound([0, height], 0.1);\n    const res = [];\n    const total = designatedTotal ? designatedTotal : getTotal(data);\n    const cardWidth = xScale.bandwidth();\n    const cardHeight = yScale.bandwidth();\n    for (let i = 0; i < data.length; i++) {\n        res[i] = {};\n        res[i].data = {\n            name: data[i] ? data[i].name : '',\n            value: data[i] ? data[i].value : undefined,\n            extra: data[i] ? data[i].extra : undefined,\n            label: data[i] ? data[i].label : ''\n        };\n        res[i].x = xScale(i % columns);\n        res[i].y = yScale(Math.floor(i / columns));\n        res[i].width = cardWidth;\n        res[i].height = cardHeight;\n        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n        res[i].data.total = total;\n    }\n    return res;\n}\nfunction getTotal(results) {\n    return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n    constructor(element) {\n        this.innerRadius = 70;\n        this.outerRadius = 80;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.layout = pie()\n            .value(d => d.data.value)\n            .sort(null);\n        this.arcs = this.getArcs();\n    }\n    getArcs() {\n        return this.layout(this.data).map((arc, index) => {\n            const label = arc.data.data.name;\n            const other = arc.data.data.other;\n            if (index === 0) {\n                arc.startAngle = 0;\n            }\n            const color = this.colors(label);\n            return {\n                data: arc.data.data,\n                class: 'arc ' + 'arc' + index,\n                fill: color,\n                startAngle: other ? 0 : arc.startAngle,\n                endAngle: arc.endAngle,\n                animate: this.animations && !other,\n                pointerEvents: !other\n            };\n        });\n    }\n    onClick(data) {\n        this.select.emit(this.data[0].data);\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    label(arc) {\n        return arc.data.name;\n    }\n    color(arc) {\n        return this.colors(this.label(arc));\n    }\n}\nPieGridSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieGridSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: { colors: \"colors\", data: \"data\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-grid-series]',\n                    template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { colors: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass PieGridComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.minWidth = 150;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n        this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n        this.series = this.getSeries();\n        this.setColors();\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    defaultTooltipText({ data }) {\n        const label = trimLabel(formatLabel(data.name));\n        const val = data.value.toLocaleString();\n        return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    getSeries() {\n        const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n        return this.data.map(d => {\n            const baselineLabelHeight = 20;\n            const padding = 10;\n            const name = d.data.name;\n            const label = formatLabel(name);\n            const value = d.data.value;\n            const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n            const innerRadius = radius * 0.9;\n            let count = 0;\n            const colors = () => {\n                count += 1;\n                if (count === 1) {\n                    return 'rgba(100,100,100,0.3)';\n                }\n                else {\n                    return this.colorScale.getColor(label);\n                }\n            };\n            const xPos = d.x + (d.width - padding) / 2;\n            const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n            return {\n                transform: `translate(${xPos}, ${yPos})`,\n                colors,\n                innerRadius,\n                outerRadius: radius,\n                name,\n                label: trimLabel(label),\n                total: value,\n                value,\n                percent: format('.1%')(d.data.percent),\n                data: [\n                    d,\n                    {\n                        data: {\n                            other: true,\n                            value: total - value,\n                            name: d.data.name\n                        }\n                    }\n                ]\n            };\n        });\n    }\n    getTotal() {\n        return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nPieGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridComponent, selector: \"ngx-charts-pie-grid\", inputs: { designatedTotal: \"designatedTotal\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", minWidth: \"minWidth\", activeEntries: \"activeEntries\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: [\"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-grid', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"] }]\n        }], propDecorators: { designatedTotal: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieChartModule {\n}\nPieChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPieChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, declarations: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent], imports: [ChartCommonModule], exports: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent] });\nPieChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ],\n                    exports: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ]\n                }]\n        }] });\n\nclass PolarChartModule {\n}\nPolarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPolarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, declarations: [PolarChartComponent, PolarSeriesComponent], imports: [ChartCommonModule, PieChartModule, LineChartModule], exports: [PolarChartComponent, PolarSeriesComponent] });\nPolarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, imports: [[ChartCommonModule, PieChartModule, LineChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, LineChartModule],\n                    declarations: [PolarChartComponent, PolarSeriesComponent],\n                    exports: [PolarChartComponent, PolarSeriesComponent]\n                }]\n        }] });\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n    return text.split('').reduce((acc, curr) => {\n        const width = fontFamilyKey[curr] || defaultWidth;\n        return acc + width;\n    }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n    '0': 10,\n    '1': 10,\n    '2': 10,\n    '3': 10,\n    '4': 10,\n    '5': 10,\n    '6': 10,\n    '7': 10,\n    '8': 10,\n    '9': 10,\n    A: 11,\n    B: 11,\n    C: 11,\n    D: 12,\n    E: 10,\n    F: 9,\n    G: 12,\n    H: 12,\n    I: 7,\n    J: 7,\n    K: 11,\n    L: 9,\n    M: 13,\n    N: 12,\n    O: 13,\n    P: 10,\n    Q: 13,\n    R: 11,\n    S: 11,\n    T: 10,\n    U: 12,\n    V: 11,\n    W: 16,\n    X: 11,\n    Y: 10,\n    Z: 11,\n    a: 10,\n    b: 10,\n    c: 8,\n    d: 10,\n    e: 10,\n    f: 6,\n    g: 10,\n    h: 10,\n    i: 4,\n    j: 6,\n    k: 9,\n    l: 4,\n    m: 16,\n    n: 10,\n    o: 10,\n    p: 10,\n    q: 10,\n    r: 7,\n    s: 8,\n    t: 6,\n    u: 10,\n    v: 9,\n    w: 13,\n    x: 9,\n    y: 9,\n    z: 8,\n    '!': 6,\n    '@': 16,\n    '#': 13,\n    $: 10,\n    '%': 17,\n    '^': 13,\n    '&': 12,\n    '*': 10,\n    '(': 7,\n    ')': 7,\n    _: 10,\n    '-': 7,\n    '+': 13,\n    '=': 13,\n    ',': 6,\n    '.': 6,\n    '/': 7,\n    \"'\": 4,\n    ':': 7,\n    '|': 7,\n    '?': 9,\n    ';': 7,\n    '<': 13,\n    '>': 13\n};\n\nclass CardComponent {\n    constructor(element, cd, zone, platformId) {\n        this.cd = cd;\n        this.zone = zone;\n        this.platformId = platformId;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.value = '';\n        this.textFontSize = 12;\n        this.textTransform = '';\n        this.initialized = false;\n        this.bandHeight = 10;\n        this.textPadding = [10, 20, 5, 20];\n        this.labelFontSize = 15;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR();\n        }\n    }\n    ngOnDestroy() {\n        if (isPlatformBrowser(this.platformId)) {\n            cancelAnimationFrame(this.animationReq);\n        }\n    }\n    update() {\n        this.zone.run(() => {\n            const hasValue = this.data && typeof this.data.value !== 'undefined';\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n            this.transform = `translate(${this.x} , ${this.y})`;\n            this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n            this.cardWidth = Math.max(0, this.width);\n            this.cardHeight = Math.max(0, this.height);\n            this.label = this.label ? this.label : this.data.name;\n            const cardData = {\n                label: this.label,\n                data: this.data,\n                value: this.data.value\n            };\n            this.formattedLabel = labelFormatting(cardData);\n            this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n            const value = hasValue ? valueFormatting(cardData) : '';\n            this.value = this.paddedValue(value);\n            this.setPadding();\n            this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n            setTimeout(() => {\n                if (isPlatformBrowser(this.platformId)) {\n                    this.scaleText();\n                }\n                this.value = value;\n                if (hasValue && !this.initialized) {\n                    setTimeout(() => this.startCount(), 20);\n                }\n            }, 8);\n        });\n    }\n    paddedValue(value) {\n        if (this.medianSize && this.medianSize > value.length) {\n            value += '\\u2007'.repeat(this.medianSize - value.length);\n        }\n        return value;\n    }\n    startCount() {\n        if (!this.initialized && this.animations) {\n            cancelAnimationFrame(this.animationReq);\n            const val = this.data.value;\n            const decs = decimalChecker(val);\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const callback = ({ value, finished }) => {\n                this.zone.run(() => {\n                    value = finished ? val : value;\n                    this.value = valueFormatting({ label: this.label, data: this.data, value });\n                    if (!finished) {\n                        this.value = this.paddedValue(this.value);\n                    }\n                    this.cd.markForCheck();\n                });\n            };\n            this.animationReq = count(0, val, decs, 1, callback);\n            this.initialized = true;\n        }\n    }\n    scaleText() {\n        this.zone.run(() => {\n            const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n            if (width === 0 || height === 0) {\n                return;\n            }\n            const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n            const availableWidth = this.cardWidth - 2 * textPadding;\n            const availableHeight = this.cardHeight / 3;\n            const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n            this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n            this.labelFontSize = Math.min(this.textFontSize, 15);\n            this.setPadding();\n            this.cd.markForCheck();\n        });\n    }\n    scaleTextSSR() {\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n        const height = 18;\n        const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n        const availableWidth = this.cardWidth - 2 * textPadding;\n        const availableHeight = this.cardHeight / 3;\n        const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n        this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n        this.labelFontSize = Math.min(this.textFontSize, 15);\n        this.setPadding();\n    }\n    setPadding() {\n        this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n        const padding = this.cardHeight / 2;\n        this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n        this.textPadding[2] = padding - this.labelFontSize;\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n}\nCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: { color: \"color\", bandColor: \"bandColor\", textColor: \"textColor\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", data: \"data\", medianSize: \"medianSize\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { color: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], medianSize: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl', { static: false }]\n            }] } });\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nfunction hexToRgb(value) {\n    // deprecated, use d3.color()\n    return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nfunction invertColor(value) {\n    const color = d3_color.rgb(value);\n    const { r, g, b, opacity } = color;\n    if (opacity === 0) {\n        return color.toString();\n    }\n    const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n    const depth = yiq >= 128 ? -0.8 : 0.8;\n    return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nfunction shadeRGBColor({ r, g, b }, percent) {\n    const t = percent < 0 ? 0 : 255;\n    const p = percent < 0 ? percent * -1 : percent;\n    r = Math.round((t - r) * p) + r;\n    g = Math.round((t - g) * p) + g;\n    b = Math.round((t - b) * p) + b;\n    return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n    constructor() {\n        this.innerPadding = 15;\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.data.length > 2) {\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const sortedLengths = this.data\n                .map(d => {\n                const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n                return hasValue\n                    ? valueFormatting({\n                        data: d.data,\n                        label: d ? d.data.name : '',\n                        value: d && d.data ? d.data.value : ''\n                    }).length\n                    : 0;\n            })\n                .sort((a, b) => b - a);\n            const idx = Math.ceil(this.data.length / 2);\n            this.medianSize = sortedLengths[idx];\n        }\n        const cards = this.getCards();\n        this.cards = cards.filter(d => d.data.value !== null);\n        this.emptySlots = cards.filter(d => d.data.value === null);\n    }\n    getCards() {\n        const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n        const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n        return this.data.map((d, index) => {\n            let label = d.data.name;\n            if (label && label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label ? label.toLocaleString() : label;\n            }\n            const value = d.data.value;\n            const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n            const color = this.cardColor || valueColor || '#000';\n            return {\n                x: d.x,\n                y: d.y,\n                width: d.width - xPadding,\n                height: d.height - yPadding,\n                color,\n                bandColor: this.bandColor || valueColor,\n                textColor: this.textColor || invertColor(color),\n                label,\n                data: d.data,\n                tooltipText: `${label}: ${value}`\n            };\n        });\n    }\n    trackBy(index, card) {\n        return card.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nCardSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCardSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", innerPadding: \"innerPadding\", cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `, isInline: true, components: [{ type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: [\"color\", \"bandColor\", \"textColor\", \"x\", \"y\", \"width\", \"height\", \"label\", \"data\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card-series]',\n                    template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass NumberCardComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.innerPadding = 15;\n        this.margin = [10, 10, 10, 10];\n    }\n    get clickable() {\n        return !!this.select.observers.length;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        const size = gridSize(this.dims, this.results.length, 150);\n        const N = size[0] * size[1];\n        const data = this.results.slice();\n        while (data.length < N) {\n            data.push({ value: null });\n        }\n        this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nNumberCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nNumberCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: NumberCardComponent, selector: \"ngx-charts-number-card\", inputs: { cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", innerPadding: \"innerPadding\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", designatedTotal: \"designatedTotal\" }, usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: [\"data\", \"dims\", \"colors\", \"innerPadding\", \"cardColor\", \"bandColor\", \"emptyColor\", \"textColor\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-number-card', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"] }]\n        }], propDecorators: { cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], designatedTotal: [{\n                type: Input\n            }] } });\n\nclass NumberCardModule {\n}\nNumberCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNumberCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, declarations: [CardComponent, CardSeriesComponent, NumberCardComponent], imports: [ChartCommonModule], exports: [CardComponent, CardSeriesComponent, NumberCardComponent] });\nNumberCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n                    exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n                }]\n        }] });\n\nclass TreeMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.initialized = false;\n        this.orientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n        const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n        const cellData = {\n            data: this.data,\n            label: this.label,\n            value: this.value\n        };\n        this.formattedValue = this.valueFormatting(cellData.value);\n        this.formattedLabel = labelFormatting(cellData);\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n    }\n    update() {\n        if (this.initialized) {\n            this.animateToCurrentForm();\n        }\n        else {\n            if (this.animations) {\n                this.loadAnimation();\n            }\n            this.initialized = true;\n        }\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n        this.animateToCurrentForm();\n    }\n    getTextColor() {\n        return invertColor(this.fill);\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        if (this.animations) {\n            node\n                .transition()\n                .duration(750)\n                .attr('opacity', 1)\n                .attr('x', this.x)\n                .attr('y', this.y)\n                .attr('width', this.width)\n                .attr('height', this.height);\n        }\n        else {\n            node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n        }\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: 0.3\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n}\nTreeMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: { data: \"data\", fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", value: \"value\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell]',\n                    template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapCellSeriesComponent {\n    constructor() {\n        this.gradient = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.styleTypes = StyleTypes;\n        this.placementTypes = PlacementTypes;\n    }\n    ngOnChanges(changes) {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        return this.data.children\n            .filter(d => {\n            return d.depth === 1;\n        })\n            .map((d, index) => {\n            const label = d.id;\n            return {\n                data: d.data,\n                x: d.x0,\n                y: d.y0,\n                width: d.x1 - d.x0,\n                height: d.y1 - d.y0,\n                fill: this.colors.getColor(label),\n                label,\n                value: d.value\n            };\n        });\n    }\n    getTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nTreeMapCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: [\"data\", \"fill\", \"x\", \"y\", \"width\", \"height\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.margin = [10, 10, 10, 10];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.domain = this.getDomain();\n        this.treemap = treemap().size([this.dims.width, this.dims.height]);\n        const rootNode = {\n            name: 'root',\n            value: 0,\n            isRoot: true\n        };\n        const root = stratify()\n            .id(d => {\n            let label = d.name;\n            if (label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label.toLocaleString();\n            }\n            return label;\n        })\n            .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n            .sum(d => d.value);\n        this.data = this.treemap(root);\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nTreeMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nTreeMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapComponent, selector: \"ngx-charts-tree-map\", inputs: { results: \"results\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\" }, outputs: { select: \"select\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: [\"data\", \"dims\", \"colors\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-tree-map', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"] }]\n        }], propDecorators: { results: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass TreeMapModule {\n}\nTreeMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent], imports: [ChartCommonModule], exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent] });\nTreeMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n                    exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n                }]\n        }] });\n\nvar ElementType;\n(function (ElementType) {\n    ElementType[\"Value\"] = \"value\";\n    ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\nclass LinearGaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.min = 0;\n        this.max = 100;\n        this.value = 0;\n        this.margin = [10, 20, 10, 20];\n        this.valueResizeScale = 1;\n        this.unitsResizeScale = 1;\n        this.valueTextTransform = '';\n        this.valueTranslate = '';\n        this.unitsTextTransform = '';\n        this.unitsTranslate = '';\n        this.barOrientation = BarOrientation;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => {\n            this.scaleText(ElementType.Value);\n            this.scaleText(ElementType.Units);\n        });\n    }\n    update() {\n        super.update();\n        this.hasPreviousValue = this.previousValue !== undefined;\n        this.max = Math.max(this.max, this.value);\n        this.min = Math.min(this.min, this.value);\n        if (this.hasPreviousValue) {\n            this.max = Math.max(this.max, this.previousValue);\n            this.min = Math.min(this.min, this.previousValue);\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.setColors();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n        this.valueTranslate = `translate(0, -15)`;\n        this.unitsTranslate = `translate(0, 15)`;\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR('value');\n            this.scaleTextSSR('units');\n        }\n        else {\n            setTimeout(() => this.scaleText(ElementType.Value), 50);\n            setTimeout(() => this.scaleText(ElementType.Units), 50);\n        }\n    }\n    getValueDomain() {\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        if (this.valueFormatting) {\n            return this.valueFormatting(this.value);\n        }\n        return this.value.toLocaleString();\n    }\n    scaleText(element, repeat = true) {\n        let el;\n        let resizeScale;\n        if (element === ElementType.Value) {\n            el = this.valueTextEl;\n            resizeScale = this.valueResizeScale;\n        }\n        else {\n            el = this.unitsTextEl;\n            resizeScale = this.unitsResizeScale;\n        }\n        const { width, height } = el.nativeElement.getBoundingClientRect();\n        if (width === 0 || height === 0)\n            return;\n        const oldScale = resizeScale;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (resizeScale !== oldScale) {\n            if (element === ElementType.Value) {\n                this.valueResizeScale = resizeScale;\n                this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            else {\n                this.unitsResizeScale = resizeScale;\n                this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            this.cd.markForCheck();\n            if (repeat && isPlatformBrowser(this.platformId)) {\n                setTimeout(() => {\n                    this.scaleText(element, false);\n                }, 50);\n            }\n        }\n    }\n    scaleTextSSR(element) {\n        let resizeScale = 1;\n        const value = element === 'value' ? this.displayValue : this.units;\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n        const height = 25;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (element === 'value') {\n            this.valueResizeScale = resizeScale;\n            this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        else {\n            this.unitsResizeScale = resizeScale;\n            this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        this.cd.markForCheck();\n    }\n    onClick() {\n        this.select.emit({\n            name: 'Value',\n            value: this.value\n        });\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n    }\n}\nLinearGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLinearGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LinearGaugeComponent, selector: \"ngx-charts-linear-gauge\", inputs: { min: \"min\", max: \"max\", value: \"value\", units: \"units\", previousValue: \"previousValue\", valueFormatting: \"valueFormatting\" }, viewQueries: [{ propertyName: \"valueTextEl\", first: true, predicate: [\"valueTextEl\"], descendants: true }, { propertyName: \"unitsTextEl\", first: true, predicate: [\"unitsTextEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-linear-gauge', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"] }]\n        }], propDecorators: { min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], previousValue: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], valueTextEl: [{\n                type: ViewChild,\n                args: ['valueTextEl']\n            }], unitsTextEl: [{\n                type: ViewChild,\n                args: ['unitsTextEl']\n            }] } });\n\nclass GaugeArcComponent {\n    constructor() {\n        this.isActive = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    tooltipText(arc) {\n        const label = formatLabel(arc.data.name);\n        let val;\n        if (this.valueFormatting) {\n            val = this.valueFormatting(arc.data.value);\n        }\n        else {\n            val = formatLabel(arc.data.value);\n        }\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n}\nGaugeArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: { backgroundArc: \"backgroundArc\", valueArc: \"valueArc\", cornerRadius: \"cornerRadius\", colors: \"colors\", isActive: \"isActive\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-arc]',\n                    template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { backgroundArc: [{\n                type: Input\n            }], valueArc: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GaugeAxisComponent {\n    constructor() {\n        this.rotate = '';\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.rotationAngle = -90 + this.startAngle;\n        this.rotate = `rotate(${this.rotationAngle})`;\n        this.ticks = this.getTicks();\n    }\n    getTicks() {\n        const bigTickSegment = this.angleSpan / this.bigSegments;\n        const smallTickSegment = bigTickSegment / this.smallSegments;\n        const tickLength = 20;\n        const ticks = {\n            big: [],\n            small: []\n        };\n        const startDistance = this.radius + 10;\n        const textDist = startDistance + tickLength + 10;\n        for (let i = 0; i <= this.bigSegments; i++) {\n            const angleDeg = i * bigTickSegment;\n            const angle = (angleDeg * Math.PI) / 180;\n            const textAnchor = this.getTextAnchor(angleDeg);\n            let skip = false;\n            if (i === 0 && this.angleSpan === 360) {\n                skip = true;\n            }\n            if (!skip) {\n                let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n                if (this.tickFormatting) {\n                    text = this.tickFormatting(text);\n                }\n                ticks.big.push({\n                    line: this.getTickPath(startDistance, tickLength, angle),\n                    textAnchor,\n                    text,\n                    textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n                });\n            }\n            if (i === this.bigSegments) {\n                continue;\n            }\n            for (let j = 1; j <= this.smallSegments; j++) {\n                const smallAngleDeg = angleDeg + j * smallTickSegment;\n                const smallAngle = (smallAngleDeg * Math.PI) / 180;\n                ticks.small.push({\n                    line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n                });\n            }\n        }\n        return ticks;\n    }\n    getTextAnchor(angle) {\n        // [0, 45] = 'middle';\n        // [46, 135] = 'start';\n        // [136, 225] = 'middle';\n        // [226, 315] = 'end';\n        angle = (this.startAngle + angle) % 360;\n        let textAnchor = TextAnchor.Middle;\n        if (angle > 45 && angle <= 135) {\n            textAnchor = TextAnchor.Start;\n        }\n        else if (angle > 225 && angle <= 315) {\n            textAnchor = TextAnchor.End;\n        }\n        return textAnchor;\n    }\n    getTickPath(startDistance, tickLength, angle) {\n        const y1 = startDistance * Math.sin(angle);\n        const y2 = (startDistance + tickLength) * Math.sin(angle);\n        const x1 = startDistance * Math.cos(angle);\n        const x2 = (startDistance + tickLength) * Math.cos(angle);\n        const points = [\n            { x: x1, y: y1 },\n            { x: x2, y: y2 }\n        ];\n        const lineGenerator = line()\n            .x(d => d.x)\n            .y(d => d.y);\n        return lineGenerator(points);\n    }\n}\nGaugeAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: { bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", min: \"min\", max: \"max\", angleSpan: \"angleSpan\", startAngle: \"startAngle\", radius: \"radius\", valueScale: \"valueScale\", tickFormatting: \"tickFormatting\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-axis]',\n                    template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], valueScale: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }] } });\n\nclass GaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.min = 0;\n        this.max = 100;\n        this.bigSegments = 10;\n        this.smallSegments = 5;\n        this.showAxis = true;\n        this.startAngle = -120;\n        this.angleSpan = 240;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.showText = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.resizeScale = 1;\n        this.rotation = '';\n        this.textTransform = 'scale(1, 1)';\n        this.cornerRadius = 10;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => this.scaleText());\n    }\n    update() {\n        super.update();\n        if (!this.showAxis) {\n            if (!this.margin) {\n                this.margin = [10, 20, 10, 20];\n            }\n        }\n        else {\n            if (!this.margin) {\n                this.margin = [60, 100, 60, 100];\n            }\n        }\n        // make the starting angle positive\n        if (this.startAngle < 0) {\n            this.startAngle = (this.startAngle % 360) + 360;\n        }\n        this.angleSpan = Math.min(this.angleSpan, 360);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.domain = this.getDomain();\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n        this.arcs = this.getArcs();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.rotation = `rotate(${this.startAngle})`;\n        setTimeout(() => this.scaleText(), 50);\n    }\n    getArcs() {\n        const arcs = [];\n        const availableRadius = this.outerRadius * 0.7;\n        const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n        const arcWidth = radiusPerArc * 0.7;\n        this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n        this.cornerRadius = Math.floor(arcWidth / 2);\n        let i = 0;\n        for (const d of this.results) {\n            const outerRadius = this.outerRadius - i * radiusPerArc;\n            const innerRadius = outerRadius - arcWidth;\n            const backgroundArc = {\n                endAngle: (this.angleSpan * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: this.max,\n                    name: d.name\n                }\n            };\n            const valueArc = {\n                endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: d.value,\n                    name: d.name\n                }\n            };\n            const arc = {\n                backgroundArc,\n                valueArc\n            };\n            arcs.push(arc);\n            i++;\n        }\n        return arcs;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    getValueDomain() {\n        const values = this.results.map(d => d.value);\n        const dataMin = Math.min(...values);\n        const dataMax = Math.max(...values);\n        if (this.min !== undefined) {\n            this.min = Math.min(this.min, dataMin);\n        }\n        else {\n            this.min = dataMin;\n        }\n        if (this.max !== undefined) {\n            this.max = Math.max(this.max, dataMax);\n        }\n        else {\n            this.max = dataMax;\n        }\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n        if (this.textValue && 0 !== this.textValue.length) {\n            return this.textValue.toLocaleString();\n        }\n        if (this.valueFormatting) {\n            return this.valueFormatting(value);\n        }\n        return value.toLocaleString();\n    }\n    scaleText(repeat = true) {\n        if (!this.showText) {\n            return;\n        }\n        const { width } = this.textEl.nativeElement.getBoundingClientRect();\n        const oldScale = this.resizeScale;\n        if (width === 0) {\n            this.resizeScale = 1;\n        }\n        else {\n            const availableSpace = this.textRadius;\n            this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n        }\n        if (this.resizeScale !== oldScale) {\n            this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n            this.cd.markForCheck();\n            if (repeat) {\n                setTimeout(() => this.scaleText(false), 50);\n            }\n        }\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            colors: this.colors,\n            domain: this.domain,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n    trackBy(index, item) {\n        return item.valueArc.data.name;\n    }\n}\nGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeComponent, selector: \"ngx-charts-gauge\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", min: \"min\", max: \"max\", textValue: \"textValue\", units: \"units\", bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", results: \"results\", showAxis: \"showAxis\", startAngle: \"startAngle\", angleSpan: \"angleSpan\", activeEntries: \"activeEntries\", axisTickFormatting: \"axisTickFormatting\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", showText: \"showText\", margin: \"margin\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: [\"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"valueFormatting\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: [\"bigSegments\", \"smallSegments\", \"min\", \"max\", \"angleSpan\", \"startAngle\", \"radius\", \"valueScale\", \"tickFormatting\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-gauge', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], textValue: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], showAxis: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], axisTickFormatting: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], showText: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl']\n            }] } });\n\nclass GaugeModule {\n}\nGaugeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGaugeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent], imports: [ChartCommonModule, PieChartModule, BarChartModule], exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent] });\nGaugeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, imports: [[ChartCommonModule, PieChartModule, BarChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, BarChartModule],\n                    declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n                    exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n                }]\n        }] });\n\n// The export is needed here to generate a valid polyfills.metadata.json file\nfunction ngxChartsPolyfills() {\n    // IE11 fix\n    // Ref: https://github.com/swimlane/ngx-charts/issues/386\n    if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n        SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n    }\n}\n\nclass NgxChartsModule {\n    constructor() {\n        ngxChartsPolyfills();\n    }\n}\nNgxChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, exports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\nNgxChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, imports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [\n                        ChartCommonModule,\n                        AreaChartModule,\n                        BarChartModule,\n                        BoxChartModule,\n                        BubbleChartModule,\n                        HeatMapModule,\n                        LineChartModule,\n                        PolarChartModule,\n                        NumberCardModule,\n                        PieChartModule,\n                        TreeMapModule,\n                        GaugeModule\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nfunction tickFormat(fieldType, groupByType) {\n    return function (label) {\n        if (label === 'No Value' || label === 'Other') {\n            return label;\n        }\n        if (fieldType === 'date' && groupByType === 'groupBy') {\n            const formatter = timeFormat('MM/DD/YYYY');\n            return formatter(label);\n        }\n        return label.toString();\n    };\n}\n\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getTickLines, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };\n"],"mappings":"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ArI1/G;EAAA;EAAA;EAAA;AAAA;;AAsIA;EAAA,mDAhuM0GpS,EAguM1G,mBAA2Fw4B,yBAA3F,EAAkI,CAAC;IACvHrwB,IAAI,EAAEjI,SADiH;IAEvH2D,IAAI,EAAE,CAAC;MAAE4F,QAAQ,EAAE,+BAAZ;MAA6CC,QAAQ,EAAG;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GArImB;MAqId+F,eAAe,EAAE/O,uBAAuB,CAACgP,MArI3B;MAqImC/F,aAAa,EAAExJ,iBAAiB,CAACyJ,IArIpE;MAqI0EC,MAAM,EAAE,CAAC,woDAAD;IArIlF,CAAD;EAFiH,CAAD,CAAlI,QAwI4B;IAAEwlB,MAAM,EAAE,CAAC;MACvBlnB,IAAI,EAAE9H;IADiB,CAAD,CAAV;IAEZ20B,WAAW,EAAE,CAAC;MACd7sB,IAAI,EAAE9H;IADQ,CAAD,CAFD;IAIZ0wB,cAAc,EAAE,CAAC;MACjB5oB,IAAI,EAAE9H;IADW,CAAD,CAJJ;IAMZ40B,KAAK,EAAE,CAAC;MA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ALU,CAAX,CADY,CAAnB,CADgtG;EAjH/tG;EAAA;AAAA;;AA4HA;EAAA,mDAtzP0GlX,EAszP1G,mBAA2Fk8B,wBAA3F,EAAiI,CAAC;IACtH/zB,IAAI,EAAEjI,SADgH;IAEtH2D,IAAI,EAAE,CAAC;MAAE4F,QAAQ,EAAE,8BAAZ;MAA4CC,QAAQ,EAAG;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAjHmB;MAiHd+F,eAAe,EAAE/O,uBAAuB,CAACgP,MAjH3B;MAiHmC/F,aAAa,EAAExJ,iBAAiB,CAACyJ,IAjHpE;MAiH0E2I,UAAU,EAAE,CACjF9Q,OAAO,CAAC,gBAAD,EAAmB,CACtBC,UAAU,CAAC,QAAD,EAAW,CACjBC,KAAK,CAAC;QACFqlB,OAAO,EAAE,CADP;QAEF9P,SAAS,EAAE;MAFT,CAAD,CADY,EAKjBtV,OAAO,CAAC,GAAD,EAAMD,KAAK,CAAC;QAAEqlB,OAAO,EAAE,CAAX;QAAc9P,SAAS,EAAE;MAAzB,CAAD,CAAX,CALU,CAAX,CADY,CAAnB,CAD0E,CAjHtF;MA2HIrN,MAAM,EAAE,CAAC,woDAAD;IA3HZ,CAAD;EAFgH,CAAD,CAAjI,QA8H4B;IAAEwlB,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"},"metadata":{},"sourceType":"module"}