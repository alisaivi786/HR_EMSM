{"ast":null,"code":"import _asyncToGenerator from \"D:/Angular Dev/HR_EMS/EMS/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../Services/AuthService\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, authService) {\n      this.router = router;\n      this.authService = authService; // Execute isAuthenticated here in the constructor\n      //this.checkIsAuthenticated();\n    } // private async checkIsAuthenticated(): Promise<void> {\n    //   const isAuthenticated = await this.authService.isAuthenticated();\n    //   if (!isAuthenticated) {\n    //     // Token is expired or not present, you can handle this here\n    //     // For example, you might want to redirect to the login page\n    //     this.router.navigate(['/login']);\n    //   }\n    // }\n\n\n    canActivate(next, state) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const isAuthenticated = yield _this.authService.isAuthenticated();\n\n        if (!isAuthenticated) {\n          // Token is expired or not present, redirect to login page\n          return _this.router.parseUrl('/login');\n        } // Token is valid, allow navigation\n\n\n        return true;\n      })();\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}