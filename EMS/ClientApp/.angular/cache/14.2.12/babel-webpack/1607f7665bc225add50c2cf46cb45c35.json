{"ast":null,"code":"import { catchError, map, of, take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./ApiService\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(apiService, router) {\n      this.apiService = apiService;\n      this.router = router;\n      this.isAuthenticatedData = false;\n      this.bearedToken = \"\";\n    }\n\n    login(userName, password) {\n      const authRequest = {\n        userName,\n        password\n      };\n      console.log(authRequest);\n      return this.apiService.post('auth/login', authRequest);\n    }\n\n    getToken() {\n      return this.apiService.get('auth/get-token');\n    }\n\n    getTokenValidation() {\n      return this.apiService.get('auth/token-auhtenticated');\n    }\n\n    isAuthenticated() {\n      return this.getTokenValidation().pipe(take(1), map(response => {\n        if (response.success && response.error === null) {\n          return true;\n        } else {\n          return false;\n        }\n      }), catchError(error => {\n        return of(false); // Handle the error gracefully and return false\n      }));\n    }\n\n    getTokenFromCookies() {\n      // Add your authentication logic here\n      // For example, check if the user is logged in or has a valid token\n      this.getToken().subscribe(response => {\n        if (response.success && response.error === null) {\n          console.log(response);\n          this.bearedToken = response.data.token;\n        } else {\n          this.bearedToken = \"\";\n        }\n      }, error => {\n        this.bearedToken = \"\";\n      });\n      return this.bearedToken;\n    }\n\n    redirectToLogin() {\n      this.router.navigate(['/login']); // Redirect to the login page\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}